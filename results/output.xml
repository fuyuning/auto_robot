<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190515 08:32:25.502" generator="Robot 3.1.1 (Python 3.5.2 on linux)">
<suite id="s1" name="Tests" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests">
<suite id="s1-s1" name="Server Account" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_account">
<suite id="s1-s1-s1" name="Accounts" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_account/accounts.robot">
<kw name="Login" type="setup" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>${admin_username}</arg>
<arg>${admin_password}</arg>
</arguments>
<status starttime="20190515 08:32:25.739" status="PASS" endtime="20190515 08:32:27.868"></status>
</kw>
<test id="s1-s1-s1-t1" name="post users Success">
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<assign>
<var>${mobile}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:27.870">${mobile} = 17851187092</msg>
<status starttime="20190515 08:32:27.869" status="PASS" endtime="20190515 08:32:27.870"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${mobile}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:27.870">${mobile} = 17851187092</msg>
<status starttime="20190515 08:32:27.870" status="PASS" endtime="20190515 08:32:27.870"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>robot${mobile}</arg>
</arguments>
<assign>
<var>${username}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:27.871">${username} = robot17851187092</msg>
<status starttime="20190515 08:32:27.870" status="PASS" endtime="20190515 08:32:27.871"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${username}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:27.871">${username} = robot17851187092</msg>
<status starttime="20190515 08:32:27.871" status="PASS" endtime="20190515 08:32:27.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username}</arg>
<arg>password=${username}</arg>
<arg>realname=${realname}</arg>
<arg>gender=${gender}</arg>
<arg>mobile=${mobile}</arg>
<arg>email=${mobile}@163.com</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:27.872">${essential_params} = {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com'}</msg>
<status starttime="20190515 08:32:27.871" status="PASS" endtime="20190515 08:32:27.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:27.873">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:27.873" status="PASS" endtime="20190515 08:32:27.873"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post users success 201</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:27.874">@{results} = [ {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com'} ]</msg>
<status starttime="20190515 08:32:27.873" status="PASS" endtime="20190515 08:32:27.874"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post users Success 201">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.337">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:27.874" status="PASS" endtime="20190515 08:32:28.338"></status>
</kw>
<kw name="Expect Status is 201" library="resources">
<doc>检测响应状态是否为201 Created，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/post_users_201.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.340">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.340" status="PASS" endtime="20190515 08:32:28.340"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.341">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.341" status="PASS" endtime="20190515 08:32:28.341"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.341">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.341" status="PASS" endtime="20190515 08:32:28.341"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.341">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.341" status="PASS" endtime="20190515 08:32:28.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.342">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.342" status="PASS" endtime="20190515 08:32:28.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.342">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.342" status="PASS" endtime="20190515 08:32:28.342"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.343">{"username": "robot17851187092", "created_time": 1557880348.087771}</msg>
<status starttime="20190515 08:32:28.342" status="PASS" endtime="20190515 08:32:28.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.343">https://camera-monitor-deployment-server-d.parkone.cn/users</msg>
<status starttime="20190515 08:32:28.343" status="PASS" endtime="20190515 08:32:28.343"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.343">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.343" status="PASS" endtime="20190515 08:32:28.343"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.344" status="PASS" endtime="20190515 08:32:28.344"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.344">${re} = PASS</msg>
<status starttime="20190515 08:32:28.342" status="PASS" endtime="20190515 08:32:28.344"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.344" status="PASS" endtime="20190515 08:32:28.344"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.345" status="PASS" endtime="20190515 08:32:28.346"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.346" status="PASS" endtime="20190515 08:32:28.346"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.346">${js} = PASS</msg>
<status starttime="20190515 08:32:28.344" status="PASS" endtime="20190515 08:32:28.346"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.347" status="PASS" endtime="20190515 08:32:28.347"></status>
</kw>
<status starttime="20190515 08:32:28.346" status="PASS" endtime="20190515 08:32:28.347"></status>
</kw>
<status starttime="20190515 08:32:28.338" status="PASS" endtime="20190515 08:32:28.347"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['username']}</arg>
</arguments>
<assign>
<var>${username}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.347">${username} = robot17851187092</msg>
<status starttime="20190515 08:32:28.347" status="PASS" endtime="20190515 08:32:28.347"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${username}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.348">${username} = robot17851187092</msg>
<status starttime="20190515 08:32:28.347" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<status starttime="20190515 08:32:27.874" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<status starttime="20190515 08:32:27.874" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<status starttime="20190515 08:32:27.874" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<status starttime="20190515 08:32:27.874" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<status starttime="20190515 08:32:27.873" status="PASS" endtime="20190515 08:32:28.348"></status>
</kw>
<doc>接口名:添加用户

请求方式:Post

预期结果:输入正确参数,http响应码返回 201,返回的Json数据符合验证。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:201</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:27.869" status="PASS" endtime="20190515 08:32:28.348"></status>
</test>
<test id="s1-s1-s1-t2" name="post users Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username_422}</arg>
<arg>password=${password_422}</arg>
<arg>realname=${realname_422}</arg>
<arg>gender=${gender_422}</arg>
<arg>mobile=${mobile_422}</arg>
<arg>email=${email_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.349">${essential_params} = {'username': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot...</msg>
<status starttime="20190515 08:32:28.349" status="PASS" endtime="20190515 08:32:28.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.350">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:28.349" status="PASS" endtime="20190515 08:32:28.350"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post users fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.350">@{results} = [ {'username': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRob...</msg>
<status starttime="20190515 08:32:28.350" status="PASS" endtime="20190515 08:32:28.350"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'username': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post users Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.450">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:28.351" status="PASS" endtime="20190515 08:32:28.450"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.454">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.452" status="PASS" endtime="20190515 08:32:28.454"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.456">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.455" status="PASS" endtime="20190515 08:32:28.456"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.457">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.456" status="PASS" endtime="20190515 08:32:28.458"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.459">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.458" status="PASS" endtime="20190515 08:32:28.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.460">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.460" status="PASS" endtime="20190515 08:32:28.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.461">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.461" status="PASS" endtime="20190515 08:32:28.461"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.464">{"message": "Validation Failed", "errors": [{"field": "username", "code": "invalid"}, {"field": "password", "code": "invalid"}, {"field": "realname", "code": "invalid"}, {"field": "gender", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "email", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:28.463" status="PASS" endtime="20190515 08:32:28.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.466">https://camera-monitor-deployment-server-d.parkone.cn/users</msg>
<status starttime="20190515 08:32:28.465" status="PASS" endtime="20190515 08:32:28.466"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.467">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.466" status="PASS" endtime="20190515 08:32:28.467"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.468" status="PASS" endtime="20190515 08:32:28.469"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.469">${re} = PASS</msg>
<status starttime="20190515 08:32:28.462" status="PASS" endtime="20190515 08:32:28.470"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.471" status="PASS" endtime="20190515 08:32:28.472"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.472" status="PASS" endtime="20190515 08:32:28.478"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.479" status="PASS" endtime="20190515 08:32:28.480"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.481">${js} = PASS</msg>
<status starttime="20190515 08:32:28.470" status="PASS" endtime="20190515 08:32:28.481"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.482" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.481" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.451" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.351" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.351" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.351" status="PASS" endtime="20190515 08:32:28.483"></status>
</kw>
<status starttime="20190515 08:32:28.351" status="PASS" endtime="20190515 08:32:28.484"></status>
</kw>
<status starttime="20190515 08:32:28.350" status="PASS" endtime="20190515 08:32:28.484"></status>
</kw>
<doc>接口名:添加用户

请求方式:Post

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:28.348" status="PASS" endtime="20190515 08:32:28.484"></status>
</test>
<test id="s1-s1-s1-t3" name="get user Success">
<kw name="get user Success 200">
<kw name="Get User" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.552">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:28.487" status="PASS" endtime="20190515 08:32:28.552"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_user_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.553">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.553" status="PASS" endtime="20190515 08:32:28.553"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.554">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.553" status="PASS" endtime="20190515 08:32:28.554"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.555">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.554" status="PASS" endtime="20190515 08:32:28.555"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.555">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.555" status="PASS" endtime="20190515 08:32:28.556"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.556">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.556" status="PASS" endtime="20190515 08:32:28.556"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.557">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.556" status="PASS" endtime="20190515 08:32:28.557"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.559">{"username": "admin_123", "realname": "\u7ba1\u7406\u5458", "email": "88888888@qq.com", "mobile": "13888888888", "gender": 1, "roles": [], "is_superuser": true, "updated_time": 1557365134.625103, "created_time": 1557365134.625067}</msg>
<status starttime="20190515 08:32:28.558" status="PASS" endtime="20190515 08:32:28.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.560">https://camera-monitor-deployment-server-d.parkone.cn/user</msg>
<status starttime="20190515 08:32:28.559" status="PASS" endtime="20190515 08:32:28.560"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.560">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.560" status="PASS" endtime="20190515 08:32:28.561"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.561" status="PASS" endtime="20190515 08:32:28.561"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.562">${re} = PASS</msg>
<status starttime="20190515 08:32:28.558" status="PASS" endtime="20190515 08:32:28.562"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.563" status="PASS" endtime="20190515 08:32:28.563"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.563" status="PASS" endtime="20190515 08:32:28.566"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.567" status="PASS" endtime="20190515 08:32:28.567"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.567">${js} = PASS</msg>
<status starttime="20190515 08:32:28.562" status="PASS" endtime="20190515 08:32:28.568"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.569" status="PASS" endtime="20190515 08:32:28.569"></status>
</kw>
<status starttime="20190515 08:32:28.568" status="PASS" endtime="20190515 08:32:28.569"></status>
</kw>
<status starttime="20190515 08:32:28.552" status="PASS" endtime="20190515 08:32:28.569"></status>
</kw>
<status starttime="20190515 08:32:28.487" status="PASS" endtime="20190515 08:32:28.570"></status>
</kw>
<doc>接口名:获取用户信息

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 User 列表。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:28.485" status="PASS" endtime="20190515 08:32:28.570"></status>
</test>
<test id="s1-s1-s1-t4" name="get users Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.573">${essential_params} = {}</msg>
<status starttime="20190515 08:32:28.572" status="PASS" endtime="20190515 08:32:28.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username}</arg>
<arg>page_size=${page_size}</arg>
<arg>page_num=${page_num}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.574">${unessential_params} = {'username': 'robot17851187092', 'page_size': '20', 'page_num': '1'}</msg>
<status starttime="20190515 08:32:28.573" status="PASS" endtime="20190515 08:32:28.574"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get users success 200</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.576">params:{'username': 'robot17851187092'}
params:{'page_size': '20', 'username': 'robot17851187092'}
params:{'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:28.576">@{results} = [ {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'} | {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'} | {'page_size': '20', 'username': 'robot17851187092', 'pag...</msg>
<status starttime="20190515 08:32:28.575" status="PASS" endtime="20190515 08:32:28.576"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:28.578" status="PASS" endtime="20190515 08:32:28.640"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_users_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.646">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.642" status="PASS" endtime="20190515 08:32:28.646"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.648">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.647" status="PASS" endtime="20190515 08:32:28.648"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.650">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.649" status="PASS" endtime="20190515 08:32:28.650"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.651">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.650" status="PASS" endtime="20190515 08:32:28.651"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.652">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.652" status="PASS" endtime="20190515 08:32:28.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.654">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.653" status="PASS" endtime="20190515 08:32:28.654"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.656">[{"username": "robot17851187092", "realname": "robot123", "email": "17851187092@163.com", "mobile": "17851187092", "gender": 1, "roles": [], "is_superuser": false, "updated_time": 1557880348.316376, "created_time": 1557880348.087771}]</msg>
<status starttime="20190515 08:32:28.655" status="PASS" endtime="20190515 08:32:28.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.658">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:28.657" status="PASS" endtime="20190515 08:32:28.658"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.659">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.658" status="PASS" endtime="20190515 08:32:28.660"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.660" status="PASS" endtime="20190515 08:32:28.661"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.662">${re} = PASS</msg>
<status starttime="20190515 08:32:28.654" status="PASS" endtime="20190515 08:32:28.662"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.664" status="PASS" endtime="20190515 08:32:28.665"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.665" status="PASS" endtime="20190515 08:32:28.669"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.669" status="PASS" endtime="20190515 08:32:28.670"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.670">${js} = PASS</msg>
<status starttime="20190515 08:32:28.662" status="PASS" endtime="20190515 08:32:28.670"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.671" status="PASS" endtime="20190515 08:32:28.672"></status>
</kw>
<status starttime="20190515 08:32:28.671" status="PASS" endtime="20190515 08:32:28.672"></status>
</kw>
<status starttime="20190515 08:32:28.640" status="PASS" endtime="20190515 08:32:28.672"></status>
</kw>
<status starttime="20190515 08:32:28.578" status="PASS" endtime="20190515 08:32:28.672"></status>
</kw>
<status starttime="20190515 08:32:28.577" status="PASS" endtime="20190515 08:32:28.672"></status>
</kw>
<status starttime="20190515 08:32:28.577" status="PASS" endtime="20190515 08:32:28.673"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:28.674" status="PASS" endtime="20190515 08:32:28.818"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_users_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.821">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.820" status="PASS" endtime="20190515 08:32:28.821"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.823">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.822" status="PASS" endtime="20190515 08:32:28.823"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.825">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.824" status="PASS" endtime="20190515 08:32:28.825"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.826">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.825" status="PASS" endtime="20190515 08:32:28.826"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.827">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.827" status="PASS" endtime="20190515 08:32:28.828"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.829">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.828" status="PASS" endtime="20190515 08:32:28.830"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.832">[{"username": "robot17851187092", "realname": "robot123", "email": "17851187092@163.com", "mobile": "17851187092", "gender": 1, "roles": [], "is_superuser": false, "updated_time": 1557880348.316376, "created_time": 1557880348.087771}]</msg>
<status starttime="20190515 08:32:28.831" status="PASS" endtime="20190515 08:32:28.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.834">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:28.833" status="PASS" endtime="20190515 08:32:28.834"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.835">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.834" status="PASS" endtime="20190515 08:32:28.835"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.836" status="PASS" endtime="20190515 08:32:28.837"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.837">${re} = PASS</msg>
<status starttime="20190515 08:32:28.830" status="PASS" endtime="20190515 08:32:28.838"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.839" status="PASS" endtime="20190515 08:32:28.840"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.841" status="PASS" endtime="20190515 08:32:28.846"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.846" status="PASS" endtime="20190515 08:32:28.847"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.847">${js} = PASS</msg>
<status starttime="20190515 08:32:28.838" status="PASS" endtime="20190515 08:32:28.848"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.849" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<status starttime="20190515 08:32:28.848" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<status starttime="20190515 08:32:28.819" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<status starttime="20190515 08:32:28.673" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<status starttime="20190515 08:32:28.673" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<status starttime="20190515 08:32:28.673" status="PASS" endtime="20190515 08:32:28.850"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.920">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:28.852" status="PASS" endtime="20190515 08:32:28.920"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_users_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.923">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.922" status="PASS" endtime="20190515 08:32:28.923"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.925">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.924" status="PASS" endtime="20190515 08:32:28.925"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.926">${status_tag} = None</msg>
<status starttime="20190515 08:32:28.925" status="PASS" endtime="20190515 08:32:28.926"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.928">Set tag 'None'.</msg>
<status starttime="20190515 08:32:28.927" status="PASS" endtime="20190515 08:32:28.928"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.929">${re} = FAIL</msg>
<status starttime="20190515 08:32:28.928" status="PASS" endtime="20190515 08:32:28.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.930">${js} = FAIL</msg>
<status starttime="20190515 08:32:28.930" status="PASS" endtime="20190515 08:32:28.930"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.933">[{"username": "robot17851187092", "realname": "robot123", "email": "17851187092@163.com", "mobile": "17851187092", "gender": 1, "roles": [], "is_superuser": false, "updated_time": 1557880348.316376, "created_time": 1557880348.087771}]</msg>
<status starttime="20190515 08:32:28.932" status="PASS" endtime="20190515 08:32:28.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.934">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:28.934" status="PASS" endtime="20190515 08:32:28.935"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:28.937">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:28.935" status="PASS" endtime="20190515 08:32:28.937"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:28.938" status="PASS" endtime="20190515 08:32:28.939"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.939">${re} = PASS</msg>
<status starttime="20190515 08:32:28.931" status="PASS" endtime="20190515 08:32:28.939"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:28.941" status="PASS" endtime="20190515 08:32:28.942"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:28.942" status="PASS" endtime="20190515 08:32:28.948"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:28.949" status="PASS" endtime="20190515 08:32:28.950"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:28.950">${js} = PASS</msg>
<status starttime="20190515 08:32:28.940" status="PASS" endtime="20190515 08:32:28.950"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:28.952" status="PASS" endtime="20190515 08:32:28.952"></status>
</kw>
<status starttime="20190515 08:32:28.951" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.921" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.851" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.851" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.851" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.577" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<status starttime="20190515 08:32:28.575" status="PASS" endtime="20190515 08:32:28.953"></status>
</kw>
<doc>接口名:获取用户列表信息

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 User 列表。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:28.571" status="PASS" endtime="20190515 08:32:28.954"></status>
</test>
<test id="s1-s1-s1-t5" name="get users Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.957">${essential_params} = {}</msg>
<status starttime="20190515 08:32:28.956" status="PASS" endtime="20190515 08:32:28.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page_size=${page_size_422}</arg>
<arg>page_num=${page_num_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.958">${unessential_params} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:28.957" status="PASS" endtime="20190515 08:32:28.958"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get users fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.960">params:{'page_size': 'ThisIsRobot'}
params:{'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:28.960">@{results} = [ {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} | {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} ]</msg>
<status starttime="20190515 08:32:28.959" status="PASS" endtime="20190515 08:32:28.960"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:28.999">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:28.962" status="PASS" endtime="20190515 08:32:28.999"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.000">${bug_level} = None</msg>
<status starttime="20190515 08:32:28.999" status="PASS" endtime="20190515 08:32:29.000"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.000">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.000" status="PASS" endtime="20190515 08:32:29.000"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.001">${status_tag} = None</msg>
<status starttime="20190515 08:32:29.000" status="PASS" endtime="20190515 08:32:29.001"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.001">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.001" status="PASS" endtime="20190515 08:32:29.001"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.001">${re} = FAIL</msg>
<status starttime="20190515 08:32:29.001" status="PASS" endtime="20190515 08:32:29.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.002">${js} = FAIL</msg>
<status starttime="20190515 08:32:29.002" status="PASS" endtime="20190515 08:32:29.002"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.003">{"message": "Validation Failed", "errors": [{"field": "page_size", "code": "invalid"}, {"field": "page_num", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:29.002" status="PASS" endtime="20190515 08:32:29.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.003">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:29.003" status="PASS" endtime="20190515 08:32:29.003"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.004">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:29.003" status="PASS" endtime="20190515 08:32:29.004"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:29.004" status="PASS" endtime="20190515 08:32:29.004"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.004">${re} = PASS</msg>
<status starttime="20190515 08:32:29.002" status="PASS" endtime="20190515 08:32:29.004"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:29.004" status="PASS" endtime="20190515 08:32:29.005"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:29.005" status="PASS" endtime="20190515 08:32:29.006"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:29.006" status="PASS" endtime="20190515 08:32:29.006"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.006">${js} = PASS</msg>
<status starttime="20190515 08:32:29.004" status="PASS" endtime="20190515 08:32:29.006"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:29.007" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<status starttime="20190515 08:32:29.007" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<status starttime="20190515 08:32:28.999" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<status starttime="20190515 08:32:28.961" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<status starttime="20190515 08:32:28.961" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<status starttime="20190515 08:32:28.960" status="PASS" endtime="20190515 08:32:29.007"></status>
</kw>
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.049">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:29.008" status="PASS" endtime="20190515 08:32:29.049"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.050">${bug_level} = None</msg>
<status starttime="20190515 08:32:29.050" status="PASS" endtime="20190515 08:32:29.050"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.051">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.050" status="PASS" endtime="20190515 08:32:29.051"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.051">${status_tag} = None</msg>
<status starttime="20190515 08:32:29.051" status="PASS" endtime="20190515 08:32:29.052"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.052">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.052" status="PASS" endtime="20190515 08:32:29.052"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.053">${re} = FAIL</msg>
<status starttime="20190515 08:32:29.052" status="PASS" endtime="20190515 08:32:29.053"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.053">${js} = FAIL</msg>
<status starttime="20190515 08:32:29.053" status="PASS" endtime="20190515 08:32:29.053"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.054">{"message": "Validation Failed", "errors": [{"field": "page_size", "code": "invalid"}, {"field": "page_num", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:29.054" status="PASS" endtime="20190515 08:32:29.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.055">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:29.055" status="PASS" endtime="20190515 08:32:29.055"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.056">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:29.055" status="PASS" endtime="20190515 08:32:29.056"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:29.056" status="PASS" endtime="20190515 08:32:29.057"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.058">${re} = PASS</msg>
<status starttime="20190515 08:32:29.054" status="PASS" endtime="20190515 08:32:29.058"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:29.059" status="PASS" endtime="20190515 08:32:29.059"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:29.059" status="PASS" endtime="20190515 08:32:29.062"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:29.062" status="PASS" endtime="20190515 08:32:29.063"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.063">${js} = PASS</msg>
<status starttime="20190515 08:32:29.058" status="PASS" endtime="20190515 08:32:29.063"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:29.064" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:29.064" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:29.049" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:29.008" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:29.007" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:29.007" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:28.960" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<status starttime="20190515 08:32:28.958" status="PASS" endtime="20190515 08:32:29.065"></status>
</kw>
<doc>接口名:获取用户列表信息

请求方式:Get

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:28.955" status="PASS" endtime="20190515 08:32:29.066"></status>
</test>
<test id="s1-s1-s1-t6" name="get users by username Success">
<kw name="get users by username Success 200">
<arguments>
<arg>username=${username}</arg>
</arguments>
<kw name="Get Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:29.069" status="PASS" endtime="20190515 08:32:29.138"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_users_by_username_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.141">${bug_level} = None</msg>
<status starttime="20190515 08:32:29.140" status="PASS" endtime="20190515 08:32:29.142"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.143">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.142" status="PASS" endtime="20190515 08:32:29.143"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.145">${status_tag} = None</msg>
<status starttime="20190515 08:32:29.144" status="PASS" endtime="20190515 08:32:29.145"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.146">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.145" status="PASS" endtime="20190515 08:32:29.146"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.148">${re} = FAIL</msg>
<status starttime="20190515 08:32:29.147" status="PASS" endtime="20190515 08:32:29.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.149">${js} = FAIL</msg>
<status starttime="20190515 08:32:29.148" status="PASS" endtime="20190515 08:32:29.149"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.151">{"username": "robot17851187092", "realname": "robot123", "email": "17851187092@163.com", "mobile": "17851187092", "gender": 1, "roles": [], "is_superuser": false, "updated_time": 1557880348.316376, "created_time": 1557880348.087771}</msg>
<status starttime="20190515 08:32:29.151" status="PASS" endtime="20190515 08:32:29.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.153">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:29.152" status="PASS" endtime="20190515 08:32:29.153"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.155">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:29.154" status="PASS" endtime="20190515 08:32:29.155"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:29.155" status="PASS" endtime="20190515 08:32:29.156"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.157">${re} = PASS</msg>
<status starttime="20190515 08:32:29.149" status="PASS" endtime="20190515 08:32:29.157"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:29.159" status="PASS" endtime="20190515 08:32:29.160"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:29.160" status="PASS" endtime="20190515 08:32:29.166"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:29.166" status="PASS" endtime="20190515 08:32:29.167"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.167">${js} = PASS</msg>
<status starttime="20190515 08:32:29.157" status="PASS" endtime="20190515 08:32:29.167"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:29.169" status="PASS" endtime="20190515 08:32:29.169"></status>
</kw>
<status starttime="20190515 08:32:29.168" status="PASS" endtime="20190515 08:32:29.169"></status>
</kw>
<status starttime="20190515 08:32:29.139" status="PASS" endtime="20190515 08:32:29.170"></status>
</kw>
<status starttime="20190515 08:32:29.068" status="PASS" endtime="20190515 08:32:29.170"></status>
</kw>
<doc>接口名:获取指定用户信息

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 User 对象。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:29.066" status="PASS" endtime="20190515 08:32:29.170"></status>
</test>
<test id="s1-s1-s1-t7" name="get users by username Fail With Wrong Url">
<kw name="get users by username Fail 404">
<arguments>
<arg>username=${wrong_url_id}</arg>
</arguments>
<kw name="Get Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.688">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:29.173" status="PASS" endtime="20190515 08:32:29.688"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.691">${bug_level} = None</msg>
<status starttime="20190515 08:32:29.690" status="PASS" endtime="20190515 08:32:29.691"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.692">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.691" status="PASS" endtime="20190515 08:32:29.693"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.694">${status_tag} = None</msg>
<status starttime="20190515 08:32:29.693" status="PASS" endtime="20190515 08:32:29.694"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.696">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.695" status="PASS" endtime="20190515 08:32:29.696"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.699">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /users/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/users/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;users/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:29.698" status="PASS" endtime="20190515 08:32:29.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.701">https://camera-monitor-deployment-server-d.parkone.cn/users/[12345678987654321]</msg>
<status starttime="20190515 08:32:29.700" status="PASS" endtime="20190515 08:32:29.701"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.702">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:29.701" status="PASS" endtime="20190515 08:32:29.703"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:29.703" status="PASS" endtime="20190515 08:32:29.704"></status>
</kw>
<status starttime="20190515 08:32:29.696" status="PASS" endtime="20190515 08:32:29.705"></status>
</kw>
<status starttime="20190515 08:32:29.688" status="PASS" endtime="20190515 08:32:29.705"></status>
</kw>
<status starttime="20190515 08:32:29.173" status="PASS" endtime="20190515 08:32:29.705"></status>
</kw>
<doc>接口名:获取指定用户信息

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:29.171" status="PASS" endtime="20190515 08:32:29.706"></status>
</test>
<test id="s1-s1-s1-t8" name="get roles Success">
<kw name="get roles Success 200">
<kw name="Get Roles" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:29.711" status="PASS" endtime="20190515 08:32:29.752"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_account/get_roles_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.756">${bug_level} = None</msg>
<status starttime="20190515 08:32:29.754" status="PASS" endtime="20190515 08:32:29.756"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.757">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.756" status="PASS" endtime="20190515 08:32:29.758"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.759">${status_tag} = None</msg>
<status starttime="20190515 08:32:29.758" status="PASS" endtime="20190515 08:32:29.759"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.760">Set tag 'None'.</msg>
<status starttime="20190515 08:32:29.759" status="PASS" endtime="20190515 08:32:29.761"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.762">${re} = FAIL</msg>
<status starttime="20190515 08:32:29.761" status="PASS" endtime="20190515 08:32:29.762"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.763">${js} = FAIL</msg>
<status starttime="20190515 08:32:29.762" status="PASS" endtime="20190515 08:32:29.763"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.766">[{"role_id": "608ebe2471f911e9a87e0242c0a8b002", "role_logo": "gly", "role_name": "\u7ba1\u7406\u5458", "is_deleted": false, "created_time": 1557365149.230481, "updated_time": 1557365149.230548}, {"role_id": "608fc0ee71f911e9a87e0242c0a8b002", "role_logo": "kty", "role_name": "\u52d8\u63a2\u5458", "is_deleted": false, "created_time": 1557365149.234246, "updated_time": 1557365149.234274}, {"role_id": "608ff8d471f911e9a87e0242c0a8b002", "role_logo": "zgssy", "role_name": "\u4e2d\u6746\u5b9e\u65bd\u5458", "is_deleted": false, "created_time": 1557365149.235659, "updated_time": 1557365149.235685}, {"role_id": "609025a271f911e9a87e0242c0a8b002", "role_logo": "xjssy", "role_name": "\u76f8\u673a\u5b9e\u65bd\u5458", "is_deleted": false, "created_time": 1557365149.236799, "updated_time": 1557365149.236825}]</msg>
<status starttime="20190515 08:32:29.765" status="PASS" endtime="20190515 08:32:29.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.767">https://camera-monitor-deployment-server-d.parkone.cn/roles</msg>
<status starttime="20190515 08:32:29.766" status="PASS" endtime="20190515 08:32:29.767"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:29.769">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:29.768" status="PASS" endtime="20190515 08:32:29.769"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:29.769" status="PASS" endtime="20190515 08:32:29.770"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.771">${re} = PASS</msg>
<status starttime="20190515 08:32:29.763" status="PASS" endtime="20190515 08:32:29.771"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:29.773" status="PASS" endtime="20190515 08:32:29.774"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:29.774" status="PASS" endtime="20190515 08:32:29.778"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:29.779" status="PASS" endtime="20190515 08:32:29.779"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:29.780">${js} = PASS</msg>
<status starttime="20190515 08:32:29.771" status="PASS" endtime="20190515 08:32:29.780"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:29.781" status="PASS" endtime="20190515 08:32:29.782"></status>
</kw>
<status starttime="20190515 08:32:29.780" status="PASS" endtime="20190515 08:32:29.782"></status>
</kw>
<status starttime="20190515 08:32:29.752" status="PASS" endtime="20190515 08:32:29.782"></status>
</kw>
<status starttime="20190515 08:32:29.710" status="PASS" endtime="20190515 08:32:29.782"></status>
</kw>
<doc>接口名:获取角色列表

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 Role 列表。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:29.707" status="PASS" endtime="20190515 08:32:29.782"></status>
</test>
<test id="s1-s1-s1-t9" name="put users by username Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>realname=${realname}</arg>
<arg>gender=${gender}</arg>
<arg>mobile=${mobile}</arg>
<arg>email=${mobile}@163.com</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.785">${essential_params} = {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com'}</msg>
<status starttime="20190515 08:32:29.784" status="PASS" endtime="20190515 08:32:29.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>password=${username}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.786">${unessential_params} = {'password': 'robot17851187092'}</msg>
<status starttime="20190515 08:32:29.786" status="PASS" endtime="20190515 08:32:29.786"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users by username success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:29.788">params:{'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'}</msg>
<msg level="INFO" timestamp="20190515 08:32:29.788">@{results} = [ {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'} ]</msg>
<status starttime="20190515 08:32:29.787" status="PASS" endtime="20190515 08:32:29.788"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users by username Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.218">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:29.789" status="PASS" endtime="20190515 08:32:30.218"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.221">${bug_level} = None</msg>
<status starttime="20190515 08:32:30.220" status="PASS" endtime="20190515 08:32:30.221"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.221">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.221" status="PASS" endtime="20190515 08:32:30.221"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.221">${status_tag} = None</msg>
<status starttime="20190515 08:32:30.221" status="PASS" endtime="20190515 08:32:30.221"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.222">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.221" status="PASS" endtime="20190515 08:32:30.222"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.222"></msg>
<status starttime="20190515 08:32:30.222" status="PASS" endtime="20190515 08:32:30.222"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.222">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:30.222" status="PASS" endtime="20190515 08:32:30.222"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.223">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:30.223" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:30.223" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:30.222" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:30.218" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:29.789" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:29.788" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:29.788" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:29.788" status="PASS" endtime="20190515 08:32:30.223"></status>
</kw>
<status starttime="20190515 08:32:29.786" status="PASS" endtime="20190515 08:32:30.224"></status>
</kw>
<doc>接口名:修改用户

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:29.783" status="PASS" endtime="20190515 08:32:30.224"></status>
</test>
<test id="s1-s1-s1-t10" name="put users by username Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>realname=${realname}</arg>
<arg>gender=${gender}</arg>
<arg>mobile=${mobile}</arg>
<arg>email=${mobile}@163.com</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.225">${essential_params} = {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com'}</msg>
<status starttime="20190515 08:32:30.225" status="PASS" endtime="20190515 08:32:30.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>password=${username}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.225">${unessential_params} = {'password': 'robot17851187092'}</msg>
<status starttime="20190515 08:32:30.225" status="PASS" endtime="20190515 08:32:30.225"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users by username fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.226">params:{'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'}</msg>
<msg level="INFO" timestamp="20190515 08:32:30.226">@{results} = [ {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'} ]</msg>
<status starttime="20190515 08:32:30.226" status="PASS" endtime="20190515 08:32:30.226"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '17851187092@163.com', 'password': 'robot17851187092'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users by username Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.738">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:30.227" status="PASS" endtime="20190515 08:32:30.738"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.741">${bug_level} = None</msg>
<status starttime="20190515 08:32:30.740" status="PASS" endtime="20190515 08:32:30.741"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.741">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.741" status="PASS" endtime="20190515 08:32:30.741"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.742">${status_tag} = None</msg>
<status starttime="20190515 08:32:30.741" status="PASS" endtime="20190515 08:32:30.742"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.742">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.742" status="PASS" endtime="20190515 08:32:30.742"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.742">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /users/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/users/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;users/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:30.742" status="PASS" endtime="20190515 08:32:30.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.743">https://camera-monitor-deployment-server-d.parkone.cn/users/[12345678987654321]</msg>
<status starttime="20190515 08:32:30.743" status="PASS" endtime="20190515 08:32:30.743"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.743">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:30.743" status="PASS" endtime="20190515 08:32:30.743"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:30.743" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.742" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.738" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.227" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.227" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.226" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.226" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<status starttime="20190515 08:32:30.226" status="PASS" endtime="20190515 08:32:30.744"></status>
</kw>
<doc>接口名:修改用户

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:30.224" status="PASS" endtime="20190515 08:32:30.744"></status>
</test>
<test id="s1-s1-s1-t11" name="put users by username Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>realname=${realname_422}</arg>
<arg>gender=${gender_422}</arg>
<arg>mobile=${mobile_422}</arg>
<arg>email=${email_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.745">${essential_params} = {'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot', 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'email': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:30.745" status="PASS" endtime="20190515 08:32:30.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>password=${password_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.746">${unessential_params} = {'password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:30.745" status="PASS" endtime="20190515 08:32:30.746"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users by username fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.746">params:{'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot', 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'email': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<msg level="INFO" timestamp="20190515 08:32:30.747">@{results} = [ {'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot', 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'email': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], ...</msg>
<status starttime="20190515 08:32:30.746" status="PASS" endtime="20190515 08:32:30.747"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'realname': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'gender': 'ThisIsRobot', 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'email': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'p..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users by username Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.828">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:30.747" status="PASS" endtime="20190515 08:32:30.828"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.831">${bug_level} = None</msg>
<status starttime="20190515 08:32:30.830" status="PASS" endtime="20190515 08:32:30.831"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.832">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.832" status="PASS" endtime="20190515 08:32:30.832"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.832">${status_tag} = None</msg>
<status starttime="20190515 08:32:30.832" status="PASS" endtime="20190515 08:32:30.832"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.832">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.832" status="PASS" endtime="20190515 08:32:30.833"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.833">${re} = FAIL</msg>
<status starttime="20190515 08:32:30.833" status="PASS" endtime="20190515 08:32:30.833"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.833">${js} = FAIL</msg>
<status starttime="20190515 08:32:30.833" status="PASS" endtime="20190515 08:32:30.833"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.834">{"message": "Validation Failed", "errors": [{"field": "password", "code": "invalid"}, {"field": "realname", "code": "invalid"}, {"field": "gender", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "email", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:30.834" status="PASS" endtime="20190515 08:32:30.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.834">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:30.834" status="PASS" endtime="20190515 08:32:30.834"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.834">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:30.834" status="PASS" endtime="20190515 08:32:30.835"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:30.835" status="PASS" endtime="20190515 08:32:30.835"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:30.835">${re} = PASS</msg>
<status starttime="20190515 08:32:30.833" status="PASS" endtime="20190515 08:32:30.835"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:30.835" status="PASS" endtime="20190515 08:32:30.835"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:30.836" status="PASS" endtime="20190515 08:32:30.837"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:30.837" status="PASS" endtime="20190515 08:32:30.837"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:30.837">${js} = PASS</msg>
<status starttime="20190515 08:32:30.835" status="PASS" endtime="20190515 08:32:30.837"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:30.838" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.837" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.829" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.747" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.747" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.747" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.747" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<status starttime="20190515 08:32:30.746" status="PASS" endtime="20190515 08:32:30.838"></status>
</kw>
<doc>接口名:修改用户

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:30.744" status="PASS" endtime="20190515 08:32:30.838"></status>
</test>
<test id="s1-s1-s1-t12" name="put users roles by username Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>role_ids=${role_ids}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.839">${essential_params} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}</msg>
<status starttime="20190515 08:32:30.839" status="PASS" endtime="20190515 08:32:30.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.840">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:30.840" status="PASS" endtime="20190515 08:32:30.840"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users roles by username success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.841">@{results} = [ {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'} ]</msg>
<status starttime="20190515 08:32:30.840" status="PASS" endtime="20190515 08:32:30.841"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users roles by username Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Roles By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.988">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:30.841" status="PASS" endtime="20190515 08:32:30.988"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.991">${bug_level} = None</msg>
<status starttime="20190515 08:32:30.990" status="PASS" endtime="20190515 08:32:30.991"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.993">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.991" status="PASS" endtime="20190515 08:32:30.994"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:30.995">${status_tag} = None</msg>
<status starttime="20190515 08:32:30.994" status="PASS" endtime="20190515 08:32:30.995"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.997">Set tag 'None'.</msg>
<status starttime="20190515 08:32:30.996" status="PASS" endtime="20190515 08:32:30.997"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:30.999"></msg>
<status starttime="20190515 08:32:30.999" status="PASS" endtime="20190515 08:32:31.000"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.001">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/roles</msg>
<status starttime="20190515 08:32:31.000" status="PASS" endtime="20190515 08:32:31.001"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.003">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.002" status="PASS" endtime="20190515 08:32:31.003"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.003" status="PASS" endtime="20190515 08:32:31.004"></status>
</kw>
<status starttime="20190515 08:32:30.997" status="PASS" endtime="20190515 08:32:31.005"></status>
</kw>
<status starttime="20190515 08:32:30.989" status="PASS" endtime="20190515 08:32:31.005"></status>
</kw>
<status starttime="20190515 08:32:30.841" status="PASS" endtime="20190515 08:32:31.005"></status>
</kw>
<status starttime="20190515 08:32:30.841" status="PASS" endtime="20190515 08:32:31.006"></status>
</kw>
<status starttime="20190515 08:32:30.841" status="PASS" endtime="20190515 08:32:31.006"></status>
</kw>
<status starttime="20190515 08:32:30.841" status="PASS" endtime="20190515 08:32:31.006"></status>
</kw>
<status starttime="20190515 08:32:30.840" status="PASS" endtime="20190515 08:32:31.006"></status>
</kw>
<doc>接口名:分配角色

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:30.839" status="PASS" endtime="20190515 08:32:31.007"></status>
</test>
<test id="s1-s1-s1-t13" name="put users roles by username Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>role_ids=${role_ids}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.012">${essential_params} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}</msg>
<status starttime="20190515 08:32:31.010" status="PASS" endtime="20190515 08:32:31.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.013">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:31.012" status="PASS" endtime="20190515 08:32:31.013"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users roles by username fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.017">@{results} = [ {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'} ]</msg>
<status starttime="20190515 08:32:31.016" status="PASS" endtime="20190515 08:32:31.017"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users roles by username Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Roles By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.413">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:31.021" status="PASS" endtime="20190515 08:32:31.413"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.416">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.415" status="PASS" endtime="20190515 08:32:31.416"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.416">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.416" status="PASS" endtime="20190515 08:32:31.416"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.416">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.416" status="PASS" endtime="20190515 08:32:31.416"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.417">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.416" status="PASS" endtime="20190515 08:32:31.417"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.417">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /users/[12345678987654321]/roles&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/users/%5B12345678987654321%5D/roles&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;users/[12345678987654321]/roles&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:31.417" status="PASS" endtime="20190515 08:32:31.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.418">https://camera-monitor-deployment-server-d.parkone.cn/users/[12345678987654321]/roles</msg>
<status starttime="20190515 08:32:31.417" status="PASS" endtime="20190515 08:32:31.418"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.418">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.418" status="PASS" endtime="20190515 08:32:31.418"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.418" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.417" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.414" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.019" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.018" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.018" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.017" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<status starttime="20190515 08:32:31.014" status="PASS" endtime="20190515 08:32:31.419"></status>
</kw>
<doc>接口名:分配角色

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.008" status="PASS" endtime="20190515 08:32:31.419"></status>
</test>
<test id="s1-s1-s1-t14" name="put users roles by username Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>role_ids=${role_ids_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.420">${essential_params} = {'role_ids': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:31.420" status="PASS" endtime="20190515 08:32:31.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.420">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:31.420" status="PASS" endtime="20190515 08:32:31.420"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users roles by username fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.421">@{results} = [ {'role_ids': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']} ]</msg>
<status starttime="20190515 08:32:31.421" status="PASS" endtime="20190515 08:32:31.421"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'role_ids': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users roles by username Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Roles By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.467">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:31.422" status="PASS" endtime="20190515 08:32:31.467"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.468">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.468" status="PASS" endtime="20190515 08:32:31.468"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.469">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.469" status="PASS" endtime="20190515 08:32:31.469"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.470">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.470" status="PASS" endtime="20190515 08:32:31.470"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.471">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.470" status="PASS" endtime="20190515 08:32:31.471"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.472">${re} = FAIL</msg>
<status starttime="20190515 08:32:31.471" status="PASS" endtime="20190515 08:32:31.472"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.473">${js} = FAIL</msg>
<status starttime="20190515 08:32:31.472" status="PASS" endtime="20190515 08:32:31.473"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.474">{"message": "Validation Failed", "errors": [{"field": "role_ids", "code": "not_found"}]}</msg>
<status starttime="20190515 08:32:31.474" status="PASS" endtime="20190515 08:32:31.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.475">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/roles</msg>
<status starttime="20190515 08:32:31.475" status="PASS" endtime="20190515 08:32:31.478"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.479">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.478" status="PASS" endtime="20190515 08:32:31.479"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.479" status="PASS" endtime="20190515 08:32:31.480"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:31.480">${re} = PASS</msg>
<status starttime="20190515 08:32:31.473" status="PASS" endtime="20190515 08:32:31.480"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:31.481" status="PASS" endtime="20190515 08:32:31.482"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:31.482" status="PASS" endtime="20190515 08:32:31.486"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:31.486" status="PASS" endtime="20190515 08:32:31.487"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:31.487">${js} = PASS</msg>
<status starttime="20190515 08:32:31.481" status="PASS" endtime="20190515 08:32:31.487"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:31.488" status="PASS" endtime="20190515 08:32:31.489"></status>
</kw>
<status starttime="20190515 08:32:31.487" status="PASS" endtime="20190515 08:32:31.489"></status>
</kw>
<status starttime="20190515 08:32:31.467" status="PASS" endtime="20190515 08:32:31.489"></status>
</kw>
<status starttime="20190515 08:32:31.422" status="PASS" endtime="20190515 08:32:31.489"></status>
</kw>
<status starttime="20190515 08:32:31.421" status="PASS" endtime="20190515 08:32:31.490"></status>
</kw>
<status starttime="20190515 08:32:31.421" status="PASS" endtime="20190515 08:32:31.490"></status>
</kw>
<status starttime="20190515 08:32:31.421" status="PASS" endtime="20190515 08:32:31.490"></status>
</kw>
<status starttime="20190515 08:32:31.421" status="PASS" endtime="20190515 08:32:31.490"></status>
</kw>
<doc>接口名:分配角色

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.419" status="PASS" endtime="20190515 08:32:31.490"></status>
</test>
<test id="s1-s1-s1-t15" name="put users password by username Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>old_password=${old_password_422}</arg>
<arg>new_password=${new_password_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.494">${essential_params} = {'old_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'new_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:31.493" status="PASS" endtime="20190515 08:32:31.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.495">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:31.494" status="PASS" endtime="20190515 08:32:31.495"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users password by username fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.497">@{results} = [ {'old_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'new_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']} ]</msg>
<status starttime="20190515 08:32:31.496" status="PASS" endtime="20190515 08:32:31.497"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'old_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'new_password': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users password by username Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Password By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.531">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:31.499" status="PASS" endtime="20190515 08:32:31.531"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.533">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.532" status="PASS" endtime="20190515 08:32:31.533"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.533">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.533" status="PASS" endtime="20190515 08:32:31.534"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.534">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.534" status="PASS" endtime="20190515 08:32:31.534"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.535">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.534" status="PASS" endtime="20190515 08:32:31.535"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.535">${re} = FAIL</msg>
<status starttime="20190515 08:32:31.535" status="PASS" endtime="20190515 08:32:31.536"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.536">${js} = FAIL</msg>
<status starttime="20190515 08:32:31.536" status="PASS" endtime="20190515 08:32:31.536"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.538">{"message": "Validation Failed", "errors": [{"field": "old_password", "code": "invalid"}, {"field": "new_password", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:31.537" status="PASS" endtime="20190515 08:32:31.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.538">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/password</msg>
<status starttime="20190515 08:32:31.538" status="PASS" endtime="20190515 08:32:31.538"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.539">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.539" status="PASS" endtime="20190515 08:32:31.539"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.539" status="PASS" endtime="20190515 08:32:31.540"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:31.540">${re} = PASS</msg>
<status starttime="20190515 08:32:31.536" status="PASS" endtime="20190515 08:32:31.540"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:31.541" status="PASS" endtime="20190515 08:32:31.541"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:31.542" status="PASS" endtime="20190515 08:32:31.544"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:31.544" status="PASS" endtime="20190515 08:32:31.545"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:31.545">${js} = PASS</msg>
<status starttime="20190515 08:32:31.540" status="PASS" endtime="20190515 08:32:31.545"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:31.546" status="PASS" endtime="20190515 08:32:31.546"></status>
</kw>
<status starttime="20190515 08:32:31.545" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.532" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.498" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.497" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.497" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.497" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<status starttime="20190515 08:32:31.495" status="PASS" endtime="20190515 08:32:31.547"></status>
</kw>
<doc>接口名:修改个人密码

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.491" status="PASS" endtime="20190515 08:32:31.547"></status>
</test>
<test id="s1-s1-s1-t16" name="put users password by username Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>old_password=${username}</arg>
<arg>new_password=${username}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.550">${essential_params} = {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'}</msg>
<status starttime="20190515 08:32:31.549" status="PASS" endtime="20190515 08:32:31.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.551">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:31.550" status="PASS" endtime="20190515 08:32:31.551"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users password by username fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.552">@{results} = [ {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'} ]</msg>
<status starttime="20190515 08:32:31.552" status="PASS" endtime="20190515 08:32:31.552"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users password by username Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Password By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.579">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:31.554" status="PASS" endtime="20190515 08:32:31.579"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.580">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.580" status="PASS" endtime="20190515 08:32:31.580"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.581">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.581" status="PASS" endtime="20190515 08:32:31.581"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.582">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.581" status="PASS" endtime="20190515 08:32:31.582"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.582">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.582" status="PASS" endtime="20190515 08:32:31.582"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.584">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /users/[12345678987654321]/password&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/users/%5B12345678987654321%5D/password&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;users/[12345678987654321]/password&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:31.583" status="PASS" endtime="20190515 08:32:31.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.584">https://camera-monitor-deployment-server-d.parkone.cn/users/[12345678987654321]/password</msg>
<status starttime="20190515 08:32:31.584" status="PASS" endtime="20190515 08:32:31.584"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.585">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.585" status="PASS" endtime="20190515 08:32:31.585"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.585" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.582" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.579" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.553" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.553" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.553" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.553" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<status starttime="20190515 08:32:31.551" status="PASS" endtime="20190515 08:32:31.586"></status>
</kw>
<doc>接口名:修改个人密码

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.548" status="PASS" endtime="20190515 08:32:31.586"></status>
</test>
<test id="s1-s1-s1-t17" name="delete users by username Success">
<kw name="Post Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>username=waitfordel</arg>
<arg>password=waitfordel</arg>
<arg>realname=waitfordel</arg>
<arg>gender=1</arg>
<arg>mobile=15566015171</arg>
<arg>email=15566015171@163.com</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.702">${res} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:31.588" status="PASS" endtime="20190515 08:32:31.702"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${res.json()['username']}</arg>
</arguments>
<assign>
<var>${username}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.704">${username} = waitfordel</msg>
<status starttime="20190515 08:32:31.703" status="PASS" endtime="20190515 08:32:31.704"></status>
</kw>
<kw name="delete users by username Success 204">
<arguments>
<arg>username=${username}</arg>
</arguments>
<kw name="Delete Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.892">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:31.706" status="PASS" endtime="20190515 08:32:31.892"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.895">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.894" status="PASS" endtime="20190515 08:32:31.896"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.897">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.896" status="PASS" endtime="20190515 08:32:31.897"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.899">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.898" status="PASS" endtime="20190515 08:32:31.899"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.900">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.899" status="PASS" endtime="20190515 08:32:31.900"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.903"></msg>
<status starttime="20190515 08:32:31.902" status="PASS" endtime="20190515 08:32:31.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.904">https://camera-monitor-deployment-server-d.parkone.cn/users/waitfordel</msg>
<status starttime="20190515 08:32:31.903" status="PASS" endtime="20190515 08:32:31.904"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.906">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.905" status="PASS" endtime="20190515 08:32:31.906"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.907" status="PASS" endtime="20190515 08:32:31.908"></status>
</kw>
<status starttime="20190515 08:32:31.901" status="PASS" endtime="20190515 08:32:31.908"></status>
</kw>
<status starttime="20190515 08:32:31.893" status="PASS" endtime="20190515 08:32:31.908"></status>
</kw>
<status starttime="20190515 08:32:31.704" status="PASS" endtime="20190515 08:32:31.909"></status>
</kw>
<doc>接口名:删除用户

请求方式:Delete

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.587" status="PASS" endtime="20190515 08:32:31.909"></status>
</test>
<test id="s1-s1-s1-t18" name="delete users by username Fail With Wrong Url">
<kw name="delete users by username Fail 404">
<arguments>
<arg>username=${wrong_url_id}</arg>
</arguments>
<kw name="Delete Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.944">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:31.914" status="PASS" endtime="20190515 08:32:31.944"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.946">${bug_level} = None</msg>
<status starttime="20190515 08:32:31.946" status="PASS" endtime="20190515 08:32:31.946"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.947">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.947" status="PASS" endtime="20190515 08:32:31.948"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.949">${status_tag} = None</msg>
<status starttime="20190515 08:32:31.948" status="PASS" endtime="20190515 08:32:31.949"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.950">Set tag 'None'.</msg>
<status starttime="20190515 08:32:31.949" status="PASS" endtime="20190515 08:32:31.950"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.951">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /users/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;DELETE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/users/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;users/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:31.951" status="PASS" endtime="20190515 08:32:31.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.952">https://camera-monitor-deployment-server-d.parkone.cn/users/[12345678987654321]</msg>
<status starttime="20190515 08:32:31.952" status="PASS" endtime="20190515 08:32:31.952"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:31.953">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:31.953" status="PASS" endtime="20190515 08:32:31.953"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:31.954" status="PASS" endtime="20190515 08:32:31.954"></status>
</kw>
<status starttime="20190515 08:32:31.950" status="PASS" endtime="20190515 08:32:31.954"></status>
</kw>
<status starttime="20190515 08:32:31.945" status="PASS" endtime="20190515 08:32:31.954"></status>
</kw>
<status starttime="20190515 08:32:31.913" status="PASS" endtime="20190515 08:32:31.955"></status>
</kw>
<doc>接口名:删除用户

请求方式:Delete

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.910" status="PASS" endtime="20190515 08:32:31.955"></status>
</test>
<test id="s1-s1-s1-t19" name="put users password by username Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>old_password=${username}</arg>
<arg>new_password=123${username}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.957">${essential_params} = {'old_password': 'robot17851187092', 'new_password': '123robot17851187092'}</msg>
<status starttime="20190515 08:32:31.957" status="PASS" endtime="20190515 08:32:31.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.958">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:31.958" status="PASS" endtime="20190515 08:32:31.958"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users password by username success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:31.959">@{results} = [ {'old_password': 'robot17851187092', 'new_password': '123robot17851187092'} ]</msg>
<status starttime="20190515 08:32:31.959" status="PASS" endtime="20190515 08:32:31.959"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'old_password': 'robot17851187092', 'new_password': '123robot17851187092'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users password by username Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Password By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.170">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:31.961" status="PASS" endtime="20190515 08:32:32.170"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.173">${bug_level} = None</msg>
<status starttime="20190515 08:32:32.172" status="PASS" endtime="20190515 08:32:32.173"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:32.175">Set tag 'None'.</msg>
<status starttime="20190515 08:32:32.174" status="PASS" endtime="20190515 08:32:32.175"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.177">${status_tag} = None</msg>
<status starttime="20190515 08:32:32.175" status="PASS" endtime="20190515 08:32:32.177"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:32.179">Set tag 'None'.</msg>
<status starttime="20190515 08:32:32.178" status="PASS" endtime="20190515 08:32:32.179"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:32.182"></msg>
<status starttime="20190515 08:32:32.181" status="PASS" endtime="20190515 08:32:32.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:32.183">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/password</msg>
<status starttime="20190515 08:32:32.182" status="PASS" endtime="20190515 08:32:32.183"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:32.185">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:32.184" status="PASS" endtime="20190515 08:32:32.185"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:32.185" status="PASS" endtime="20190515 08:32:32.187"></status>
</kw>
<status starttime="20190515 08:32:32.179" status="PASS" endtime="20190515 08:32:32.187"></status>
</kw>
<status starttime="20190515 08:32:32.171" status="PASS" endtime="20190515 08:32:32.187"></status>
</kw>
<status starttime="20190515 08:32:31.960" status="PASS" endtime="20190515 08:32:32.188"></status>
</kw>
<status starttime="20190515 08:32:31.960" status="PASS" endtime="20190515 08:32:32.188"></status>
</kw>
<status starttime="20190515 08:32:31.960" status="PASS" endtime="20190515 08:32:32.188"></status>
</kw>
<status starttime="20190515 08:32:31.960" status="PASS" endtime="20190515 08:32:32.188"></status>
</kw>
<status starttime="20190515 08:32:31.958" status="PASS" endtime="20190515 08:32:32.188"></status>
</kw>
<doc>接口名:修改个人密码

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:31.955" status="PASS" endtime="20190515 08:32:32.189"></status>
</test>
<kw name="Logout" type="teardown" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<status starttime="20190515 08:32:32.193" status="PASS" endtime="20190515 08:32:32.226"></status>
</kw>
<doc>server_account</doc>
<status starttime="20190515 08:32:25.520" status="PASS" endtime="20190515 08:32:32.226"></status>
</suite>
<suite id="s1-s1-s2" name="Accounts.Unauthorized" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_account/accounts.unauthorized.robot">
<test id="s1-s1-s2-t1" name="post users Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username}</arg>
<arg>password=${username}</arg>
<arg>realname=${realname}</arg>
<arg>gender=${gender}</arg>
<arg>mobile=${mobile}</arg>
<arg>email=${email}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.259">${essential_params} = {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'}</msg>
<status starttime="20190515 08:32:32.258" status="PASS" endtime="20190515 08:32:32.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.260">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:32.260" status="PASS" endtime="20190515 08:32:32.260"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post users fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:32.262">@{results} = [ {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'} ]</msg>
<status starttime="20190515 08:32:32.261" status="PASS" endtime="20190515 08:32:32.262"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'username': 'robot17851187092', 'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post users Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.380">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:32.263" status="PASS" endtime="20190515 08:32:34.380"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.383">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.382" status="PASS" endtime="20190515 08:32:34.383"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.385">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.384" status="PASS" endtime="20190515 08:32:34.385"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.386">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.385" status="PASS" endtime="20190515 08:32:34.387"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.388">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.387" status="PASS" endtime="20190515 08:32:34.388"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.391">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.390" status="PASS" endtime="20190515 08:32:34.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.393">https://camera-monitor-deployment-server-d.parkone.cn/users</msg>
<status starttime="20190515 08:32:34.392" status="PASS" endtime="20190515 08:32:34.393"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.395">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.394" status="PASS" endtime="20190515 08:32:34.395"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.396" status="PASS" endtime="20190515 08:32:34.397"></status>
</kw>
<status starttime="20190515 08:32:34.389" status="PASS" endtime="20190515 08:32:34.397"></status>
</kw>
<status starttime="20190515 08:32:34.381" status="PASS" endtime="20190515 08:32:34.398"></status>
</kw>
<status starttime="20190515 08:32:32.262" status="PASS" endtime="20190515 08:32:34.398"></status>
</kw>
<status starttime="20190515 08:32:32.262" status="PASS" endtime="20190515 08:32:34.398"></status>
</kw>
<status starttime="20190515 08:32:32.262" status="PASS" endtime="20190515 08:32:34.398"></status>
</kw>
<status starttime="20190515 08:32:32.262" status="PASS" endtime="20190515 08:32:34.398"></status>
</kw>
<status starttime="20190515 08:32:32.260" status="PASS" endtime="20190515 08:32:34.399"></status>
</kw>
<doc>接口名:添加用户

请求方式:Post

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:32.257" status="PASS" endtime="20190515 08:32:34.399"></status>
</test>
<test id="s1-s1-s2-t2" name="get user Fail Without Login">
<kw name="get user Fail 403">
<kw name="Get User" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.417">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.404" status="PASS" endtime="20190515 08:32:34.417"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.418">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.417" status="PASS" endtime="20190515 08:32:34.418"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.418">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.418" status="PASS" endtime="20190515 08:32:34.418"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.418">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.418" status="PASS" endtime="20190515 08:32:34.418"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.419">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.418" status="PASS" endtime="20190515 08:32:34.419"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.419">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.419" status="PASS" endtime="20190515 08:32:34.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.420">https://camera-monitor-deployment-server-d.parkone.cn/user</msg>
<status starttime="20190515 08:32:34.419" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.420">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.420" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.420" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<status starttime="20190515 08:32:34.419" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<status starttime="20190515 08:32:34.417" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<status starttime="20190515 08:32:34.403" status="PASS" endtime="20190515 08:32:34.420"></status>
</kw>
<doc>接口名:获取用户信息

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.400" status="PASS" endtime="20190515 08:32:34.421"></status>
</test>
<test id="s1-s1-s2-t3" name="get users Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.422">${essential_params} = {}</msg>
<status starttime="20190515 08:32:34.422" status="PASS" endtime="20190515 08:32:34.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username}</arg>
<arg>page_size=${page_size}</arg>
<arg>page_num=${page_num}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.422">${unessential_params} = {'username': 'robot17851187092', 'page_size': '20', 'page_num': '1'}</msg>
<status starttime="20190515 08:32:34.422" status="PASS" endtime="20190515 08:32:34.422"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get users fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.423">params:{'username': 'robot17851187092'}
params:{'page_size': '20', 'username': 'robot17851187092'}
params:{'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:34.423">@{results} = [ {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'} | {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'} | {'page_size': '20', 'username': 'robot17851187092', 'pag...</msg>
<status starttime="20190515 08:32:34.423" status="PASS" endtime="20190515 08:32:34.423"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.436">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.424" status="PASS" endtime="20190515 08:32:34.436"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.437">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.437" status="PASS" endtime="20190515 08:32:34.437"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.437">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.437" status="PASS" endtime="20190515 08:32:34.437"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.437">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.437" status="PASS" endtime="20190515 08:32:34.437"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.438">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.438" status="PASS" endtime="20190515 08:32:34.438"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.438">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.438" status="PASS" endtime="20190515 08:32:34.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.439">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:34.438" status="PASS" endtime="20190515 08:32:34.439"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.439">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.439" status="PASS" endtime="20190515 08:32:34.439"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.439" status="PASS" endtime="20190515 08:32:34.439"></status>
</kw>
<status starttime="20190515 08:32:34.438" status="PASS" endtime="20190515 08:32:34.439"></status>
</kw>
<status starttime="20190515 08:32:34.436" status="PASS" endtime="20190515 08:32:34.440"></status>
</kw>
<status starttime="20190515 08:32:34.424" status="PASS" endtime="20190515 08:32:34.440"></status>
</kw>
<status starttime="20190515 08:32:34.424" status="PASS" endtime="20190515 08:32:34.440"></status>
</kw>
<status starttime="20190515 08:32:34.424" status="PASS" endtime="20190515 08:32:34.440"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.452">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.440" status="PASS" endtime="20190515 08:32:34.452"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.453">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.453" status="PASS" endtime="20190515 08:32:34.453"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.454">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.453" status="PASS" endtime="20190515 08:32:34.454"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.454">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.454" status="PASS" endtime="20190515 08:32:34.454"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.454">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.454" status="PASS" endtime="20190515 08:32:34.454"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.455">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.455" status="PASS" endtime="20190515 08:32:34.455"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.455">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:34.455" status="PASS" endtime="20190515 08:32:34.455"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.456">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.455" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.456" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<status starttime="20190515 08:32:34.454" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<status starttime="20190515 08:32:34.453" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<status starttime="20190515 08:32:34.440" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<status starttime="20190515 08:32:34.440" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<status starttime="20190515 08:32:34.440" status="PASS" endtime="20190515 08:32:34.456"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'username': 'robot17851187092', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get users Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Users" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.465">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.457" status="PASS" endtime="20190515 08:32:34.465"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.466">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.466" status="PASS" endtime="20190515 08:32:34.466"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.466">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.466" status="PASS" endtime="20190515 08:32:34.466"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.466">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.466" status="PASS" endtime="20190515 08:32:34.466"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.467">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.467" status="PASS" endtime="20190515 08:32:34.467"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.467">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.467" status="PASS" endtime="20190515 08:32:34.467"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.468">https://camera-monitor-deployment-server-d.parkone.cn/users?page_size=20&amp;username=robot17851187092&amp;page_num=1</msg>
<status starttime="20190515 08:32:34.467" status="PASS" endtime="20190515 08:32:34.468"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.468">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.468" status="PASS" endtime="20190515 08:32:34.468"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.468" status="PASS" endtime="20190515 08:32:34.468"></status>
</kw>
<status starttime="20190515 08:32:34.467" status="PASS" endtime="20190515 08:32:34.468"></status>
</kw>
<status starttime="20190515 08:32:34.465" status="PASS" endtime="20190515 08:32:34.468"></status>
</kw>
<status starttime="20190515 08:32:34.457" status="PASS" endtime="20190515 08:32:34.469"></status>
</kw>
<status starttime="20190515 08:32:34.456" status="PASS" endtime="20190515 08:32:34.469"></status>
</kw>
<status starttime="20190515 08:32:34.456" status="PASS" endtime="20190515 08:32:34.469"></status>
</kw>
<status starttime="20190515 08:32:34.423" status="PASS" endtime="20190515 08:32:34.469"></status>
</kw>
<status starttime="20190515 08:32:34.423" status="PASS" endtime="20190515 08:32:34.469"></status>
</kw>
<doc>接口名:获取用户列表信息

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.421" status="PASS" endtime="20190515 08:32:34.469"></status>
</test>
<test id="s1-s1-s2-t4" name="get roles Fail Without Login">
<kw name="get roles Fail 403">
<kw name="Get Roles" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.485">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.470" status="PASS" endtime="20190515 08:32:34.486"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.486">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.486" status="PASS" endtime="20190515 08:32:34.486"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.487">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.487" status="PASS" endtime="20190515 08:32:34.487"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.487">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.487" status="PASS" endtime="20190515 08:32:34.487"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.487">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.487" status="PASS" endtime="20190515 08:32:34.488"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.488">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.488" status="PASS" endtime="20190515 08:32:34.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.489">https://camera-monitor-deployment-server-d.parkone.cn/roles</msg>
<status starttime="20190515 08:32:34.488" status="PASS" endtime="20190515 08:32:34.489"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.489">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.489" status="PASS" endtime="20190515 08:32:34.489"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.489" status="PASS" endtime="20190515 08:32:34.489"></status>
</kw>
<status starttime="20190515 08:32:34.488" status="PASS" endtime="20190515 08:32:34.489"></status>
</kw>
<status starttime="20190515 08:32:34.486" status="PASS" endtime="20190515 08:32:34.489"></status>
</kw>
<status starttime="20190515 08:32:34.470" status="PASS" endtime="20190515 08:32:34.490"></status>
</kw>
<doc>接口名:获取角色列表

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.469" status="PASS" endtime="20190515 08:32:34.490"></status>
</test>
<test id="s1-s1-s2-t5" name="get users by username Fail Without Login">
<kw name="get users by username Fail 403">
<arguments>
<arg>username=${username}</arg>
</arguments>
<kw name="Get Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.500">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.491" status="PASS" endtime="20190515 08:32:34.500"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.501">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.500" status="PASS" endtime="20190515 08:32:34.501"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.501">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.501" status="PASS" endtime="20190515 08:32:34.501"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.501">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.501" status="PASS" endtime="20190515 08:32:34.501"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.502">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.502" status="PASS" endtime="20190515 08:32:34.502"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.502">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.502" status="PASS" endtime="20190515 08:32:34.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.503">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:34.502" status="PASS" endtime="20190515 08:32:34.503"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.503">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.503" status="PASS" endtime="20190515 08:32:34.503"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.503" status="PASS" endtime="20190515 08:32:34.503"></status>
</kw>
<status starttime="20190515 08:32:34.502" status="PASS" endtime="20190515 08:32:34.503"></status>
</kw>
<status starttime="20190515 08:32:34.500" status="PASS" endtime="20190515 08:32:34.504"></status>
</kw>
<status starttime="20190515 08:32:34.491" status="PASS" endtime="20190515 08:32:34.504"></status>
</kw>
<doc>接口名:获取指定用户信息

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.490" status="PASS" endtime="20190515 08:32:34.504"></status>
</test>
<test id="s1-s1-s2-t6" name="put users password by username Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>old_password=${username}</arg>
<arg>new_password=${username}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.505">${essential_params} = {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'}</msg>
<status starttime="20190515 08:32:34.505" status="PASS" endtime="20190515 08:32:34.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.505">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:34.505" status="PASS" endtime="20190515 08:32:34.505"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users password by username fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.506">@{results} = [ {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'} ]</msg>
<status starttime="20190515 08:32:34.506" status="PASS" endtime="20190515 08:32:34.506"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'old_password': 'robot17851187092', 'new_password': 'robot17851187092'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users password by username Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Password By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.517">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.507" status="PASS" endtime="20190515 08:32:34.517"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.517">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.517" status="PASS" endtime="20190515 08:32:34.517"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.517">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.517" status="PASS" endtime="20190515 08:32:34.518"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.518">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.518" status="PASS" endtime="20190515 08:32:34.518"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.518">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.518" status="PASS" endtime="20190515 08:32:34.518"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.519">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.519" status="PASS" endtime="20190515 08:32:34.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.519">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/password</msg>
<status starttime="20190515 08:32:34.519" status="PASS" endtime="20190515 08:32:34.519"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.519">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.519" status="PASS" endtime="20190515 08:32:34.519"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.520" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.518" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.517" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.507" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.507" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.506" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.506" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<status starttime="20190515 08:32:34.506" status="PASS" endtime="20190515 08:32:34.520"></status>
</kw>
<doc>接口名:修改个人密码

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.504" status="PASS" endtime="20190515 08:32:34.520"></status>
</test>
<test id="s1-s1-s2-t7" name="put users by username Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>password=${username}</arg>
<arg>realname=${realname}</arg>
<arg>gender=${gender}</arg>
<arg>mobile=${mobile}</arg>
<arg>email=${email}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.521">${essential_params} = {'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'}</msg>
<status starttime="20190515 08:32:34.521" status="PASS" endtime="20190515 08:32:34.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.522">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:34.522" status="PASS" endtime="20190515 08:32:34.522"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users by username fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.523">@{results} = [ {'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'} ]</msg>
<status starttime="20190515 08:32:34.522" status="PASS" endtime="20190515 08:32:34.523"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'password': 'robot17851187092', 'realname': 'robot123', 'gender': '1', 'mobile': '17851187092', 'email': '13712341234@163.com'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users by username Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.533">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.523" status="PASS" endtime="20190515 08:32:34.533"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.534">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.534" status="PASS" endtime="20190515 08:32:34.534"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.535">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.534" status="PASS" endtime="20190515 08:32:34.535"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.535">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.535" status="PASS" endtime="20190515 08:32:34.535"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.535">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.535" status="PASS" endtime="20190515 08:32:34.535"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.536">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.536" status="PASS" endtime="20190515 08:32:34.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.536">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:34.536" status="PASS" endtime="20190515 08:32:34.536"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.536">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.536" status="PASS" endtime="20190515 08:32:34.536"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.537" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.535" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.533" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.523" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.523" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.523" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.523" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<status starttime="20190515 08:32:34.522" status="PASS" endtime="20190515 08:32:34.537"></status>
</kw>
<doc>接口名:修改用户

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.520" status="PASS" endtime="20190515 08:32:34.537"></status>
</test>
<test id="s1-s1-s2-t8" name="put users roles by username Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>role_ids=${role_ids}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.538">${essential_params} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}</msg>
<status starttime="20190515 08:32:34.538" status="PASS" endtime="20190515 08:32:34.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.539">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:34.538" status="PASS" endtime="20190515 08:32:34.539"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put users roles by username fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>username=${username}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.539">@{results} = [ {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'} ]</msg>
<status starttime="20190515 08:32:34.539" status="PASS" endtime="20190515 08:32:34.539"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'role_ids': '608ebe2471f911e9a87e0242c0a8b002,608fc0ee71f911e9a87e0242c0a8b002,608ff8d471f911e9a87e0242c0a8b002,609025a271f911e9a87e0242c0a8b002'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put users roles by username Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Users Roles By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.554">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.540" status="PASS" endtime="20190515 08:32:34.554"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.555">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.555" status="PASS" endtime="20190515 08:32:34.555"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.555">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.555" status="PASS" endtime="20190515 08:32:34.556"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.556">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.556" status="PASS" endtime="20190515 08:32:34.556"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.556">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.556" status="PASS" endtime="20190515 08:32:34.556"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.557">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.557" status="PASS" endtime="20190515 08:32:34.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.557">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092/roles</msg>
<status starttime="20190515 08:32:34.557" status="PASS" endtime="20190515 08:32:34.557"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.557">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.557" status="PASS" endtime="20190515 08:32:34.557"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.558" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.556" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.555" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.540" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.540" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.540" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.540" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<status starttime="20190515 08:32:34.539" status="PASS" endtime="20190515 08:32:34.559"></status>
</kw>
<doc>接口名:分配角色

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.538" status="PASS" endtime="20190515 08:32:34.559"></status>
</test>
<test id="s1-s1-s2-t9" name="delete users by username Fail Without Login">
<kw name="delete users by username Fail 403">
<arguments>
<arg>username=${username}</arg>
</arguments>
<kw name="Delete Users By Username" library="robot_camera_monitor_deployment_server.account.AccountLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.576">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:34.560" status="PASS" endtime="20190515 08:32:34.576"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.577">${bug_level} = None</msg>
<status starttime="20190515 08:32:34.577" status="PASS" endtime="20190515 08:32:34.577"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.577">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.577" status="PASS" endtime="20190515 08:32:34.577"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:34.578">${status_tag} = None</msg>
<status starttime="20190515 08:32:34.577" status="PASS" endtime="20190515 08:32:34.578"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.578">Set tag 'None'.</msg>
<status starttime="20190515 08:32:34.578" status="PASS" endtime="20190515 08:32:34.578"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.579">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:34.578" status="PASS" endtime="20190515 08:32:34.579"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.579">https://camera-monitor-deployment-server-d.parkone.cn/users/robot17851187092</msg>
<status starttime="20190515 08:32:34.579" status="PASS" endtime="20190515 08:32:34.579"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:34.579">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:34.579" status="PASS" endtime="20190515 08:32:34.579"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:34.579" status="PASS" endtime="20190515 08:32:34.580"></status>
</kw>
<status starttime="20190515 08:32:34.578" status="PASS" endtime="20190515 08:32:34.580"></status>
</kw>
<status starttime="20190515 08:32:34.576" status="PASS" endtime="20190515 08:32:34.580"></status>
</kw>
<status starttime="20190515 08:32:34.560" status="PASS" endtime="20190515 08:32:34.580"></status>
</kw>
<doc>接口名:删除用户

请求方式:Delete

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_account</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:34.559" status="PASS" endtime="20190515 08:32:34.580"></status>
</test>
<doc>server_account</doc>
<status starttime="20190515 08:32:32.235" status="PASS" endtime="20190515 08:32:34.580"></status>
</suite>
<status starttime="20190515 08:32:25.519" status="PASS" endtime="20190515 08:32:34.582"></status>
</suite>
<suite id="s1-s2" name="Server Dot" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_dot">
<suite id="s1-s2-s1" name="Dots" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_dot/dots.robot">
<kw name="Login" type="setup" library="dot">
<arguments>
<arg>${admin_username}</arg>
<arg>${admin_password}</arg>
</arguments>
<status starttime="20190515 08:32:34.595" status="PASS" endtime="20190515 08:32:36.423"></status>
</kw>
<test id="s1-s2-s1-t1" name="post projects dot datas by project id Success">
<kw name="make camera infos">
<assign>
<var>@{camera_infos}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${camera_num}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.429">${camera_num} = 1</msg>
<status starttime="20190515 08:32:36.428" status="PASS" endtime="20190515 08:32:36.429"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${power_type}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.430">${power_type} = 1</msg>
<status starttime="20190515 08:32:36.429" status="PASS" endtime="20190515 08:32:36.430"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>start=0</arg>
<arg>end=3</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.431">${i} = 040</msg>
<status starttime="20190515 08:32:36.431" status="PASS" endtime="20190515 08:32:36.432"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>end=3</arg>
</arguments>
<assign>
<var>${j}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.433">${j} = 298</msg>
<status starttime="20190515 08:32:36.432" status="PASS" endtime="20190515 08:32:36.433"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${i}-${j}</arg>
</arguments>
<assign>
<var>${spot_nums}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.434">${spot_nums} = 040-298</msg>
<status starttime="20190515 08:32:36.433" status="PASS" endtime="20190515 08:32:36.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>brand_name=1</arg>
<arg>camera_num=${camera_num}</arg>
<arg>brand_model=康佳ATP-13</arg>
<arg>power_type=${power_type}</arg>
<arg>spot_nums=${spot_nums}</arg>
<arg>brand_short=kj</arg>
</arguments>
<assign>
<var>${camera_info}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.437">${camera_info} = {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '040-298', 'brand_short': 'kj'}</msg>
<status starttime="20190515 08:32:36.435" status="PASS" endtime="20190515 08:32:36.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${camera_info}</arg>
</arguments>
<assign>
<var>@{camera_infos}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.438">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '040-298', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:36.437" status="PASS" endtime="20190515 08:32:36.438"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:36.439">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '040-298', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:36.427" status="PASS" endtime="20190515 08:32:36.439"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.440">${project_name} = 13874192798</msg>
<status starttime="20190515 08:32:36.440" status="PASS" endtime="20190515 08:32:36.440"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>robot${project_name}</arg>
</arguments>
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.442">${project_name} = robot13874192798</msg>
<status starttime="20190515 08:32:36.441" status="PASS" endtime="20190515 08:32:36.442"></status>
</kw>
<kw name="Post Projects" library="project">
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.713">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:36.442" status="PASS" endtime="20190515 08:32:36.713"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['project_id']}</arg>
</arguments>
<assign>
<var>${project_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:36.716">${project_id} = f015637876a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:36.714" status="PASS" endtime="20190515 08:32:36.716"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${project_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:36.718">${project_id} = f015637876a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:36.717" status="PASS" endtime="20190515 08:32:36.718"></status>
</kw>
<kw name="post projects dot datas by project id Success 201">
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=@{camera_infos}</arg>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.479">{'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_short': 'kj', 'spot_nums': '040-298', 'brand_name': '1'}], 'address': '昂利软件园', 'cross_arm_num': '2', 'lon': '123.45', 'lat': '45.123', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:37.479">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:36.721" status="PASS" endtime="20190515 08:32:37.479"></status>
</kw>
<kw name="Expect Status is 201" library="resources">
<doc>检测响应状态是否为201 Created，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/post_projects_dot_datas_by_project_id_201.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.482">${bug_level} = None</msg>
<status starttime="20190515 08:32:37.481" status="PASS" endtime="20190515 08:32:37.482"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.482">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.482" status="PASS" endtime="20190515 08:32:37.482"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.483">${status_tag} = None</msg>
<status starttime="20190515 08:32:37.482" status="PASS" endtime="20190515 08:32:37.483"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.483">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.483" status="PASS" endtime="20190515 08:32:37.483"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.483">${re} = FAIL</msg>
<status starttime="20190515 08:32:37.483" status="PASS" endtime="20190515 08:32:37.483"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.483">${js} = FAIL</msg>
<status starttime="20190515 08:32:37.483" status="PASS" endtime="20190515 08:32:37.483"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.484">{"dot_data_id": "20190515003237186", "created_time": 1557880357.294276}</msg>
<status starttime="20190515 08:32:37.484" status="PASS" endtime="20190515 08:32:37.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.484">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:37.484" status="PASS" endtime="20190515 08:32:37.484"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.485">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:37.484" status="PASS" endtime="20190515 08:32:37.485"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:37.485" status="PASS" endtime="20190515 08:32:37.485"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:37.485">${re} = PASS</msg>
<status starttime="20190515 08:32:37.484" status="PASS" endtime="20190515 08:32:37.485"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:37.486" status="PASS" endtime="20190515 08:32:37.486"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:37.486" status="PASS" endtime="20190515 08:32:37.487"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:37.487" status="PASS" endtime="20190515 08:32:37.487"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:37.487">${js} = PASS</msg>
<status starttime="20190515 08:32:37.485" status="PASS" endtime="20190515 08:32:37.487"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:37.488" status="PASS" endtime="20190515 08:32:37.488"></status>
</kw>
<status starttime="20190515 08:32:37.487" status="PASS" endtime="20190515 08:32:37.488"></status>
</kw>
<status starttime="20190515 08:32:37.480" status="PASS" endtime="20190515 08:32:37.488"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['dot_data_id']}</arg>
</arguments>
<assign>
<var>${dot_data_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.488">${dot_data_id} = 20190515003237186</msg>
<status starttime="20190515 08:32:37.488" status="PASS" endtime="20190515 08:32:37.488"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${dot_data_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.489">${dot_data_id} = 20190515003237186</msg>
<status starttime="20190515 08:32:37.488" status="PASS" endtime="20190515 08:32:37.489"></status>
</kw>
<status starttime="20190515 08:32:36.718" status="PASS" endtime="20190515 08:32:37.489"></status>
</kw>
<kw name="make camera infos">
<assign>
<var>@{camera_infos}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${camera_num}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.489">${camera_num} = 1</msg>
<status starttime="20190515 08:32:37.489" status="PASS" endtime="20190515 08:32:37.489"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${power_type}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.489">${power_type} = 1</msg>
<status starttime="20190515 08:32:37.489" status="PASS" endtime="20190515 08:32:37.490"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>start=0</arg>
<arg>end=3</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.490">${i} = 054</msg>
<status starttime="20190515 08:32:37.490" status="PASS" endtime="20190515 08:32:37.490"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>end=3</arg>
</arguments>
<assign>
<var>${j}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.490">${j} = 712</msg>
<status starttime="20190515 08:32:37.490" status="PASS" endtime="20190515 08:32:37.490"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${i}-${j}</arg>
</arguments>
<assign>
<var>${spot_nums}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.490">${spot_nums} = 054-712</msg>
<status starttime="20190515 08:32:37.490" status="PASS" endtime="20190515 08:32:37.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>brand_name=1</arg>
<arg>camera_num=${camera_num}</arg>
<arg>brand_model=康佳ATP-13</arg>
<arg>power_type=${power_type}</arg>
<arg>spot_nums=${spot_nums}</arg>
<arg>brand_short=kj</arg>
</arguments>
<assign>
<var>${camera_info}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.491">${camera_info} = {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '054-712', 'brand_short': 'kj'}</msg>
<status starttime="20190515 08:32:37.491" status="PASS" endtime="20190515 08:32:37.491"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${camera_info}</arg>
</arguments>
<assign>
<var>@{camera_infos}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.491">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '054-712', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:37.491" status="PASS" endtime="20190515 08:32:37.491"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:37.491">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '054-712', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:37.489" status="PASS" endtime="20190515 08:32:37.491"></status>
</kw>
<kw name="post projects dot datas by project id Success 201">
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=@{camera_infos}</arg>
<arg>remark=${remark}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.921">{'remark': 'ThisIsRobot', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_short': 'kj', 'spot_nums': '054-712', 'brand_name': '1'}], 'address': '昂利软件园', 'cross_arm_num': '2', 'lon': '123.45', 'lat': '45.123', 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:37.921">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:37.492" status="PASS" endtime="20190515 08:32:37.921"></status>
</kw>
<kw name="Expect Status is 201" library="resources">
<doc>检测响应状态是否为201 Created，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/post_projects_dot_datas_by_project_id_201.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.924">${bug_level} = None</msg>
<status starttime="20190515 08:32:37.923" status="PASS" endtime="20190515 08:32:37.924"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.924">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.924" status="PASS" endtime="20190515 08:32:37.924"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.925">${status_tag} = None</msg>
<status starttime="20190515 08:32:37.924" status="PASS" endtime="20190515 08:32:37.925"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.925">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.925" status="PASS" endtime="20190515 08:32:37.925"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.925">${re} = FAIL</msg>
<status starttime="20190515 08:32:37.925" status="PASS" endtime="20190515 08:32:37.925"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.926">${js} = FAIL</msg>
<status starttime="20190515 08:32:37.925" status="PASS" endtime="20190515 08:32:37.926"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.926">{"dot_data_id": "20190515003237538", "created_time": 1557880357.83334}</msg>
<status starttime="20190515 08:32:37.926" status="PASS" endtime="20190515 08:32:37.926"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.926">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:37.926" status="PASS" endtime="20190515 08:32:37.926"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.927">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:37.927" status="PASS" endtime="20190515 08:32:37.927"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:37.927" status="PASS" endtime="20190515 08:32:37.927"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:37.927">${re} = PASS</msg>
<status starttime="20190515 08:32:37.926" status="PASS" endtime="20190515 08:32:37.927"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:37.928" status="PASS" endtime="20190515 08:32:37.928"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:37.928" status="PASS" endtime="20190515 08:32:37.929"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:37.929" status="PASS" endtime="20190515 08:32:37.929"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:37.929">${js} = PASS</msg>
<status starttime="20190515 08:32:37.927" status="PASS" endtime="20190515 08:32:37.929"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:37.929" status="PASS" endtime="20190515 08:32:37.930"></status>
</kw>
<status starttime="20190515 08:32:37.929" status="PASS" endtime="20190515 08:32:37.930"></status>
</kw>
<status starttime="20190515 08:32:37.922" status="PASS" endtime="20190515 08:32:37.930"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['dot_data_id']}</arg>
</arguments>
<assign>
<var>${dot_data_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.930">${dot_data_id} = 20190515003237538</msg>
<status starttime="20190515 08:32:37.930" status="PASS" endtime="20190515 08:32:37.930"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${dot_data_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.931">${dot_data_id} = 20190515003237538</msg>
<status starttime="20190515 08:32:37.930" status="PASS" endtime="20190515 08:32:37.931"></status>
</kw>
<status starttime="20190515 08:32:37.492" status="PASS" endtime="20190515 08:32:37.931"></status>
</kw>
<doc>接口名:添加勘探记录

请求方式:Post

预期结果:输入正确参数,http响应码返回 201,返回的Json数据符合验证。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:201</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:36.424" status="PASS" endtime="20190515 08:32:37.931"></status>
</test>
<test id="s1-s2-s1-t2" name="post projects dot datas by project id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=@{camera_infos}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.933">${essential_params} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': []}</msg>
<status starttime="20190515 08:32:37.932" status="PASS" endtime="20190515 08:32:37.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>remark=${remark}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.933">${unessential_params} = {'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:37.933" status="PASS" endtime="20190515 08:32:37.933"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post projects dot datas by project id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.934">params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']}
params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:37.934">@{results} = [ {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140d...</msg>
<status starttime="20190515 08:32:37.934" status="PASS" endtime="20190515 08:32:37.934"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.960">{'remark': 'ThisIsRobot', 'camera_infos': [], 'address': '昂利软件园', 'cross_arm_num': '2', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'lat': '45.123', 'lon': '123.45', 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:37.960">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:37.935" status="PASS" endtime="20190515 08:32:37.960"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.961">${bug_level} = None</msg>
<status starttime="20190515 08:32:37.961" status="PASS" endtime="20190515 08:32:37.961"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.962">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.961" status="PASS" endtime="20190515 08:32:37.962"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.962">${status_tag} = None</msg>
<status starttime="20190515 08:32:37.962" status="PASS" endtime="20190515 08:32:37.962"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.962">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.962" status="PASS" endtime="20190515 08:32:37.962"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.963">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;POST&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:37.963" status="PASS" endtime="20190515 08:32:37.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.964">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas</msg>
<status starttime="20190515 08:32:37.963" status="PASS" endtime="20190515 08:32:37.964"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.964">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:37.964" status="PASS" endtime="20190515 08:32:37.964"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:37.964" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<status starttime="20190515 08:32:37.963" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<status starttime="20190515 08:32:37.960" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<status starttime="20190515 08:32:37.935" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<status starttime="20190515 08:32:37.934" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<status starttime="20190515 08:32:37.934" status="PASS" endtime="20190515 08:32:37.965"></status>
</kw>
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.994">{'remark': 'ThisIsRobot', 'camera_infos': [], 'address': '昂利软件园', 'cross_arm_num': '2', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'lat': '45.123', 'lon': '123.45', 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:37.994">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:37.966" status="PASS" endtime="20190515 08:32:37.994"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.995">${bug_level} = None</msg>
<status starttime="20190515 08:32:37.995" status="PASS" endtime="20190515 08:32:37.995"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.996">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.995" status="PASS" endtime="20190515 08:32:37.996"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:37.997">${status_tag} = None</msg>
<status starttime="20190515 08:32:37.996" status="PASS" endtime="20190515 08:32:37.997"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.997">Set tag 'None'.</msg>
<status starttime="20190515 08:32:37.997" status="PASS" endtime="20190515 08:32:37.998"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:37.999">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;POST&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:37.998" status="PASS" endtime="20190515 08:32:37.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.000">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas</msg>
<status starttime="20190515 08:32:38.000" status="PASS" endtime="20190515 08:32:38.000"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.001">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.000" status="PASS" endtime="20190515 08:32:38.001"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.001" status="PASS" endtime="20190515 08:32:38.002"></status>
</kw>
<status starttime="20190515 08:32:37.998" status="PASS" endtime="20190515 08:32:38.002"></status>
</kw>
<status starttime="20190515 08:32:37.994" status="PASS" endtime="20190515 08:32:38.002"></status>
</kw>
<status starttime="20190515 08:32:37.965" status="PASS" endtime="20190515 08:32:38.002"></status>
</kw>
<status starttime="20190515 08:32:37.965" status="PASS" endtime="20190515 08:32:38.002"></status>
</kw>
<status starttime="20190515 08:32:37.965" status="PASS" endtime="20190515 08:32:38.003"></status>
</kw>
<status starttime="20190515 08:32:37.934" status="PASS" endtime="20190515 08:32:38.003"></status>
</kw>
<status starttime="20190515 08:32:37.933" status="PASS" endtime="20190515 08:32:38.003"></status>
</kw>
<doc>接口名:添加勘探记录

请求方式:Post

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:37.931" status="PASS" endtime="20190515 08:32:38.003"></status>
</test>
<test id="s1-s2-s1-t3" name="post projects dot datas by project id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon_422}</arg>
<arg>lat=${lat_422}</arg>
<arg>address=${address_422}</arg>
<arg>poling_type=${poling_type_422}</arg>
<arg>height=${height_422}</arg>
<arg>cross_arm_num=${cross_arm_num_422}</arg>
<arg>camera_infos=${camera_infos_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.006">${essential_params} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he...</msg>
<status starttime="20190515 08:32:38.005" status="PASS" endtime="20190515 08:32:38.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo_422}</arg>
<arg>remark=${remark_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.007">${unessential_params} = {'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:38.007" status="PASS" endtime="20190515 08:32:38.008"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post projects dot datas by project id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.009">params:{'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'height': 'ThisIsRobot', 'cross_arm_num': 'ThisIsRobot', 'camera_infos': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'height': 'ThisIsRobot', 'cross_arm_num': 'ThisIsRobot', 'camera_infos': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<msg level="INFO" timestamp="20190515 08:32:38.010">@{results} = [ {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', '...</msg>
<status starttime="20190515 08:32:38.009" status="PASS" endtime="20190515 08:32:38.010"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.059">{'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_infos': 'ThisIsRobot', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'cross_arm_num': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'height': 'ThisIsRobot', 'poling_type': 'ThisIsRobot'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:38.059">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:38.012" status="PASS" endtime="20190515 08:32:38.060"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.063">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.061" status="PASS" endtime="20190515 08:32:38.063"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.064">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.063" status="PASS" endtime="20190515 08:32:38.065"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.067">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.065" status="PASS" endtime="20190515 08:32:38.067"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.069">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.068" status="PASS" endtime="20190515 08:32:38.069"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.070">${re} = FAIL</msg>
<status starttime="20190515 08:32:38.069" status="PASS" endtime="20190515 08:32:38.070"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.071">${js} = FAIL</msg>
<status starttime="20190515 08:32:38.070" status="PASS" endtime="20190515 08:32:38.071"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.074">{"message": "Validation Failed", "errors": [{"field": "lon", "code": "invalid"}, {"field": "lat", "code": "invalid"}, {"field": "poling_type", "code": "invalid"}, {"field": "height", "code": "invalid"}, {"field": "cross_arm_num", "code": "invalid"}, {"field": "camera_infos", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:38.073" status="PASS" endtime="20190515 08:32:38.074"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.075">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:38.074" status="PASS" endtime="20190515 08:32:38.075"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.077">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.076" status="PASS" endtime="20190515 08:32:38.077"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.078" status="PASS" endtime="20190515 08:32:38.079"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:38.079">${re} = PASS</msg>
<status starttime="20190515 08:32:38.072" status="PASS" endtime="20190515 08:32:38.079"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:38.081" status="PASS" endtime="20190515 08:32:38.082"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:38.082" status="PASS" endtime="20190515 08:32:38.087"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:38.088" status="PASS" endtime="20190515 08:32:38.089"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:38.089">${js} = PASS</msg>
<status starttime="20190515 08:32:38.080" status="PASS" endtime="20190515 08:32:38.089"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:38.090" status="PASS" endtime="20190515 08:32:38.091"></status>
</kw>
<status starttime="20190515 08:32:38.089" status="PASS" endtime="20190515 08:32:38.091"></status>
</kw>
<status starttime="20190515 08:32:38.060" status="PASS" endtime="20190515 08:32:38.091"></status>
</kw>
<status starttime="20190515 08:32:38.011" status="PASS" endtime="20190515 08:32:38.092"></status>
</kw>
<status starttime="20190515 08:32:38.010" status="PASS" endtime="20190515 08:32:38.092"></status>
</kw>
<status starttime="20190515 08:32:38.010" status="PASS" endtime="20190515 08:32:38.092"></status>
</kw>
<kw name="${kwargs} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.141">{'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_infos': 'ThisIsRobot', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'cross_arm_num': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'height': 'ThisIsRobot', 'poling_type': 'ThisIsRobot'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:38.142">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:38.094" status="PASS" endtime="20190515 08:32:38.142"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.144">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.143" status="PASS" endtime="20190515 08:32:38.144"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.145">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.144" status="PASS" endtime="20190515 08:32:38.145"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.146">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.146" status="PASS" endtime="20190515 08:32:38.146"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.147">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.147" status="PASS" endtime="20190515 08:32:38.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.148">${re} = FAIL</msg>
<status starttime="20190515 08:32:38.148" status="PASS" endtime="20190515 08:32:38.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.149">${js} = FAIL</msg>
<status starttime="20190515 08:32:38.149" status="PASS" endtime="20190515 08:32:38.149"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.152">{"message": "Validation Failed", "errors": [{"field": "lon", "code": "invalid"}, {"field": "lat", "code": "invalid"}, {"field": "poling_type", "code": "invalid"}, {"field": "height", "code": "invalid"}, {"field": "cross_arm_num", "code": "invalid"}, {"field": "camera_infos", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:38.151" status="PASS" endtime="20190515 08:32:38.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.153">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:38.152" status="PASS" endtime="20190515 08:32:38.153"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.154">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.153" status="PASS" endtime="20190515 08:32:38.154"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.155" status="PASS" endtime="20190515 08:32:38.155"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:38.156">${re} = PASS</msg>
<status starttime="20190515 08:32:38.150" status="PASS" endtime="20190515 08:32:38.156"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:38.157" status="PASS" endtime="20190515 08:32:38.157"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:38.158" status="PASS" endtime="20190515 08:32:38.162"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:38.162" status="PASS" endtime="20190515 08:32:38.163"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:38.163">${js} = PASS</msg>
<status starttime="20190515 08:32:38.156" status="PASS" endtime="20190515 08:32:38.163"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:38.165" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.164" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.142" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.092" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.092" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.092" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.010" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<status starttime="20190515 08:32:38.008" status="PASS" endtime="20190515 08:32:38.166"></status>
</kw>
<doc>接口名:添加勘探记录

请求方式:Post

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:38.004" status="PASS" endtime="20190515 08:32:38.167"></status>
</test>
<test id="s1-s2-s1-t4" name="get projects dot datas by project id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.170">${essential_params} = {'status': '1'}</msg>
<status starttime="20190515 08:32:38.169" status="PASS" endtime="20190515 08:32:38.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>address=${address}</arg>
<arg>section=${section}</arg>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>radius=${radius}</arg>
<arg>order_by=${order_by}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.171">${unessential_params} = {'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}</msg>
<status starttime="20190515 08:32:38.170" status="PASS" endtime="20190515 08:32:38.171"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects dot datas by project id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.173">params:{'status': '1', 'address': '昂利软件园'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}</msg>
<msg level="INFO" timestamp="20190515 08:32:38.173">@{results} = [ {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'} | {'status': ...</msg>
<status starttime="20190515 08:32:38.172" status="PASS" endtime="20190515 08:32:38.173"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.209">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.175" status="PASS" endtime="20190515 08:32:38.209"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.210">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.210" status="PASS" endtime="20190515 08:32:38.210"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.211">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.210" status="PASS" endtime="20190515 08:32:38.211"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.212">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.211" status="PASS" endtime="20190515 08:32:38.212"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.212">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.212" status="PASS" endtime="20190515 08:32:38.212"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.213">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.213" status="PASS" endtime="20190515 08:32:38.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.214">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.213" status="PASS" endtime="20190515 08:32:38.214"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.214">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.214" status="PASS" endtime="20190515 08:32:38.214"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.215" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<status starttime="20190515 08:32:38.212" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<status starttime="20190515 08:32:38.209" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<status starttime="20190515 08:32:38.174" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<status starttime="20190515 08:32:38.174" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<status starttime="20190515 08:32:38.174" status="PASS" endtime="20190515 08:32:38.215"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.237">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.216" status="PASS" endtime="20190515 08:32:38.237"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.238">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.237" status="PASS" endtime="20190515 08:32:38.238"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.238">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.238" status="PASS" endtime="20190515 08:32:38.239"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.239">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.239" status="PASS" endtime="20190515 08:32:38.239"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.240">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.239" status="PASS" endtime="20190515 08:32:38.240"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.241">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.240" status="PASS" endtime="20190515 08:32:38.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.241">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.241" status="PASS" endtime="20190515 08:32:38.242"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.242">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.242" status="PASS" endtime="20190515 08:32:38.242"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.242" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<status starttime="20190515 08:32:38.240" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<status starttime="20190515 08:32:38.237" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<status starttime="20190515 08:32:38.216" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<status starttime="20190515 08:32:38.216" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<status starttime="20190515 08:32:38.215" status="PASS" endtime="20190515 08:32:38.243"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.724">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.245" status="PASS" endtime="20190515 08:32:38.724"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.726">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.725" status="PASS" endtime="20190515 08:32:38.727"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.728">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.727" status="PASS" endtime="20190515 08:32:38.728"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.728">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.728" status="PASS" endtime="20190515 08:32:38.728"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.728">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.728" status="PASS" endtime="20190515 08:32:38.729"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.729">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.729" status="PASS" endtime="20190515 08:32:38.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.730">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.729" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.730">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.730" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.730" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<status starttime="20190515 08:32:38.729" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<status starttime="20190515 08:32:38.725" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<status starttime="20190515 08:32:38.244" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<status starttime="20190515 08:32:38.244" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<status starttime="20190515 08:32:38.243" status="PASS" endtime="20190515 08:32:38.730"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.757">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.731" status="PASS" endtime="20190515 08:32:38.757"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.760">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.759" status="PASS" endtime="20190515 08:32:38.760"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.762">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.761" status="PASS" endtime="20190515 08:32:38.762"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.763">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.762" status="PASS" endtime="20190515 08:32:38.764"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.765">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.764" status="PASS" endtime="20190515 08:32:38.765"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.768">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.767" status="PASS" endtime="20190515 08:32:38.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.770">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.769" status="PASS" endtime="20190515 08:32:38.770"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.771">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.771" status="PASS" endtime="20190515 08:32:38.772"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.772" status="PASS" endtime="20190515 08:32:38.773"></status>
</kw>
<status starttime="20190515 08:32:38.766" status="PASS" endtime="20190515 08:32:38.774"></status>
</kw>
<status starttime="20190515 08:32:38.758" status="PASS" endtime="20190515 08:32:38.774"></status>
</kw>
<status starttime="20190515 08:32:38.731" status="PASS" endtime="20190515 08:32:38.774"></status>
</kw>
<status starttime="20190515 08:32:38.731" status="PASS" endtime="20190515 08:32:38.775"></status>
</kw>
<status starttime="20190515 08:32:38.731" status="PASS" endtime="20190515 08:32:38.775"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.811">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.778" status="PASS" endtime="20190515 08:32:38.811"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.814">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.813" status="PASS" endtime="20190515 08:32:38.815"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.815">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.815" status="PASS" endtime="20190515 08:32:38.815"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.815">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.815" status="PASS" endtime="20190515 08:32:38.815"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.816">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.816" status="PASS" endtime="20190515 08:32:38.816"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.816">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.816" status="PASS" endtime="20190515 08:32:38.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.817">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.817" status="PASS" endtime="20190515 08:32:38.817"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.817">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.817" status="PASS" endtime="20190515 08:32:38.817"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.817" status="PASS" endtime="20190515 08:32:38.817"></status>
</kw>
<status starttime="20190515 08:32:38.816" status="PASS" endtime="20190515 08:32:38.818"></status>
</kw>
<status starttime="20190515 08:32:38.811" status="PASS" endtime="20190515 08:32:38.818"></status>
</kw>
<status starttime="20190515 08:32:38.776" status="PASS" endtime="20190515 08:32:38.818"></status>
</kw>
<status starttime="20190515 08:32:38.775" status="PASS" endtime="20190515 08:32:38.818"></status>
</kw>
<status starttime="20190515 08:32:38.775" status="PASS" endtime="20190515 08:32:38.818"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.847">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.818" status="PASS" endtime="20190515 08:32:38.847"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.848">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.848" status="PASS" endtime="20190515 08:32:38.848"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.849">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.849" status="PASS" endtime="20190515 08:32:38.849"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.850">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.849" status="PASS" endtime="20190515 08:32:38.850"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.850">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.850" status="PASS" endtime="20190515 08:32:38.850"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.851">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.851" status="PASS" endtime="20190515 08:32:38.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.852">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.852" status="PASS" endtime="20190515 08:32:38.852"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.853">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.853" status="PASS" endtime="20190515 08:32:38.853"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.853" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<status starttime="20190515 08:32:38.850" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<status starttime="20190515 08:32:38.848" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<status starttime="20190515 08:32:38.818" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<status starttime="20190515 08:32:38.818" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<status starttime="20190515 08:32:38.818" status="PASS" endtime="20190515 08:32:38.854"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.881">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.856" status="PASS" endtime="20190515 08:32:38.882"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.884">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.883" status="PASS" endtime="20190515 08:32:38.884"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.886">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.885" status="PASS" endtime="20190515 08:32:38.886"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.887">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.886" status="PASS" endtime="20190515 08:32:38.888"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.889">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.888" status="PASS" endtime="20190515 08:32:38.889"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.892">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.891" status="PASS" endtime="20190515 08:32:38.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.894">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.893" status="PASS" endtime="20190515 08:32:38.894"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.895">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.895" status="PASS" endtime="20190515 08:32:38.896"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.896" status="PASS" endtime="20190515 08:32:38.897"></status>
</kw>
<status starttime="20190515 08:32:38.890" status="PASS" endtime="20190515 08:32:38.898"></status>
</kw>
<status starttime="20190515 08:32:38.882" status="PASS" endtime="20190515 08:32:38.898"></status>
</kw>
<status starttime="20190515 08:32:38.855" status="PASS" endtime="20190515 08:32:38.898"></status>
</kw>
<status starttime="20190515 08:32:38.855" status="PASS" endtime="20190515 08:32:38.899"></status>
</kw>
<status starttime="20190515 08:32:38.854" status="PASS" endtime="20190515 08:32:38.899"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.930">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:38.902" status="PASS" endtime="20190515 08:32:38.930"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.932">${bug_level} = None</msg>
<status starttime="20190515 08:32:38.931" status="PASS" endtime="20190515 08:32:38.932"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.933">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.932" status="PASS" endtime="20190515 08:32:38.933"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.934">${status_tag} = None</msg>
<status starttime="20190515 08:32:38.934" status="PASS" endtime="20190515 08:32:38.934"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.935">Set tag 'None'.</msg>
<status starttime="20190515 08:32:38.935" status="PASS" endtime="20190515 08:32:38.936"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.937">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas?order_by=created_time&amp;amp;status=1&amp;amp;radius=1&amp;amp;page_num=1&amp;amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;amp;lon=123.45&amp;amp;page_size=20&amp;amp;lat=45.123&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:38.937" status="PASS" endtime="20190515 08:32:38.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.939">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:38.938" status="PASS" endtime="20190515 08:32:38.939"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:38.940">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:38.939" status="PASS" endtime="20190515 08:32:38.940"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:38.941" status="PASS" endtime="20190515 08:32:38.941"></status>
</kw>
<status starttime="20190515 08:32:38.936" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.931" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.900" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.899" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.899" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.173" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<status starttime="20190515 08:32:38.172" status="PASS" endtime="20190515 08:32:38.942"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装列表

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:38.167" status="PASS" endtime="20190515 08:32:38.943"></status>
</test>
<test id="s1-s2-s1-t5" name="get projects dot datas by project id Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.947">${essential_params} = {'status': '1'}</msg>
<status starttime="20190515 08:32:38.946" status="PASS" endtime="20190515 08:32:38.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>address=${address}</arg>
<arg>section=${section}</arg>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>radius=${radius}</arg>
<arg>order_by=${order_by}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.949">${unessential_params} = {'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}</msg>
<status starttime="20190515 08:32:38.948" status="PASS" endtime="20190515 08:32:38.949"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects dot datas by project id success 200</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:38.952">params:{'status': '1', 'address': '昂利软件园'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1'}
params:{'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}</msg>
<msg level="INFO" timestamp="20190515 08:32:38.953">@{results} = [ {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'} | {'status': ...</msg>
<status starttime="20190515 08:32:38.951" status="PASS" endtime="20190515 08:32:38.953"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.357">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:38.955" status="PASS" endtime="20190515 08:32:39.357"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.360">${bug_level} = None</msg>
<status starttime="20190515 08:32:39.359" status="PASS" endtime="20190515 08:32:39.360"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.360">Set tag 'None'.</msg>
<status starttime="20190515 08:32:39.360" status="PASS" endtime="20190515 08:32:39.360"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.361">${status_tag} = None</msg>
<status starttime="20190515 08:32:39.360" status="PASS" endtime="20190515 08:32:39.361"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.361">Set tag 'None'.</msg>
<status starttime="20190515 08:32:39.361" status="PASS" endtime="20190515 08:32:39.361"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.361">${re} = FAIL</msg>
<status starttime="20190515 08:32:39.361" status="PASS" endtime="20190515 08:32:39.361"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.362">${js} = FAIL</msg>
<status starttime="20190515 08:32:39.361" status="PASS" endtime="20190515 08:32:39.362"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.362">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:39.362" status="PASS" endtime="20190515 08:32:39.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.362">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:39.362" status="PASS" endtime="20190515 08:32:39.363"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.363">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:39.363" status="PASS" endtime="20190515 08:32:39.363"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:39.363" status="PASS" endtime="20190515 08:32:39.363"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:39.363">${re} = PASS</msg>
<status starttime="20190515 08:32:39.362" status="PASS" endtime="20190515 08:32:39.363"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:39.364" status="PASS" endtime="20190515 08:32:39.364"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:39.364" status="PASS" endtime="20190515 08:32:39.366"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:39.366" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:39.367">${js} = PASS</msg>
<status starttime="20190515 08:32:39.363" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:39.367" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<status starttime="20190515 08:32:39.367" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<status starttime="20190515 08:32:39.358" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<status starttime="20190515 08:32:38.954" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<status starttime="20190515 08:32:38.953" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<status starttime="20190515 08:32:38.953" status="PASS" endtime="20190515 08:32:39.367"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:39.368" status="PASS" endtime="20190515 08:32:39.953"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.956">${bug_level} = None</msg>
<status starttime="20190515 08:32:39.955" status="PASS" endtime="20190515 08:32:39.956"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.956">Set tag 'None'.</msg>
<status starttime="20190515 08:32:39.956" status="PASS" endtime="20190515 08:32:39.956"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.957">${status_tag} = None</msg>
<status starttime="20190515 08:32:39.956" status="PASS" endtime="20190515 08:32:39.957"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.957">Set tag 'None'.</msg>
<status starttime="20190515 08:32:39.957" status="PASS" endtime="20190515 08:32:39.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.957">${re} = FAIL</msg>
<status starttime="20190515 08:32:39.957" status="PASS" endtime="20190515 08:32:39.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:39.958">${js} = FAIL</msg>
<status starttime="20190515 08:32:39.957" status="PASS" endtime="20190515 08:32:39.958"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.958">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:39.958" status="PASS" endtime="20190515 08:32:39.958"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.959">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:39.958" status="PASS" endtime="20190515 08:32:39.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:39.959">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:39.959" status="PASS" endtime="20190515 08:32:39.959"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:39.959" status="PASS" endtime="20190515 08:32:39.959"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:39.959">${re} = PASS</msg>
<status starttime="20190515 08:32:39.958" status="PASS" endtime="20190515 08:32:39.960"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:39.960" status="PASS" endtime="20190515 08:32:39.960"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:39.960" status="PASS" endtime="20190515 08:32:39.962"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:39.963" status="PASS" endtime="20190515 08:32:39.963"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:39.963">${js} = PASS</msg>
<status starttime="20190515 08:32:39.960" status="PASS" endtime="20190515 08:32:39.963"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:39.963" status="PASS" endtime="20190515 08:32:39.963"></status>
</kw>
<status starttime="20190515 08:32:39.963" status="PASS" endtime="20190515 08:32:39.964"></status>
</kw>
<status starttime="20190515 08:32:39.953" status="PASS" endtime="20190515 08:32:39.964"></status>
</kw>
<status starttime="20190515 08:32:39.368" status="PASS" endtime="20190515 08:32:39.964"></status>
</kw>
<status starttime="20190515 08:32:39.368" status="PASS" endtime="20190515 08:32:39.964"></status>
</kw>
<status starttime="20190515 08:32:39.368" status="PASS" endtime="20190515 08:32:39.964"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.108">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:39.964" status="PASS" endtime="20190515 08:32:40.108"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.111">${bug_level} = None</msg>
<status starttime="20190515 08:32:40.110" status="PASS" endtime="20190515 08:32:40.111"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.112">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.111" status="PASS" endtime="20190515 08:32:40.112"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.114">${status_tag} = None</msg>
<status starttime="20190515 08:32:40.113" status="PASS" endtime="20190515 08:32:40.114"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.115">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.114" status="PASS" endtime="20190515 08:32:40.116"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.117">${re} = FAIL</msg>
<status starttime="20190515 08:32:40.116" status="PASS" endtime="20190515 08:32:40.117"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.118">${js} = FAIL</msg>
<status starttime="20190515 08:32:40.117" status="PASS" endtime="20190515 08:32:40.118"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.121">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:40.120" status="PASS" endtime="20190515 08:32:40.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.122">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:40.122" status="PASS" endtime="20190515 08:32:40.123"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.124">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:40.123" status="PASS" endtime="20190515 08:32:40.124"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:40.125" status="PASS" endtime="20190515 08:32:40.126"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.126">${re} = PASS</msg>
<status starttime="20190515 08:32:40.119" status="PASS" endtime="20190515 08:32:40.126"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:40.128" status="PASS" endtime="20190515 08:32:40.129"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:40.129" status="PASS" endtime="20190515 08:32:40.139"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:40.139" status="PASS" endtime="20190515 08:32:40.140"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.140">${js} = PASS</msg>
<status starttime="20190515 08:32:40.127" status="PASS" endtime="20190515 08:32:40.140"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:40.142" status="PASS" endtime="20190515 08:32:40.142"></status>
</kw>
<status starttime="20190515 08:32:40.141" status="PASS" endtime="20190515 08:32:40.142"></status>
</kw>
<status starttime="20190515 08:32:40.108" status="PASS" endtime="20190515 08:32:40.142"></status>
</kw>
<status starttime="20190515 08:32:39.964" status="PASS" endtime="20190515 08:32:40.143"></status>
</kw>
<status starttime="20190515 08:32:39.964" status="PASS" endtime="20190515 08:32:40.143"></status>
</kw>
<status starttime="20190515 08:32:39.964" status="PASS" endtime="20190515 08:32:40.143"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.306">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:40.145" status="PASS" endtime="20190515 08:32:40.306"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.309">${bug_level} = None</msg>
<status starttime="20190515 08:32:40.308" status="PASS" endtime="20190515 08:32:40.309"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.310">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.309" status="PASS" endtime="20190515 08:32:40.311"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.312">${status_tag} = None</msg>
<status starttime="20190515 08:32:40.311" status="PASS" endtime="20190515 08:32:40.312"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.313">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.312" status="PASS" endtime="20190515 08:32:40.314"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.315">${re} = FAIL</msg>
<status starttime="20190515 08:32:40.314" status="PASS" endtime="20190515 08:32:40.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.316">${js} = FAIL</msg>
<status starttime="20190515 08:32:40.315" status="PASS" endtime="20190515 08:32:40.316"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.319">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:40.318" status="PASS" endtime="20190515 08:32:40.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.320">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:40.320" status="PASS" endtime="20190515 08:32:40.321"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.322">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:40.321" status="PASS" endtime="20190515 08:32:40.322"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:40.323" status="PASS" endtime="20190515 08:32:40.324"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.324">${re} = PASS</msg>
<status starttime="20190515 08:32:40.317" status="PASS" endtime="20190515 08:32:40.324"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:40.326" status="PASS" endtime="20190515 08:32:40.327"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:40.328" status="PASS" endtime="20190515 08:32:40.338"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:40.338" status="PASS" endtime="20190515 08:32:40.339"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.339">${js} = PASS</msg>
<status starttime="20190515 08:32:40.325" status="PASS" endtime="20190515 08:32:40.339"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:40.340" status="PASS" endtime="20190515 08:32:40.341"></status>
</kw>
<status starttime="20190515 08:32:40.340" status="PASS" endtime="20190515 08:32:40.341"></status>
</kw>
<status starttime="20190515 08:32:40.306" status="PASS" endtime="20190515 08:32:40.341"></status>
</kw>
<status starttime="20190515 08:32:40.144" status="PASS" endtime="20190515 08:32:40.342"></status>
</kw>
<status starttime="20190515 08:32:40.143" status="PASS" endtime="20190515 08:32:40.342"></status>
</kw>
<status starttime="20190515 08:32:40.143" status="PASS" endtime="20190515 08:32:40.342"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.531">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:40.343" status="PASS" endtime="20190515 08:32:40.531"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.534">${bug_level} = None</msg>
<status starttime="20190515 08:32:40.533" status="PASS" endtime="20190515 08:32:40.534"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.536">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.534" status="PASS" endtime="20190515 08:32:40.536"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.537">${status_tag} = None</msg>
<status starttime="20190515 08:32:40.536" status="PASS" endtime="20190515 08:32:40.537"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.539">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.538" status="PASS" endtime="20190515 08:32:40.539"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.540">${re} = FAIL</msg>
<status starttime="20190515 08:32:40.539" status="PASS" endtime="20190515 08:32:40.540"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.541">${js} = FAIL</msg>
<status starttime="20190515 08:32:40.541" status="PASS" endtime="20190515 08:32:40.541"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.544">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:40.543" status="PASS" endtime="20190515 08:32:40.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.546">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:40.545" status="PASS" endtime="20190515 08:32:40.546"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.547">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:40.546" status="PASS" endtime="20190515 08:32:40.548"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:40.548" status="PASS" endtime="20190515 08:32:40.549"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.550">${re} = PASS</msg>
<status starttime="20190515 08:32:40.542" status="PASS" endtime="20190515 08:32:40.550"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:40.552" status="PASS" endtime="20190515 08:32:40.552"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:40.553" status="PASS" endtime="20190515 08:32:40.563"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:40.563" status="PASS" endtime="20190515 08:32:40.564"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.564">${js} = PASS</msg>
<status starttime="20190515 08:32:40.550" status="PASS" endtime="20190515 08:32:40.564"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:40.566" status="PASS" endtime="20190515 08:32:40.566"></status>
</kw>
<status starttime="20190515 08:32:40.565" status="PASS" endtime="20190515 08:32:40.567"></status>
</kw>
<status starttime="20190515 08:32:40.532" status="PASS" endtime="20190515 08:32:40.567"></status>
</kw>
<status starttime="20190515 08:32:40.342" status="PASS" endtime="20190515 08:32:40.567"></status>
</kw>
<status starttime="20190515 08:32:40.342" status="PASS" endtime="20190515 08:32:40.567"></status>
</kw>
<status starttime="20190515 08:32:40.342" status="PASS" endtime="20190515 08:32:40.567"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:40.569" status="PASS" endtime="20190515 08:32:40.696"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.699">${bug_level} = None</msg>
<status starttime="20190515 08:32:40.698" status="PASS" endtime="20190515 08:32:40.700"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.701">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.700" status="PASS" endtime="20190515 08:32:40.701"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.703">${status_tag} = None</msg>
<status starttime="20190515 08:32:40.702" status="PASS" endtime="20190515 08:32:40.703"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.704">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.703" status="PASS" endtime="20190515 08:32:40.704"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.706">${re} = FAIL</msg>
<status starttime="20190515 08:32:40.705" status="PASS" endtime="20190515 08:32:40.706"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.707">${js} = FAIL</msg>
<status starttime="20190515 08:32:40.706" status="PASS" endtime="20190515 08:32:40.707"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.709">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:40.708" status="PASS" endtime="20190515 08:32:40.710"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.711">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:40.710" status="PASS" endtime="20190515 08:32:40.711"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.713">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:40.712" status="PASS" endtime="20190515 08:32:40.713"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:40.714" status="PASS" endtime="20190515 08:32:40.715"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.715">${re} = PASS</msg>
<status starttime="20190515 08:32:40.707" status="PASS" endtime="20190515 08:32:40.715"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:40.717" status="PASS" endtime="20190515 08:32:40.718"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:40.718" status="PASS" endtime="20190515 08:32:40.728"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:40.729" status="PASS" endtime="20190515 08:32:40.729"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.730">${js} = PASS</msg>
<status starttime="20190515 08:32:40.716" status="PASS" endtime="20190515 08:32:40.730"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:40.731" status="PASS" endtime="20190515 08:32:40.731"></status>
</kw>
<status starttime="20190515 08:32:40.730" status="PASS" endtime="20190515 08:32:40.732"></status>
</kw>
<status starttime="20190515 08:32:40.697" status="PASS" endtime="20190515 08:32:40.732"></status>
</kw>
<status starttime="20190515 08:32:40.568" status="PASS" endtime="20190515 08:32:40.732"></status>
</kw>
<status starttime="20190515 08:32:40.567" status="PASS" endtime="20190515 08:32:40.732"></status>
</kw>
<status starttime="20190515 08:32:40.567" status="PASS" endtime="20190515 08:32:40.732"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.864">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:40.734" status="PASS" endtime="20190515 08:32:40.864"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.867">${bug_level} = None</msg>
<status starttime="20190515 08:32:40.866" status="PASS" endtime="20190515 08:32:40.868"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.869">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.868" status="PASS" endtime="20190515 08:32:40.869"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.871">${status_tag} = None</msg>
<status starttime="20190515 08:32:40.870" status="PASS" endtime="20190515 08:32:40.871"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.872">Set tag 'None'.</msg>
<status starttime="20190515 08:32:40.871" status="PASS" endtime="20190515 08:32:40.873"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.874">${re} = FAIL</msg>
<status starttime="20190515 08:32:40.873" status="PASS" endtime="20190515 08:32:40.874"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:40.875">${js} = FAIL</msg>
<status starttime="20190515 08:32:40.874" status="PASS" endtime="20190515 08:32:40.875"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.878">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:40.877" status="PASS" endtime="20190515 08:32:40.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.879">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:40.878" status="PASS" endtime="20190515 08:32:40.880"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:40.881">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:40.880" status="PASS" endtime="20190515 08:32:40.881"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:40.882" status="PASS" endtime="20190515 08:32:40.883"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.883">${re} = PASS</msg>
<status starttime="20190515 08:32:40.875" status="PASS" endtime="20190515 08:32:40.883"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:40.885" status="PASS" endtime="20190515 08:32:40.886"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:40.886" status="PASS" endtime="20190515 08:32:40.897"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:40.897" status="PASS" endtime="20190515 08:32:40.898"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:40.898">${js} = PASS</msg>
<status starttime="20190515 08:32:40.884" status="PASS" endtime="20190515 08:32:40.898"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:40.900" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<status starttime="20190515 08:32:40.899" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<status starttime="20190515 08:32:40.865" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<status starttime="20190515 08:32:40.733" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<status starttime="20190515 08:32:40.733" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<status starttime="20190515 08:32:40.732" status="PASS" endtime="20190515 08:32:40.901"></status>
</kw>
<kw name="${kwargs} = {'status': '1', 'address': '昂利软件园', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'page_num': '1', 'page_size': '20'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:40.903" status="PASS" endtime="20190515 08:32:41.032"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.035">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.034" status="PASS" endtime="20190515 08:32:41.035"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.036">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.035" status="PASS" endtime="20190515 08:32:41.036"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.038">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.037" status="PASS" endtime="20190515 08:32:41.038"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.039">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.038" status="PASS" endtime="20190515 08:32:41.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.040">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.040" status="PASS" endtime="20190515 08:32:41.041"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.042">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.041" status="PASS" endtime="20190515 08:32:41.042"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.044">[{"dot_data_id": "20190515003237186", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": "['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']", "remark": null, "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.200272, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f092a2c076a811e991df0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "040-298", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.432825, "created_time": 1557880357.432869}], "created_time": 1557880357.294276, "updated_time": 1557880357.294243}, {"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}]</msg>
<status starttime="20190515 08:32:41.043" status="PASS" endtime="20190515 08:32:41.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.046">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=1&amp;radius=1&amp;page_num=1&amp;address=%E6%98%82%E5%88%A9%E8%BD%AF%E4%BB%B6%E5%9B%AD&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:41.045" status="PASS" endtime="20190515 08:32:41.046"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.048">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.047" status="PASS" endtime="20190515 08:32:41.048"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.049" status="PASS" endtime="20190515 08:32:41.050"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.050">${re} = PASS</msg>
<status starttime="20190515 08:32:41.042" status="PASS" endtime="20190515 08:32:41.050"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.052" status="PASS" endtime="20190515 08:32:41.053"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.053" status="PASS" endtime="20190515 08:32:41.064"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.065" status="PASS" endtime="20190515 08:32:41.066"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.066">${js} = PASS</msg>
<status starttime="20190515 08:32:41.051" status="PASS" endtime="20190515 08:32:41.066"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.067" status="PASS" endtime="20190515 08:32:41.068"></status>
</kw>
<status starttime="20190515 08:32:41.067" status="PASS" endtime="20190515 08:32:41.068"></status>
</kw>
<status starttime="20190515 08:32:41.033" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<status starttime="20190515 08:32:40.902" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<status starttime="20190515 08:32:40.902" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<status starttime="20190515 08:32:40.901" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<status starttime="20190515 08:32:38.953" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<status starttime="20190515 08:32:38.950" status="PASS" endtime="20190515 08:32:41.069"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装列表

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 DotData 对象。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:38.944" status="PASS" endtime="20190515 08:32:41.070"></status>
</test>
<test id="s1-s2-s1-t6" name="get projects dot datas by project id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.073">${essential_params} = {'status': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:41.073" status="PASS" endtime="20190515 08:32:41.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>radius=${radius_422}</arg>
<arg>order_by=${order_by_422}</arg>
<arg>page_num=${page_num_422}</arg>
<arg>page_size=${page_size_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.075">${unessential_params} = {'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:41.074" status="PASS" endtime="20190515 08:32:41.075"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects dot datas by project id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.076">params:{'status': 'ThisIsRobot', 'radius': 'ThisIsRobot'}
params:{'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot'}
params:{'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:41.077">@{results} = [ {'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'} | {'status': 'ThisIsRobot', 'radi...</msg>
<status starttime="20190515 08:32:41.076" status="PASS" endtime="20190515 08:32:41.077"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.192">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:41.078" status="PASS" endtime="20190515 08:32:41.192"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.195">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.194" status="PASS" endtime="20190515 08:32:41.195"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.197">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.196" status="PASS" endtime="20190515 08:32:41.197"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.199">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.198" status="PASS" endtime="20190515 08:32:41.199"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.200">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.199" status="PASS" endtime="20190515 08:32:41.200"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.201">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.201" status="PASS" endtime="20190515 08:32:41.202"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.203">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.202" status="PASS" endtime="20190515 08:32:41.203"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.205">{"message": "Validation Failed", "errors": [{"field": "radius", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:41.204" status="PASS" endtime="20190515 08:32:41.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.208">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;radius=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:41.206" status="PASS" endtime="20190515 08:32:41.208"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.209">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.208" status="PASS" endtime="20190515 08:32:41.210"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.210" status="PASS" endtime="20190515 08:32:41.211"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.212">${re} = PASS</msg>
<status starttime="20190515 08:32:41.203" status="PASS" endtime="20190515 08:32:41.212"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.214" status="PASS" endtime="20190515 08:32:41.215"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.215" status="PASS" endtime="20190515 08:32:41.221"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.221" status="PASS" endtime="20190515 08:32:41.222"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.222">${js} = PASS</msg>
<status starttime="20190515 08:32:41.212" status="PASS" endtime="20190515 08:32:41.222"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.224" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<status starttime="20190515 08:32:41.223" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<status starttime="20190515 08:32:41.193" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<status starttime="20190515 08:32:41.078" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<status starttime="20190515 08:32:41.077" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<status starttime="20190515 08:32:41.077" status="PASS" endtime="20190515 08:32:41.225"></status>
</kw>
<kw name="${kwargs} = {'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.261">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:41.227" status="PASS" endtime="20190515 08:32:41.261"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.263">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.262" status="PASS" endtime="20190515 08:32:41.263"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.263">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.263" status="PASS" endtime="20190515 08:32:41.264"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.264">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.264" status="PASS" endtime="20190515 08:32:41.264"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.265">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.265" status="PASS" endtime="20190515 08:32:41.265"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.266">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.265" status="PASS" endtime="20190515 08:32:41.266"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.266">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.266" status="PASS" endtime="20190515 08:32:41.266"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.268">{"message": "Validation Failed", "errors": [{"field": "radius", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:41.267" status="PASS" endtime="20190515 08:32:41.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.268">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;radius=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:41.268" status="PASS" endtime="20190515 08:32:41.268"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.269">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.269" status="PASS" endtime="20190515 08:32:41.269"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.270" status="PASS" endtime="20190515 08:32:41.270"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.271">${re} = PASS</msg>
<status starttime="20190515 08:32:41.267" status="PASS" endtime="20190515 08:32:41.271"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.272" status="PASS" endtime="20190515 08:32:41.272"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.272" status="PASS" endtime="20190515 08:32:41.275"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.275" status="PASS" endtime="20190515 08:32:41.276"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.276">${js} = PASS</msg>
<status starttime="20190515 08:32:41.271" status="PASS" endtime="20190515 08:32:41.276"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.277" status="PASS" endtime="20190515 08:32:41.277"></status>
</kw>
<status starttime="20190515 08:32:41.276" status="PASS" endtime="20190515 08:32:41.278"></status>
</kw>
<status starttime="20190515 08:32:41.262" status="PASS" endtime="20190515 08:32:41.278"></status>
</kw>
<status starttime="20190515 08:32:41.226" status="PASS" endtime="20190515 08:32:41.278"></status>
</kw>
<status starttime="20190515 08:32:41.226" status="PASS" endtime="20190515 08:32:41.278"></status>
</kw>
<status starttime="20190515 08:32:41.226" status="PASS" endtime="20190515 08:32:41.278"></status>
</kw>
<kw name="${kwargs} = {'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.319">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:41.280" status="PASS" endtime="20190515 08:32:41.319"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.322">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.320" status="PASS" endtime="20190515 08:32:41.322"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.323">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.322" status="PASS" endtime="20190515 08:32:41.323"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.325">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.324" status="PASS" endtime="20190515 08:32:41.325"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.326">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.325" status="PASS" endtime="20190515 08:32:41.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.328">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.327" status="PASS" endtime="20190515 08:32:41.328"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.329">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.328" status="PASS" endtime="20190515 08:32:41.329"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.331">{"message": "Validation Failed", "errors": [{"field": "radius", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:41.331" status="PASS" endtime="20190515 08:32:41.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.333">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;radius=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:41.332" status="PASS" endtime="20190515 08:32:41.333"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.335">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.334" status="PASS" endtime="20190515 08:32:41.335"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.336" status="PASS" endtime="20190515 08:32:41.336"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.337">${re} = PASS</msg>
<status starttime="20190515 08:32:41.329" status="PASS" endtime="20190515 08:32:41.337"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.339" status="PASS" endtime="20190515 08:32:41.342"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.343" status="PASS" endtime="20190515 08:32:41.347"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.347" status="PASS" endtime="20190515 08:32:41.347"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.348">${js} = PASS</msg>
<status starttime="20190515 08:32:41.338" status="PASS" endtime="20190515 08:32:41.348"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.349" status="PASS" endtime="20190515 08:32:41.349"></status>
</kw>
<status starttime="20190515 08:32:41.348" status="PASS" endtime="20190515 08:32:41.349"></status>
</kw>
<status starttime="20190515 08:32:41.319" status="PASS" endtime="20190515 08:32:41.350"></status>
</kw>
<status starttime="20190515 08:32:41.279" status="PASS" endtime="20190515 08:32:41.350"></status>
</kw>
<status starttime="20190515 08:32:41.278" status="PASS" endtime="20190515 08:32:41.350"></status>
</kw>
<status starttime="20190515 08:32:41.278" status="PASS" endtime="20190515 08:32:41.350"></status>
</kw>
<kw name="${kwargs} = {'status': 'ThisIsRobot', 'radius': 'ThisIsRobot', 'order_by': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.384">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:41.352" status="PASS" endtime="20190515 08:32:41.384"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.385">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.385" status="PASS" endtime="20190515 08:32:41.385"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.386">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.385" status="PASS" endtime="20190515 08:32:41.386"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.387">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.386" status="PASS" endtime="20190515 08:32:41.387"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.387">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.387" status="PASS" endtime="20190515 08:32:41.387"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.388">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.387" status="PASS" endtime="20190515 08:32:41.388"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.388">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.388" status="PASS" endtime="20190515 08:32:41.388"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.389">{"message": "Validation Failed", "errors": [{"field": "radius", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:41.389" status="PASS" endtime="20190515 08:32:41.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.390">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;order_by=ThisIsRobot&amp;page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;radius=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:41.389" status="PASS" endtime="20190515 08:32:41.390"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.390">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.390" status="PASS" endtime="20190515 08:32:41.390"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.391" status="PASS" endtime="20190515 08:32:41.391"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.391">${re} = PASS</msg>
<status starttime="20190515 08:32:41.388" status="PASS" endtime="20190515 08:32:41.391"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.392" status="PASS" endtime="20190515 08:32:41.392"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.392" status="PASS" endtime="20190515 08:32:41.395"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.395" status="PASS" endtime="20190515 08:32:41.396"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.396">${js} = PASS</msg>
<status starttime="20190515 08:32:41.391" status="PASS" endtime="20190515 08:32:41.396"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.397" status="PASS" endtime="20190515 08:32:41.397"></status>
</kw>
<status starttime="20190515 08:32:41.396" status="PASS" endtime="20190515 08:32:41.397"></status>
</kw>
<status starttime="20190515 08:32:41.384" status="PASS" endtime="20190515 08:32:41.397"></status>
</kw>
<status starttime="20190515 08:32:41.351" status="PASS" endtime="20190515 08:32:41.398"></status>
</kw>
<status starttime="20190515 08:32:41.350" status="PASS" endtime="20190515 08:32:41.398"></status>
</kw>
<status starttime="20190515 08:32:41.350" status="PASS" endtime="20190515 08:32:41.398"></status>
</kw>
<status starttime="20190515 08:32:41.077" status="PASS" endtime="20190515 08:32:41.398"></status>
</kw>
<status starttime="20190515 08:32:41.075" status="PASS" endtime="20190515 08:32:41.398"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装列表

请求方式:Get

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.070" status="PASS" endtime="20190515 08:32:41.398"></status>
</test>
<test id="s1-s2-s1-t7" name="get projects dot datas by project id dot data id Success">
<kw name="get projects dot datas by project id dot data id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:41.401" status="PASS" endtime="20190515 08:32:41.506"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_by_project_id_dot_data_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.509">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.508" status="PASS" endtime="20190515 08:32:41.509"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.511">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.510" status="PASS" endtime="20190515 08:32:41.511"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.513">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.512" status="PASS" endtime="20190515 08:32:41.513"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.514">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.513" status="PASS" endtime="20190515 08:32:41.514"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.515">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.515" status="PASS" endtime="20190515 08:32:41.515"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.516">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.516" status="PASS" endtime="20190515 08:32:41.517"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.519">{"dot_data_id": "20190515003237538", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "lon": "123.45", "lat": "45.123", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "poling_type": 1, "reuse_pole_photo": null, "remark": "ThisIsRobot", "height": 2.7, "cross_arm_num": 2, "prospect_time": 1557880357.744543, "pole_time": null, "camera_time": null, "prospect_operator": null, "pole_operator": null, "camera_operator": null, "status": 1, "camera_infos": [{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}], "created_time": 1557880357.83334, "updated_time": 1557880357.833303}</msg>
<status starttime="20190515 08:32:41.518" status="PASS" endtime="20190515 08:32:41.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.521">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:41.520" status="PASS" endtime="20190515 08:32:41.521"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.522">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.521" status="PASS" endtime="20190515 08:32:41.523"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.523" status="PASS" endtime="20190515 08:32:41.524"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.525">${re} = PASS</msg>
<status starttime="20190515 08:32:41.517" status="PASS" endtime="20190515 08:32:41.525"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.527" status="PASS" endtime="20190515 08:32:41.528"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.528" status="PASS" endtime="20190515 08:32:41.537"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.538" status="PASS" endtime="20190515 08:32:41.538"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.539">${js} = PASS</msg>
<status starttime="20190515 08:32:41.525" status="PASS" endtime="20190515 08:32:41.539"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.540" status="PASS" endtime="20190515 08:32:41.541"></status>
</kw>
<status starttime="20190515 08:32:41.539" status="PASS" endtime="20190515 08:32:41.541"></status>
</kw>
<status starttime="20190515 08:32:41.507" status="PASS" endtime="20190515 08:32:41.541"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['camera_infos'][0]['camera_info_id']}</arg>
</arguments>
<assign>
<var>${camera_info_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.543">${camera_info_id} = f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:41.541" status="PASS" endtime="20190515 08:32:41.543"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${camera_info_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.544">${camera_info_id} = f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:41.543" status="PASS" endtime="20190515 08:32:41.544"></status>
</kw>
<status starttime="20190515 08:32:41.400" status="PASS" endtime="20190515 08:32:41.544"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装详情

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 DotData 对象。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.398" status="PASS" endtime="20190515 08:32:41.544"></status>
</test>
<test id="s1-s2-s1-t8" name="get projects dot datas by project id dot data id Fail With Wrong Url">
<kw name="get projects dot datas by project id dot data id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.572">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:41.547" status="PASS" endtime="20190515 08:32:41.573"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.573">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.573" status="PASS" endtime="20190515 08:32:41.574"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.574">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.574" status="PASS" endtime="20190515 08:32:41.574"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.574">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.574" status="PASS" endtime="20190515 08:32:41.574"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.575">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.575" status="PASS" endtime="20190515 08:32:41.575"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.576">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:41.575" status="PASS" endtime="20190515 08:32:41.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.576">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]</msg>
<status starttime="20190515 08:32:41.576" status="PASS" endtime="20190515 08:32:41.576"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.577">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.576" status="PASS" endtime="20190515 08:32:41.577"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.577" status="PASS" endtime="20190515 08:32:41.577"></status>
</kw>
<status starttime="20190515 08:32:41.575" status="PASS" endtime="20190515 08:32:41.577"></status>
</kw>
<status starttime="20190515 08:32:41.573" status="PASS" endtime="20190515 08:32:41.578"></status>
</kw>
<status starttime="20190515 08:32:41.547" status="PASS" endtime="20190515 08:32:41.578"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装详情

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.545" status="PASS" endtime="20190515 08:32:41.578"></status>
</test>
<test id="s1-s2-s1-t9" name="get projects dot datas camera infos by project id dot data id camera info id Success">
<kw name="get projects dot datas camera infos by project id dot data id camera info id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:41.579" status="PASS" endtime="20190515 08:32:41.680"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_dot_datas_camera_infos_by_project_id_dot_data_id_camera_info_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.680">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.680" status="PASS" endtime="20190515 08:32:41.680"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.681">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.680" status="PASS" endtime="20190515 08:32:41.681"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.681">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.681" status="PASS" endtime="20190515 08:32:41.681"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.682">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.681" status="PASS" endtime="20190515 08:32:41.682"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.682">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.682" status="PASS" endtime="20190515 08:32:41.682"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.682">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.682" status="PASS" endtime="20190515 08:32:41.682"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.683">{"camera_info_id": "f0d930fa76a811e9881d0242c0a8b002", "project": {"project_id": "f015637876a811e9bafb0242c0a8b002", "project_name": "robot13874192798", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880356.615799, "updated_time": 1557880356.61578}, "camera_num": 1, "brand_name": "1", "brand_short": "kj", "brand_model": "\u5eb7\u4f73ATP-13", "power_type": 1, "spot_num": "054-712", "reg_code": "", "coordinate": "", "status": 1, "updated_time": 1557880357.887056, "created_time": 1557880357.887137}</msg>
<status starttime="20190515 08:32:41.683" status="PASS" endtime="20190515 08:32:41.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.683">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:41.683" status="PASS" endtime="20190515 08:32:41.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.683">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.683" status="PASS" endtime="20190515 08:32:41.683"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.684" status="PASS" endtime="20190515 08:32:41.684"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.684">${re} = PASS</msg>
<status starttime="20190515 08:32:41.682" status="PASS" endtime="20190515 08:32:41.684"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.684" status="PASS" endtime="20190515 08:32:41.684"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.685" status="PASS" endtime="20190515 08:32:41.686"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.686" status="PASS" endtime="20190515 08:32:41.686"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.686">${js} = PASS</msg>
<status starttime="20190515 08:32:41.684" status="PASS" endtime="20190515 08:32:41.686"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.686" status="PASS" endtime="20190515 08:32:41.687"></status>
</kw>
<status starttime="20190515 08:32:41.686" status="PASS" endtime="20190515 08:32:41.687"></status>
</kw>
<status starttime="20190515 08:32:41.680" status="PASS" endtime="20190515 08:32:41.687"></status>
</kw>
<status starttime="20190515 08:32:41.579" status="PASS" endtime="20190515 08:32:41.687"></status>
</kw>
<doc>接口名:获取指定编号相机信息

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 CameraInfo 对象。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.578" status="PASS" endtime="20190515 08:32:41.687"></status>
</test>
<test id="s1-s2-s1-t10" name="get projects dot datas camera infos by project id dot data id camera info id Fail With Wrong Url">
<kw name="get projects dot datas camera infos by project id dot data id camera info id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
<arg>camera_info_id=${wrong_url_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.749">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:41.688" status="PASS" endtime="20190515 08:32:41.749"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.752">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.751" status="PASS" endtime="20190515 08:32:41.752"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.754">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.753" status="PASS" endtime="20190515 08:32:41.754"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.755">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.754" status="PASS" endtime="20190515 08:32:41.755"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.757">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.756" status="PASS" endtime="20190515 08:32:41.757"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.761">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D/camera_infos/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:41.760" status="PASS" endtime="20190515 08:32:41.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.763">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/[12345678987654321]</msg>
<status starttime="20190515 08:32:41.762" status="PASS" endtime="20190515 08:32:41.763"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.765">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.764" status="PASS" endtime="20190515 08:32:41.765"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.766" status="PASS" endtime="20190515 08:32:41.766"></status>
</kw>
<status starttime="20190515 08:32:41.758" status="PASS" endtime="20190515 08:32:41.767"></status>
</kw>
<status starttime="20190515 08:32:41.750" status="PASS" endtime="20190515 08:32:41.767"></status>
</kw>
<status starttime="20190515 08:32:41.688" status="PASS" endtime="20190515 08:32:41.768"></status>
</kw>
<doc>接口名:获取指定编号相机信息

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.687" status="PASS" endtime="20190515 08:32:41.768"></status>
</test>
<test id="s1-s2-s1-t11" name="get projects statistics by project id Success">
<kw name="get projects statistics by project id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Statistics By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:41.773" status="PASS" endtime="20190515 08:32:41.832"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_dot/get_projects_statistics_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.835">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.834" status="PASS" endtime="20190515 08:32:41.835"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.837">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.836" status="PASS" endtime="20190515 08:32:41.837"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.839">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.838" status="PASS" endtime="20190515 08:32:41.839"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.840">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.839" status="PASS" endtime="20190515 08:32:41.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.841">${re} = FAIL</msg>
<status starttime="20190515 08:32:41.841" status="PASS" endtime="20190515 08:32:41.842"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.843">${js} = FAIL</msg>
<status starttime="20190515 08:32:41.842" status="PASS" endtime="20190515 08:32:41.843"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.845">{"pole_num": 0, "no_pole_num": 2, "all_pole_num": 2, "camera_num": 0, "no_camera_num": 0, "all_camera_num": 0}</msg>
<status starttime="20190515 08:32:41.844" status="PASS" endtime="20190515 08:32:41.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.847">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/statistics</msg>
<status starttime="20190515 08:32:41.846" status="PASS" endtime="20190515 08:32:41.847"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.848">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.847" status="PASS" endtime="20190515 08:32:41.849"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.849" status="PASS" endtime="20190515 08:32:41.850"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.851">${re} = PASS</msg>
<status starttime="20190515 08:32:41.843" status="PASS" endtime="20190515 08:32:41.851"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:41.853" status="PASS" endtime="20190515 08:32:41.853"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:41.854" status="PASS" endtime="20190515 08:32:41.858"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:41.859" status="PASS" endtime="20190515 08:32:41.860"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:41.860">${js} = PASS</msg>
<status starttime="20190515 08:32:41.851" status="PASS" endtime="20190515 08:32:41.860"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:41.862" status="PASS" endtime="20190515 08:32:41.863"></status>
</kw>
<status starttime="20190515 08:32:41.861" status="PASS" endtime="20190515 08:32:41.864"></status>
</kw>
<status starttime="20190515 08:32:41.833" status="PASS" endtime="20190515 08:32:41.864"></status>
</kw>
<status starttime="20190515 08:32:41.772" status="PASS" endtime="20190515 08:32:41.864"></status>
</kw>
<doc>接口名:数据统计

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 对象。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.769" status="PASS" endtime="20190515 08:32:41.864"></status>
</test>
<test id="s1-s2-s1-t12" name="get projects statistics by project id Fail With Wrong Url">
<kw name="get projects statistics by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Get Projects Statistics By Project Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.901">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:41.867" status="PASS" endtime="20190515 08:32:41.901"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.902">${bug_level} = None</msg>
<status starttime="20190515 08:32:41.901" status="PASS" endtime="20190515 08:32:41.902"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.903">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.902" status="PASS" endtime="20190515 08:32:41.903"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.903">${status_tag} = None</msg>
<status starttime="20190515 08:32:41.903" status="PASS" endtime="20190515 08:32:41.903"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.904">Set tag 'None'.</msg>
<status starttime="20190515 08:32:41.903" status="PASS" endtime="20190515 08:32:41.904"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.905">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/statistics&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/statistics&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/statistics&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:41.905" status="PASS" endtime="20190515 08:32:41.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.906">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/statistics</msg>
<status starttime="20190515 08:32:41.905" status="PASS" endtime="20190515 08:32:41.906"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:41.906">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:41.906" status="PASS" endtime="20190515 08:32:41.907"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:41.907" status="PASS" endtime="20190515 08:32:41.907"></status>
</kw>
<status starttime="20190515 08:32:41.904" status="PASS" endtime="20190515 08:32:41.907"></status>
</kw>
<status starttime="20190515 08:32:41.901" status="PASS" endtime="20190515 08:32:41.908"></status>
</kw>
<status starttime="20190515 08:32:41.867" status="PASS" endtime="20190515 08:32:41.908"></status>
</kw>
<doc>接口名:数据统计

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.865" status="PASS" endtime="20190515 08:32:41.908"></status>
</test>
<test id="s1-s2-s1-t13" name="put projects dot datas camera info by project id dot data id camera info id Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reg_code=${reg_code}</arg>
<arg>coordinate=${coordinate}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.910">${essential_params} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}</msg>
<status starttime="20190515 08:32:41.909" status="PASS" endtime="20190515 08:32:41.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.910">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:41.910" status="PASS" endtime="20190515 08:32:41.910"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas camera info by project id dot data id camera info id success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:41.912">@{results} = [ {'reg_code': '7777777', 'coordinate': '12,0;12,900'} ]</msg>
<status starttime="20190515 08:32:41.911" status="PASS" endtime="20190515 08:32:41.912"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas camera info by project id dot data id camera info id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.063">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:41.913" status="PASS" endtime="20190515 08:32:42.063"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.066">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.065" status="PASS" endtime="20190515 08:32:42.066"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.068">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.066" status="PASS" endtime="20190515 08:32:42.068"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.069">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.068" status="PASS" endtime="20190515 08:32:42.069"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.071">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.070" status="PASS" endtime="20190515 08:32:42.071"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.074"></msg>
<status starttime="20190515 08:32:42.073" status="PASS" endtime="20190515 08:32:42.074"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.075">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:42.074" status="PASS" endtime="20190515 08:32:42.075"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.077">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.076" status="PASS" endtime="20190515 08:32:42.077"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.078" status="PASS" endtime="20190515 08:32:42.079"></status>
</kw>
<status starttime="20190515 08:32:42.071" status="PASS" endtime="20190515 08:32:42.079"></status>
</kw>
<status starttime="20190515 08:32:42.064" status="PASS" endtime="20190515 08:32:42.079"></status>
</kw>
<status starttime="20190515 08:32:41.913" status="PASS" endtime="20190515 08:32:42.080"></status>
</kw>
<status starttime="20190515 08:32:41.912" status="PASS" endtime="20190515 08:32:42.080"></status>
</kw>
<status starttime="20190515 08:32:41.912" status="PASS" endtime="20190515 08:32:42.080"></status>
</kw>
<status starttime="20190515 08:32:41.912" status="PASS" endtime="20190515 08:32:42.080"></status>
</kw>
<status starttime="20190515 08:32:41.910" status="PASS" endtime="20190515 08:32:42.080"></status>
</kw>
<doc>接口名:添加/修改相机信息

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:41.908" status="PASS" endtime="20190515 08:32:42.081"></status>
</test>
<test id="s1-s2-s1-t14" name="put projects dot datas camera info by project id dot data id camera info id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reg_code=${reg_code}</arg>
<arg>coordinate=${coordinate}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.085">${essential_params} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}</msg>
<status starttime="20190515 08:32:42.084" status="PASS" endtime="20190515 08:32:42.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.087">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:42.086" status="PASS" endtime="20190515 08:32:42.087"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas camera info by project id dot data id camera info id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.091">@{results} = [ {'reg_code': '7777777', 'coordinate': '12,0;12,900'} ]</msg>
<status starttime="20190515 08:32:42.089" status="PASS" endtime="20190515 08:32:42.091"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas camera info by project id dot data id camera info id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.114">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:42.092" status="PASS" endtime="20190515 08:32:42.114"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.115">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.115" status="PASS" endtime="20190515 08:32:42.115"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.116">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.116" status="PASS" endtime="20190515 08:32:42.116"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.116">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.116" status="PASS" endtime="20190515 08:32:42.116"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.116">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.116" status="PASS" endtime="20190515 08:32:42.116"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.117">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/f0d930fa76a811e9881d0242c0a8b002&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D/camera_infos/f0d930fa76a811e9881d0242c0a8b002&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/f0d930fa76a811e9881d0242c0a8b002&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:42.117" status="PASS" endtime="20190515 08:32:42.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.117">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:42.117" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.118">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.118" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.118" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.117" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.115" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.091" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.091" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.091" status="PASS" endtime="20190515 08:32:42.118"></status>
</kw>
<status starttime="20190515 08:32:42.091" status="PASS" endtime="20190515 08:32:42.119"></status>
</kw>
<status starttime="20190515 08:32:42.087" status="PASS" endtime="20190515 08:32:42.119"></status>
</kw>
<doc>接口名:添加/修改相机信息

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.082" status="PASS" endtime="20190515 08:32:42.119"></status>
</test>
<test id="s1-s2-s1-t15" name="put projects dot datas camera info by project id dot data id camera info id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reg_code=${reg_code_422}</arg>
<arg>coordinate=${coordinate_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.120">${essential_params} = {'reg_code': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'coordinate': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:42.119" status="PASS" endtime="20190515 08:32:42.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.120">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:42.120" status="PASS" endtime="20190515 08:32:42.120"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas camera info by project id dot data id camera info id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.121">@{results} = [ {'reg_code': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'coordinate': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']} ]</msg>
<status starttime="20190515 08:32:42.121" status="PASS" endtime="20190515 08:32:42.121"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'reg_code': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'coordinate': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas camera info by project id dot data id camera info id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.497">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:42.122" status="PASS" endtime="20190515 08:32:42.497"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.500">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.499" status="PASS" endtime="20190515 08:32:42.500"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.500">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.500" status="PASS" endtime="20190515 08:32:42.500"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.501">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.500" status="PASS" endtime="20190515 08:32:42.501"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.501">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.501" status="PASS" endtime="20190515 08:32:42.501"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.501">${re} = FAIL</msg>
<status starttime="20190515 08:32:42.501" status="PASS" endtime="20190515 08:32:42.501"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.502">${js} = FAIL</msg>
<status starttime="20190515 08:32:42.501" status="PASS" endtime="20190515 08:32:42.502"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.502">{"message": "Validation Failed", "errors": [{"field": "reg_code", "code": "invalid"}, {"field": "coordinate", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:42.502" status="PASS" endtime="20190515 08:32:42.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.503">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:42.503" status="PASS" endtime="20190515 08:32:42.503"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.503">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.503" status="PASS" endtime="20190515 08:32:42.503"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.503" status="PASS" endtime="20190515 08:32:42.503"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:42.503">${re} = PASS</msg>
<status starttime="20190515 08:32:42.502" status="PASS" endtime="20190515 08:32:42.504"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:42.504" status="PASS" endtime="20190515 08:32:42.504"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:42.504" status="PASS" endtime="20190515 08:32:42.505"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:42.505" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:42.506">${js} = PASS</msg>
<status starttime="20190515 08:32:42.504" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:42.506" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<status starttime="20190515 08:32:42.506" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<status starttime="20190515 08:32:42.498" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<status starttime="20190515 08:32:42.121" status="PASS" endtime="20190515 08:32:42.506"></status>
</kw>
<status starttime="20190515 08:32:42.121" status="PASS" endtime="20190515 08:32:42.507"></status>
</kw>
<status starttime="20190515 08:32:42.121" status="PASS" endtime="20190515 08:32:42.507"></status>
</kw>
<status starttime="20190515 08:32:42.121" status="PASS" endtime="20190515 08:32:42.507"></status>
</kw>
<status starttime="20190515 08:32:42.120" status="PASS" endtime="20190515 08:32:42.507"></status>
</kw>
<doc>接口名:添加/修改相机信息

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.119" status="PASS" endtime="20190515 08:32:42.507"></status>
</test>
<test id="s1-s2-s1-t16" name="patch projects dot datas status by project id dot data id Success">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.508">${status} = 1</msg>
<status starttime="20190515 08:32:42.508" status="PASS" endtime="20190515 08:32:42.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.508">${essential_params} = {'status': 1}</msg>
<status starttime="20190515 08:32:42.508" status="PASS" endtime="20190515 08:32:42.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.509">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:42.509" status="PASS" endtime="20190515 08:32:42.509"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>patch projects dot datas status by project id dot data id success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.510">@{results} = [ {'status': 1} ]</msg>
<status starttime="20190515 08:32:42.509" status="PASS" endtime="20190515 08:32:42.510"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': 1}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="patch projects dot datas status by project id dot data id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Patch Projects Dot Datas Status By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.663">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:42.510" status="PASS" endtime="20190515 08:32:42.663"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.666">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.665" status="PASS" endtime="20190515 08:32:42.666"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.667">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.666" status="PASS" endtime="20190515 08:32:42.668"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.669">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.668" status="PASS" endtime="20190515 08:32:42.669"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.671">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.670" status="PASS" endtime="20190515 08:32:42.671"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.675"></msg>
<status starttime="20190515 08:32:42.674" status="PASS" endtime="20190515 08:32:42.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.676">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/status</msg>
<status starttime="20190515 08:32:42.675" status="PASS" endtime="20190515 08:32:42.676"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.678">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.677" status="PASS" endtime="20190515 08:32:42.678"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.678" status="PASS" endtime="20190515 08:32:42.679"></status>
</kw>
<status starttime="20190515 08:32:42.671" status="PASS" endtime="20190515 08:32:42.680"></status>
</kw>
<status starttime="20190515 08:32:42.664" status="PASS" endtime="20190515 08:32:42.680"></status>
</kw>
<status starttime="20190515 08:32:42.510" status="PASS" endtime="20190515 08:32:42.680"></status>
</kw>
<status starttime="20190515 08:32:42.510" status="PASS" endtime="20190515 08:32:42.681"></status>
</kw>
<status starttime="20190515 08:32:42.510" status="PASS" endtime="20190515 08:32:42.681"></status>
</kw>
<status starttime="20190515 08:32:42.510" status="PASS" endtime="20190515 08:32:42.681"></status>
</kw>
<status starttime="20190515 08:32:42.509" status="PASS" endtime="20190515 08:32:42.681"></status>
</kw>
<doc>接口名:变更中杆实施记录状态

请求方式:Patch

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.507" status="PASS" endtime="20190515 08:32:42.682"></status>
</test>
<test id="s1-s2-s1-t17" name="patch projects dot datas status by project id dot data id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.686">${essential_params} = {'status': '1'}</msg>
<status starttime="20190515 08:32:42.684" status="PASS" endtime="20190515 08:32:42.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.687">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:42.686" status="PASS" endtime="20190515 08:32:42.687"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>patch projects dot datas status by project id dot data id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.691">@{results} = [ {'status': '1'} ]</msg>
<status starttime="20190515 08:32:42.690" status="PASS" endtime="20190515 08:32:42.691"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="patch projects dot datas status by project id dot data id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Patch Projects Dot Datas Status By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.723">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:42.695" status="PASS" endtime="20190515 08:32:42.723"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.724">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.723" status="PASS" endtime="20190515 08:32:42.724"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.724">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.724" status="PASS" endtime="20190515 08:32:42.724"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.724">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.724" status="PASS" endtime="20190515 08:32:42.724"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.725">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.724" status="PASS" endtime="20190515 08:32:42.725"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.725">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]/status&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PATCH&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D/status&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]/status&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:42.725" status="PASS" endtime="20190515 08:32:42.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.726">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]/status</msg>
<status starttime="20190515 08:32:42.726" status="PASS" endtime="20190515 08:32:42.726"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.726">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.726" status="PASS" endtime="20190515 08:32:42.726"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.726" status="PASS" endtime="20190515 08:32:42.726"></status>
</kw>
<status starttime="20190515 08:32:42.725" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.723" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.693" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.692" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.692" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.691" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<status starttime="20190515 08:32:42.688" status="PASS" endtime="20190515 08:32:42.727"></status>
</kw>
<doc>接口名:变更中杆实施记录状态

请求方式:Patch

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.683" status="PASS" endtime="20190515 08:32:42.727"></status>
</test>
<test id="s1-s2-s1-t18" name="patch projects dot datas status by project id dot data id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.728">${essential_params} = {'status': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:42.728" status="PASS" endtime="20190515 08:32:42.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.728">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:42.728" status="PASS" endtime="20190515 08:32:42.728"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>patch projects dot datas status by project id dot data id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.729">@{results} = [ {'status': 'ThisIsRobot'} ]</msg>
<status starttime="20190515 08:32:42.729" status="PASS" endtime="20190515 08:32:42.729"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="patch projects dot datas status by project id dot data id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Patch Projects Dot Datas Status By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.851">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:42.730" status="PASS" endtime="20190515 08:32:42.851"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.854">${bug_level} = None</msg>
<status starttime="20190515 08:32:42.853" status="PASS" endtime="20190515 08:32:42.854"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.856">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.855" status="PASS" endtime="20190515 08:32:42.856"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.857">${status_tag} = None</msg>
<status starttime="20190515 08:32:42.856" status="PASS" endtime="20190515 08:32:42.857"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.859">Set tag 'None'.</msg>
<status starttime="20190515 08:32:42.858" status="PASS" endtime="20190515 08:32:42.859"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.860">${re} = FAIL</msg>
<status starttime="20190515 08:32:42.860" status="PASS" endtime="20190515 08:32:42.860"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.861">${js} = FAIL</msg>
<status starttime="20190515 08:32:42.861" status="PASS" endtime="20190515 08:32:42.861"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.864">{"message": "Validation Failed", "errors": [{"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:42.863" status="PASS" endtime="20190515 08:32:42.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.866">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/status</msg>
<status starttime="20190515 08:32:42.865" status="PASS" endtime="20190515 08:32:42.866"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:42.867">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:42.866" status="PASS" endtime="20190515 08:32:42.868"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:42.868" status="PASS" endtime="20190515 08:32:42.869"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:42.870">${re} = PASS</msg>
<status starttime="20190515 08:32:42.862" status="PASS" endtime="20190515 08:32:42.870"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:42.871" status="PASS" endtime="20190515 08:32:42.872"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:42.873" status="PASS" endtime="20190515 08:32:42.879"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:42.880" status="PASS" endtime="20190515 08:32:42.881"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:42.881">${js} = PASS</msg>
<status starttime="20190515 08:32:42.870" status="PASS" endtime="20190515 08:32:42.881"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:42.883" status="PASS" endtime="20190515 08:32:42.883"></status>
</kw>
<status starttime="20190515 08:32:42.882" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.852" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.730" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.729" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.729" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.729" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<status starttime="20190515 08:32:42.728" status="PASS" endtime="20190515 08:32:42.884"></status>
</kw>
<doc>接口名:变更中杆实施记录状态

请求方式:Patch

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.727" status="PASS" endtime="20190515 08:32:42.885"></status>
</test>
<test id="s1-s2-s1-t19" name="put projects dot datas by project id dot data id Success">
<kw name="make camera infos">
<assign>
<var>@{camera_infos}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${camera_num}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.888">${camera_num} = 1</msg>
<status starttime="20190515 08:32:42.888" status="PASS" endtime="20190515 08:32:42.888"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>1</arg>
</arguments>
<assign>
<var>${power_type}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.889">${power_type} = 1</msg>
<status starttime="20190515 08:32:42.888" status="PASS" endtime="20190515 08:32:42.889"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>start=0</arg>
<arg>end=3</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.890">${i} = 065</msg>
<status starttime="20190515 08:32:42.889" status="PASS" endtime="20190515 08:32:42.890"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>end=3</arg>
</arguments>
<assign>
<var>${j}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.890">${j} = 314</msg>
<status starttime="20190515 08:32:42.890" status="PASS" endtime="20190515 08:32:42.890"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${i}-${j}</arg>
</arguments>
<assign>
<var>${spot_nums}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.891">${spot_nums} = 065-314</msg>
<status starttime="20190515 08:32:42.891" status="PASS" endtime="20190515 08:32:42.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>brand_name=1</arg>
<arg>camera_num=${camera_num}</arg>
<arg>brand_model=康佳ATP-13</arg>
<arg>power_type=${power_type}</arg>
<arg>spot_nums=${spot_nums}</arg>
<arg>brand_short=kj</arg>
</arguments>
<assign>
<var>${camera_info}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.892">${camera_info} = {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '065-314', 'brand_short': 'kj'}</msg>
<status starttime="20190515 08:32:42.891" status="PASS" endtime="20190515 08:32:42.892"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${camera_info}</arg>
</arguments>
<assign>
<var>@{camera_infos}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.893">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '065-314', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:42.892" status="PASS" endtime="20190515 08:32:42.893"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:42.893">@{camera_infos} = [ {'brand_name': '1', 'camera_num': 1, 'brand_model': '康佳ATP-13', 'power_type': 1, 'spot_nums': '065-314', 'brand_short': 'kj'} ]</msg>
<status starttime="20190515 08:32:42.887" status="PASS" endtime="20190515 08:32:42.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=@{camera_infos}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.894">${essential_params} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_...</msg>
<status starttime="20190515 08:32:42.893" status="PASS" endtime="20190515 08:32:42.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>remark=${remark}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.895">${unessential_params} = {'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:42.894" status="PASS" endtime="20190515 08:32:42.895"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas by project id dot data id success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:42.897">params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_short': 'kj', 'spot_nums': '065-314', 'brand_name': '1'}], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']}
params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_short': 'kj', 'spot_nums': '065-314', 'brand_name': '1'}], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:42.897">@{results} = [ {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'bran...</msg>
<status starttime="20190515 08:32:42.896" status="PASS" endtime="20190515 08:32:42.897"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.110">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:42.898" status="PASS" endtime="20190515 08:32:43.111"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.117">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.112" status="PASS" endtime="20190515 08:32:43.117"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.119">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.118" status="PASS" endtime="20190515 08:32:43.119"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.120">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.119" status="PASS" endtime="20190515 08:32:43.121"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.122">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.121" status="PASS" endtime="20190515 08:32:43.122"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.125"></msg>
<status starttime="20190515 08:32:43.124" status="PASS" endtime="20190515 08:32:43.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.126">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:43.125" status="PASS" endtime="20190515 08:32:43.126"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.128">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.127" status="PASS" endtime="20190515 08:32:43.128"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.129" status="PASS" endtime="20190515 08:32:43.130"></status>
</kw>
<status starttime="20190515 08:32:43.123" status="PASS" endtime="20190515 08:32:43.130"></status>
</kw>
<status starttime="20190515 08:32:43.111" status="PASS" endtime="20190515 08:32:43.131"></status>
</kw>
<status starttime="20190515 08:32:42.897" status="PASS" endtime="20190515 08:32:43.131"></status>
</kw>
<status starttime="20190515 08:32:42.897" status="PASS" endtime="20190515 08:32:43.131"></status>
</kw>
<status starttime="20190515 08:32:42.897" status="PASS" endtime="20190515 08:32:43.131"></status>
</kw>
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [{'brand_model': '康佳ATP-13', 'camera_num': 1, 'power_type': 1, 'brand_..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.254">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:43.135" status="PASS" endtime="20190515 08:32:43.254"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.257">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.256" status="PASS" endtime="20190515 08:32:43.257"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.258">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.257" status="PASS" endtime="20190515 08:32:43.259"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.260">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.259" status="PASS" endtime="20190515 08:32:43.260"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.262">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.261" status="PASS" endtime="20190515 08:32:43.262"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.264"></msg>
<status starttime="20190515 08:32:43.264" status="PASS" endtime="20190515 08:32:43.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.266">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:43.265" status="PASS" endtime="20190515 08:32:43.266"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.268">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.267" status="PASS" endtime="20190515 08:32:43.268"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.268" status="PASS" endtime="20190515 08:32:43.269"></status>
</kw>
<status starttime="20190515 08:32:43.262" status="PASS" endtime="20190515 08:32:43.270"></status>
</kw>
<status starttime="20190515 08:32:43.254" status="PASS" endtime="20190515 08:32:43.270"></status>
</kw>
<status starttime="20190515 08:32:43.133" status="PASS" endtime="20190515 08:32:43.270"></status>
</kw>
<status starttime="20190515 08:32:43.132" status="PASS" endtime="20190515 08:32:43.271"></status>
</kw>
<status starttime="20190515 08:32:43.131" status="PASS" endtime="20190515 08:32:43.271"></status>
</kw>
<status starttime="20190515 08:32:42.897" status="PASS" endtime="20190515 08:32:43.271"></status>
</kw>
<status starttime="20190515 08:32:42.895" status="PASS" endtime="20190515 08:32:43.271"></status>
</kw>
<doc>接口名:修改勘探记录

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:42.886" status="PASS" endtime="20190515 08:32:43.272"></status>
</test>
<test id="s1-s2-s1-t20" name="put projects dot datas by project id dot data id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=@{camera_infos}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.278">${essential_params} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': []}</msg>
<status starttime="20190515 08:32:43.276" status="PASS" endtime="20190515 08:32:43.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>remark=${remark}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.280">${unessential_params} = {'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:43.279" status="PASS" endtime="20190515 08:32:43.280"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas by project id dot data id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.283">params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']}
params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:43.284">@{results} = [ {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140d...</msg>
<status starttime="20190515 08:32:43.282" status="PASS" endtime="20190515 08:32:43.284"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.313">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:43.287" status="PASS" endtime="20190515 08:32:43.313"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.314">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.313" status="PASS" endtime="20190515 08:32:43.314"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.315">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.314" status="PASS" endtime="20190515 08:32:43.315"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.315">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.315" status="PASS" endtime="20190515 08:32:43.315"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.316">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.315" status="PASS" endtime="20190515 08:32:43.316"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.317">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:43.317" status="PASS" endtime="20190515 08:32:43.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.318">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]</msg>
<status starttime="20190515 08:32:43.317" status="PASS" endtime="20190515 08:32:43.318"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.318">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.318" status="PASS" endtime="20190515 08:32:43.319"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.319" status="PASS" endtime="20190515 08:32:43.319"></status>
</kw>
<status starttime="20190515 08:32:43.316" status="PASS" endtime="20190515 08:32:43.319"></status>
</kw>
<status starttime="20190515 08:32:43.313" status="PASS" endtime="20190515 08:32:43.320"></status>
</kw>
<status starttime="20190515 08:32:43.285" status="PASS" endtime="20190515 08:32:43.320"></status>
</kw>
<status starttime="20190515 08:32:43.285" status="PASS" endtime="20190515 08:32:43.320"></status>
</kw>
<status starttime="20190515 08:32:43.284" status="PASS" endtime="20190515 08:32:43.320"></status>
</kw>
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': [], 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.343">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:43.321" status="PASS" endtime="20190515 08:32:43.344"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.345">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.344" status="PASS" endtime="20190515 08:32:43.345"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.345">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.345" status="PASS" endtime="20190515 08:32:43.346"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.346">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.346" status="PASS" endtime="20190515 08:32:43.346"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.347">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.346" status="PASS" endtime="20190515 08:32:43.347"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.349">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:43.348" status="PASS" endtime="20190515 08:32:43.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.349">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]</msg>
<status starttime="20190515 08:32:43.349" status="PASS" endtime="20190515 08:32:43.349"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.350">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.350" status="PASS" endtime="20190515 08:32:43.350"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.350" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.347" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.344" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.320" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.320" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.320" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.284" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<status starttime="20190515 08:32:43.281" status="PASS" endtime="20190515 08:32:43.351"></status>
</kw>
<doc>接口名:修改勘探记录

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:43.273" status="PASS" endtime="20190515 08:32:43.352"></status>
</test>
<test id="s1-s2-s1-t21" name="put projects dot datas by project id dot data id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon_422}</arg>
<arg>lat=${lat_422}</arg>
<arg>address=${address_422}</arg>
<arg>poling_type=${poling_type_422}</arg>
<arg>height=${height_422}</arg>
<arg>cross_arm_num=${cross_arm_num_422}</arg>
<arg>camera_infos=${camera_infos_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.354">${essential_params} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he...</msg>
<status starttime="20190515 08:32:43.353" status="PASS" endtime="20190515 08:32:43.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo_422}</arg>
<arg>remark=${remark_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.355">${unessential_params} = {'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<status starttime="20190515 08:32:43.354" status="PASS" endtime="20190515 08:32:43.355"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas by project id dot data id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.356">params:{'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'height': 'ThisIsRobot', 'cross_arm_num': 'ThisIsRobot', 'camera_infos': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'height': 'ThisIsRobot', 'cross_arm_num': 'ThisIsRobot', 'camera_infos': 'ThisIsRobot', 'reuse_pole_photo': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'remark': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}</msg>
<msg level="INFO" timestamp="20190515 08:32:43.356">@{results} = [ {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', '...</msg>
<status starttime="20190515 08:32:43.356" status="PASS" endtime="20190515 08:32:43.357"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.443">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:43.358" status="PASS" endtime="20190515 08:32:43.443"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.446">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.445" status="PASS" endtime="20190515 08:32:43.446"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.447">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.446" status="PASS" endtime="20190515 08:32:43.448"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.449">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.448" status="PASS" endtime="20190515 08:32:43.449"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.451">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.450" status="PASS" endtime="20190515 08:32:43.451"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.452">${re} = FAIL</msg>
<status starttime="20190515 08:32:43.451" status="PASS" endtime="20190515 08:32:43.452"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.453">${js} = FAIL</msg>
<status starttime="20190515 08:32:43.453" status="PASS" endtime="20190515 08:32:43.453"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.456">{"message": "Validation Failed", "errors": [{"field": "lon", "code": "invalid"}, {"field": "lat", "code": "invalid"}, {"field": "poling_type", "code": "invalid"}, {"field": "height", "code": "invalid"}, {"field": "cross_arm_num", "code": "invalid"}, {"field": "camera_infos", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:43.455" status="PASS" endtime="20190515 08:32:43.457"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.458">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:43.457" status="PASS" endtime="20190515 08:32:43.459"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.460">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.459" status="PASS" endtime="20190515 08:32:43.460"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.461" status="PASS" endtime="20190515 08:32:43.462"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:43.462">${re} = PASS</msg>
<status starttime="20190515 08:32:43.454" status="PASS" endtime="20190515 08:32:43.462"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:43.464" status="PASS" endtime="20190515 08:32:43.465"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:43.465" status="PASS" endtime="20190515 08:32:43.471"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:43.472" status="PASS" endtime="20190515 08:32:43.472"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:43.473">${js} = PASS</msg>
<status starttime="20190515 08:32:43.463" status="PASS" endtime="20190515 08:32:43.473"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:43.474" status="PASS" endtime="20190515 08:32:43.475"></status>
</kw>
<status starttime="20190515 08:32:43.473" status="PASS" endtime="20190515 08:32:43.475"></status>
</kw>
<status starttime="20190515 08:32:43.443" status="PASS" endtime="20190515 08:32:43.475"></status>
</kw>
<status starttime="20190515 08:32:43.357" status="PASS" endtime="20190515 08:32:43.475"></status>
</kw>
<status starttime="20190515 08:32:43.357" status="PASS" endtime="20190515 08:32:43.476"></status>
</kw>
<status starttime="20190515 08:32:43.357" status="PASS" endtime="20190515 08:32:43.476"></status>
</kw>
<kw name="${kwargs} = {'lon': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lat': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'poling_type': 'ThisIsRobot', 'he..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.587">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:43.478" status="PASS" endtime="20190515 08:32:43.587"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.590">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.589" status="PASS" endtime="20190515 08:32:43.590"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.591">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.590" status="PASS" endtime="20190515 08:32:43.592"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.593">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.592" status="PASS" endtime="20190515 08:32:43.593"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.595">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.594" status="PASS" endtime="20190515 08:32:43.595"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.596">${re} = FAIL</msg>
<status starttime="20190515 08:32:43.595" status="PASS" endtime="20190515 08:32:43.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.597">${js} = FAIL</msg>
<status starttime="20190515 08:32:43.597" status="PASS" endtime="20190515 08:32:43.597"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.600">{"message": "Validation Failed", "errors": [{"field": "lon", "code": "invalid"}, {"field": "lat", "code": "invalid"}, {"field": "poling_type", "code": "invalid"}, {"field": "height", "code": "invalid"}, {"field": "cross_arm_num", "code": "invalid"}, {"field": "camera_infos", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:43.599" status="PASS" endtime="20190515 08:32:43.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.601">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:43.601" status="PASS" endtime="20190515 08:32:43.602"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.603">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.602" status="PASS" endtime="20190515 08:32:43.603"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.604" status="PASS" endtime="20190515 08:32:43.605"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:43.605">${re} = PASS</msg>
<status starttime="20190515 08:32:43.598" status="PASS" endtime="20190515 08:32:43.605"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:43.607" status="PASS" endtime="20190515 08:32:43.609"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:43.609" status="PASS" endtime="20190515 08:32:43.615"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:43.616" status="PASS" endtime="20190515 08:32:43.617"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:43.617">${js} = PASS</msg>
<status starttime="20190515 08:32:43.606" status="PASS" endtime="20190515 08:32:43.617"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:43.619" status="PASS" endtime="20190515 08:32:43.619"></status>
</kw>
<status starttime="20190515 08:32:43.618" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.587" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.477" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.476" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.476" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.357" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<status starttime="20190515 08:32:43.355" status="PASS" endtime="20190515 08:32:43.620"></status>
</kw>
<doc>接口名:修改勘探记录

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:43.352" status="PASS" endtime="20190515 08:32:43.621"></status>
</test>
<test id="s1-s2-s1-t22" name="delete projects dot datas by project id dot data id Success">
<kw name="delete projects dot datas by project id dot data id Success 204">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Delete Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.738">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:43.624" status="PASS" endtime="20190515 08:32:43.738"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.739">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.739" status="PASS" endtime="20190515 08:32:43.739"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.739">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.739" status="PASS" endtime="20190515 08:32:43.739"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.740">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.739" status="PASS" endtime="20190515 08:32:43.740"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.740">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.740" status="PASS" endtime="20190515 08:32:43.740"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.741"></msg>
<status starttime="20190515 08:32:43.740" status="PASS" endtime="20190515 08:32:43.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.741">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:43.741" status="PASS" endtime="20190515 08:32:43.741"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.741">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.741" status="PASS" endtime="20190515 08:32:43.741"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.742" status="PASS" endtime="20190515 08:32:43.742"></status>
</kw>
<status starttime="20190515 08:32:43.740" status="PASS" endtime="20190515 08:32:43.742"></status>
</kw>
<status starttime="20190515 08:32:43.738" status="PASS" endtime="20190515 08:32:43.742"></status>
</kw>
<status starttime="20190515 08:32:43.623" status="PASS" endtime="20190515 08:32:43.742"></status>
</kw>
<doc>接口名:删除勘探记录

请求方式:Delete

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:43.621" status="PASS" endtime="20190515 08:32:43.742"></status>
</test>
<test id="s1-s2-s1-t23" name="delete projects dot datas by project id dot data id Fail With Wrong Url">
<kw name="delete projects dot datas by project id dot data id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
<arg>dot_data_id=${wrong_url_id}</arg>
</arguments>
<kw name="Delete Projects Dot Datas By Project Id Dot Data Id" library="dot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.769">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:43.743" status="PASS" endtime="20190515 08:32:43.769"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.771">${bug_level} = None</msg>
<status starttime="20190515 08:32:43.770" status="PASS" endtime="20190515 08:32:43.771"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.772">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.771" status="PASS" endtime="20190515 08:32:43.772"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.773">${status_tag} = None</msg>
<status starttime="20190515 08:32:43.772" status="PASS" endtime="20190515 08:32:43.773"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.774">Set tag 'None'.</msg>
<status starttime="20190515 08:32:43.773" status="PASS" endtime="20190515 08:32:43.774"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.775">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;DELETE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/dot_datas/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/dot_datas/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:43.775" status="PASS" endtime="20190515 08:32:43.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.776">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/dot_datas/[12345678987654321]</msg>
<status starttime="20190515 08:32:43.776" status="PASS" endtime="20190515 08:32:43.777"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:43.777">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:43.777" status="PASS" endtime="20190515 08:32:43.778"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:43.778" status="PASS" endtime="20190515 08:32:43.778"></status>
</kw>
<status starttime="20190515 08:32:43.774" status="PASS" endtime="20190515 08:32:43.779"></status>
</kw>
<status starttime="20190515 08:32:43.769" status="PASS" endtime="20190515 08:32:43.779"></status>
</kw>
<status starttime="20190515 08:32:43.743" status="PASS" endtime="20190515 08:32:43.779"></status>
</kw>
<doc>接口名:删除勘探记录

请求方式:Delete

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:43.742" status="PASS" endtime="20190515 08:32:43.779"></status>
</test>
<kw name="Logout" type="teardown" library="dot">
<status starttime="20190515 08:32:43.782" status="PASS" endtime="20190515 08:32:43.819"></status>
</kw>
<doc>server_dot</doc>
<status starttime="20190515 08:32:34.586" status="PASS" endtime="20190515 08:32:43.819"></status>
</suite>
<suite id="s1-s2-s2" name="Dots.Unauthorized" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_dot/dots.unauthorized.robot">
<test id="s1-s2-s2-t1" name="post projects dot datas by project id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_type=${poling_type}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=${camera_infos}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.854">${essential_params} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera'}</msg>
<status starttime="20190515 08:32:43.853" status="PASS" endtime="20190515 08:32:43.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>remark=${remark}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.855">${unessential_params} = {'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:43.854" status="PASS" endtime="20190515 08:32:43.855"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post projects dot datas by project id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:43.857">params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']}
params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:43.857">@{results} = [ {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http:...</msg>
<status starttime="20190515 08:32:43.856" status="PASS" endtime="20190515 08:32:43.857"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.273">{'remark': 'ThisIsRobot', 'camera_infos': 'robotcamera', 'address': '昂利软件园', 'cross_arm_num': '2', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'lat': '45.123', 'lon': '123.45', 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:45.273">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:43.859" status="PASS" endtime="20190515 08:32:45.273"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.274">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.273" status="PASS" endtime="20190515 08:32:45.274"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.274">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.274" status="PASS" endtime="20190515 08:32:45.274"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.275">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.274" status="PASS" endtime="20190515 08:32:45.275"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.275">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.275" status="PASS" endtime="20190515 08:32:45.275"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.276">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.276" status="PASS" endtime="20190515 08:32:45.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.277">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:45.277" status="PASS" endtime="20190515 08:32:45.277"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.277">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.277" status="PASS" endtime="20190515 08:32:45.277"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.278" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<status starttime="20190515 08:32:45.275" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<status starttime="20190515 08:32:45.273" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<status starttime="20190515 08:32:43.858" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<status starttime="20190515 08:32:43.857" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<status starttime="20190515 08:32:43.857" status="PASS" endtime="20190515 08:32:45.278"></status>
</kw>
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_type': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.292">{'remark': 'ThisIsRobot', 'camera_infos': 'robotcamera', 'address': '昂利软件园', 'cross_arm_num': '2', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'lat': '45.123', 'lon': '123.45', 'height': '2.7', 'poling_type': '1'}
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg level="INFO" timestamp="20190515 08:32:45.292">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.280" status="PASS" endtime="20190515 08:32:45.292"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.293">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.293" status="PASS" endtime="20190515 08:32:45.293"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.294">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.293" status="PASS" endtime="20190515 08:32:45.294"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.294">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.294" status="PASS" endtime="20190515 08:32:45.294"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.295">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.294" status="PASS" endtime="20190515 08:32:45.295"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.296">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.296" status="PASS" endtime="20190515 08:32:45.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.296">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas</msg>
<status starttime="20190515 08:32:45.296" status="PASS" endtime="20190515 08:32:45.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.297">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.297" status="PASS" endtime="20190515 08:32:45.297"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.297" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:45.295" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:45.292" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:45.279" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:45.279" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:45.278" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:43.857" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<status starttime="20190515 08:32:43.855" status="PASS" endtime="20190515 08:32:45.298"></status>
</kw>
<doc>接口名:添加勘探记录

请求方式:Post

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:43.851" status="PASS" endtime="20190515 08:32:45.299"></status>
</test>
<test id="s1-s2-s2-t2" name="get projects dot datas by project id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.301">${essential_params} = {}</msg>
<status starttime="20190515 08:32:45.301" status="PASS" endtime="20190515 08:32:45.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>address=${address_422}</arg>
<arg>status=${status_422}</arg>
<arg>section=${section}</arg>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>radius=${radius}</arg>
<arg>order_by=${order_by}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.302">${unessential_params} = {'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot', 'section': '1557213000,1557213112', 'lon': '123.45', 'lat': '45.123', 'radius': '1', 'order_by': 'created_time', 'pa...</msg>
<status starttime="20190515 08:32:45.301" status="PASS" endtime="20190515 08:32:45.302"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects dot datas by project id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.303">params:{'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot'}
params:{'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot', 'section': '1557213000,1557213112'}
params:{'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lon': '123.45', 'status': 'ThisIsRobot', 'section': '1557213000,1557213112'}
params:{'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lon': '123.45', 'status': 'ThisIsRobot', 'lat': '45.123', 'section': '1557213000,1557213112'}
params:{'status': 'ThisIsRobot', 'radius': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'lon': '123.45', 'section': '1557213000,1557213112', 'lat': '45.123'}
params:{'status': 'ThisIsRobot', 'radius': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '1557213000,1557213112', 'lat': '45.123'}
params:{'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '1557213000,1557213112', 'lat': '45.123'}
params:{'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '1557213000,1557213112', 'lat': '45.123'}</msg>
<msg level="INFO" timestamp="20190515 08:32:45.304">@{results} = [ {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '155721...</msg>
<status starttime="20190515 08:32:45.303" status="PASS" endtime="20190515 08:32:45.304"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.318">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.305" status="PASS" endtime="20190515 08:32:45.318"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.319">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.318" status="PASS" endtime="20190515 08:32:45.319"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.319">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.319" status="PASS" endtime="20190515 08:32:45.319"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.320">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.320" status="PASS" endtime="20190515 08:32:45.320"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.320">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.320" status="PASS" endtime="20190515 08:32:45.321"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.321">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.321" status="PASS" endtime="20190515 08:32:45.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.322">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.322" status="PASS" endtime="20190515 08:32:45.322"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.323">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.322" status="PASS" endtime="20190515 08:32:45.323"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.323" status="PASS" endtime="20190515 08:32:45.323"></status>
</kw>
<status starttime="20190515 08:32:45.321" status="PASS" endtime="20190515 08:32:45.324"></status>
</kw>
<status starttime="20190515 08:32:45.318" status="PASS" endtime="20190515 08:32:45.324"></status>
</kw>
<status starttime="20190515 08:32:45.304" status="PASS" endtime="20190515 08:32:45.324"></status>
</kw>
<status starttime="20190515 08:32:45.304" status="PASS" endtime="20190515 08:32:45.324"></status>
</kw>
<status starttime="20190515 08:32:45.304" status="PASS" endtime="20190515 08:32:45.324"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.336">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.325" status="PASS" endtime="20190515 08:32:45.336"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.337">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.337" status="PASS" endtime="20190515 08:32:45.337"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.338">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.337" status="PASS" endtime="20190515 08:32:45.338"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.338">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.338" status="PASS" endtime="20190515 08:32:45.338"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.339">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.338" status="PASS" endtime="20190515 08:32:45.339"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.340">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.340" status="PASS" endtime="20190515 08:32:45.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.340">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.340" status="PASS" endtime="20190515 08:32:45.340"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.341">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.341" status="PASS" endtime="20190515 08:32:45.341"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.341" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<status starttime="20190515 08:32:45.339" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<status starttime="20190515 08:32:45.336" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<status starttime="20190515 08:32:45.324" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<status starttime="20190515 08:32:45.324" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<status starttime="20190515 08:32:45.324" status="PASS" endtime="20190515 08:32:45.342"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.358">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.343" status="PASS" endtime="20190515 08:32:45.358"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.359">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.359" status="PASS" endtime="20190515 08:32:45.359"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.360">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.359" status="PASS" endtime="20190515 08:32:45.360"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.360">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.360" status="PASS" endtime="20190515 08:32:45.361"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.361">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.361" status="PASS" endtime="20190515 08:32:45.361"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.362">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.362" status="PASS" endtime="20190515 08:32:45.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.363">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.362" status="PASS" endtime="20190515 08:32:45.363"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.363">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.363" status="PASS" endtime="20190515 08:32:45.363"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.364" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<status starttime="20190515 08:32:45.361" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<status starttime="20190515 08:32:45.358" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<status starttime="20190515 08:32:45.343" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<status starttime="20190515 08:32:45.342" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<status starttime="20190515 08:32:45.342" status="PASS" endtime="20190515 08:32:45.364"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.377">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.366" status="PASS" endtime="20190515 08:32:45.377"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.378">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.377" status="PASS" endtime="20190515 08:32:45.378"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.378">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.378" status="PASS" endtime="20190515 08:32:45.378"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.379">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.379" status="PASS" endtime="20190515 08:32:45.379"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.380">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.379" status="PASS" endtime="20190515 08:32:45.380"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.381">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.380" status="PASS" endtime="20190515 08:32:45.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.381">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.381" status="PASS" endtime="20190515 08:32:45.381"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.382">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.381" status="PASS" endtime="20190515 08:32:45.382"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.382" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<status starttime="20190515 08:32:45.380" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<status starttime="20190515 08:32:45.377" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<status starttime="20190515 08:32:45.365" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<status starttime="20190515 08:32:45.365" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<status starttime="20190515 08:32:45.364" status="PASS" endtime="20190515 08:32:45.383"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.395">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.385" status="PASS" endtime="20190515 08:32:45.395"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.396">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.396" status="PASS" endtime="20190515 08:32:45.396"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.397">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.396" status="PASS" endtime="20190515 08:32:45.397"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.397">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.397" status="PASS" endtime="20190515 08:32:45.397"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.398">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.397" status="PASS" endtime="20190515 08:32:45.398"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.399">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.399" status="PASS" endtime="20190515 08:32:45.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.399">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.399" status="PASS" endtime="20190515 08:32:45.400"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.400">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.400" status="PASS" endtime="20190515 08:32:45.400"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.400" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<status starttime="20190515 08:32:45.398" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<status starttime="20190515 08:32:45.395" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<status starttime="20190515 08:32:45.384" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<status starttime="20190515 08:32:45.383" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<status starttime="20190515 08:32:45.383" status="PASS" endtime="20190515 08:32:45.401"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.415">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.402" status="PASS" endtime="20190515 08:32:45.415"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.416">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.415" status="PASS" endtime="20190515 08:32:45.416"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.416">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.416" status="PASS" endtime="20190515 08:32:45.417"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.417">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.417" status="PASS" endtime="20190515 08:32:45.417"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.418">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.417" status="PASS" endtime="20190515 08:32:45.418"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.419">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.418" status="PASS" endtime="20190515 08:32:45.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.420">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.419" status="PASS" endtime="20190515 08:32:45.420"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.420">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.420" status="PASS" endtime="20190515 08:32:45.420"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.420" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<status starttime="20190515 08:32:45.418" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<status starttime="20190515 08:32:45.415" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<status starttime="20190515 08:32:45.402" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<status starttime="20190515 08:32:45.401" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<status starttime="20190515 08:32:45.401" status="PASS" endtime="20190515 08:32:45.421"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.435">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.423" status="PASS" endtime="20190515 08:32:45.435"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.436">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.435" status="PASS" endtime="20190515 08:32:45.436"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.436">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.436" status="PASS" endtime="20190515 08:32:45.437"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.437">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.437" status="PASS" endtime="20190515 08:32:45.437"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.438">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.437" status="PASS" endtime="20190515 08:32:45.438"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.439">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.438" status="PASS" endtime="20190515 08:32:45.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.439">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.439" status="PASS" endtime="20190515 08:32:45.439"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.440">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.439" status="PASS" endtime="20190515 08:32:45.440"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.440" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<status starttime="20190515 08:32:45.438" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<status starttime="20190515 08:32:45.435" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<status starttime="20190515 08:32:45.422" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<status starttime="20190515 08:32:45.422" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<status starttime="20190515 08:32:45.421" status="PASS" endtime="20190515 08:32:45.441"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.455">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.442" status="PASS" endtime="20190515 08:32:45.455"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.456">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.455" status="PASS" endtime="20190515 08:32:45.456"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.456">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.456" status="PASS" endtime="20190515 08:32:45.456"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.457">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.457" status="PASS" endtime="20190515 08:32:45.457"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.459">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.457" status="PASS" endtime="20190515 08:32:45.459"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.460">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.460" status="PASS" endtime="20190515 08:32:45.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.460">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.460" status="PASS" endtime="20190515 08:32:45.461"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.461">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.461" status="PASS" endtime="20190515 08:32:45.461"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.461" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<status starttime="20190515 08:32:45.459" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<status starttime="20190515 08:32:45.455" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<status starttime="20190515 08:32:45.442" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<status starttime="20190515 08:32:45.441" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<status starttime="20190515 08:32:45.441" status="PASS" endtime="20190515 08:32:45.462"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': 'ThisIsRobot', 'radius': '1', 'page_num': '1', 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'order_by': 'created_time', 'lon': '123.45', 'section': '15572130..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects dot datas by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.476">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.463" status="PASS" endtime="20190515 08:32:45.476"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.477">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.477" status="PASS" endtime="20190515 08:32:45.477"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.478">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.477" status="PASS" endtime="20190515 08:32:45.478"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.478">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.478" status="PASS" endtime="20190515 08:32:45.479"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.479">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.479" status="PASS" endtime="20190515 08:32:45.479"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.480">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.480" status="PASS" endtime="20190515 08:32:45.480"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.481">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas?order_by=created_time&amp;status=ThisIsRobot&amp;radius=1&amp;page_num=1&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;address=ThisIsRobot&amp;lon=123.45&amp;page_size=20&amp;lat=45.123&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:45.480" status="PASS" endtime="20190515 08:32:45.481"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.481">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.481" status="PASS" endtime="20190515 08:32:45.481"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.482" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.479" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.476" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.463" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.462" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.462" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.304" status="PASS" endtime="20190515 08:32:45.482"></status>
</kw>
<status starttime="20190515 08:32:45.302" status="PASS" endtime="20190515 08:32:45.483"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装列表

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.299" status="PASS" endtime="20190515 08:32:45.483"></status>
</test>
<test id="s1-s2-s2-t3" name="get projects dot datas by project id dot data id Fail Without Login">
<kw name="get projects dot datas by project id dot data id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas By Project Id Dot Data Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.497">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.485" status="PASS" endtime="20190515 08:32:45.497"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.498">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.497" status="PASS" endtime="20190515 08:32:45.498"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.498">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.498" status="PASS" endtime="20190515 08:32:45.498"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.500">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.499" status="PASS" endtime="20190515 08:32:45.500"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.500">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.500" status="PASS" endtime="20190515 08:32:45.500"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.501">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.501" status="PASS" endtime="20190515 08:32:45.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.502">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:45.502" status="PASS" endtime="20190515 08:32:45.502"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.503">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.502" status="PASS" endtime="20190515 08:32:45.503"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.503" status="PASS" endtime="20190515 08:32:45.503"></status>
</kw>
<status starttime="20190515 08:32:45.501" status="PASS" endtime="20190515 08:32:45.503"></status>
</kw>
<status starttime="20190515 08:32:45.497" status="PASS" endtime="20190515 08:32:45.503"></status>
</kw>
<status starttime="20190515 08:32:45.485" status="PASS" endtime="20190515 08:32:45.504"></status>
</kw>
<doc>接口名:获取勘探记录/中杆安装详情

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.483" status="PASS" endtime="20190515 08:32:45.504"></status>
</test>
<test id="s1-s2-s2-t4" name="get projects dot datas camera infos by project id dot data id camera info id Fail Without Login">
<kw name="get projects dot datas camera infos by project id dot data id camera info id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
</arguments>
<kw name="Get Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.517">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.506" status="PASS" endtime="20190515 08:32:45.517"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.518">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.518" status="PASS" endtime="20190515 08:32:45.518"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.519">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.519" status="PASS" endtime="20190515 08:32:45.519"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.520">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.519" status="PASS" endtime="20190515 08:32:45.520"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.520">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.520" status="PASS" endtime="20190515 08:32:45.520"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.521">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.521" status="PASS" endtime="20190515 08:32:45.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.522">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:45.521" status="PASS" endtime="20190515 08:32:45.522"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.522">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.522" status="PASS" endtime="20190515 08:32:45.522"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.523" status="PASS" endtime="20190515 08:32:45.523"></status>
</kw>
<status starttime="20190515 08:32:45.520" status="PASS" endtime="20190515 08:32:45.523"></status>
</kw>
<status starttime="20190515 08:32:45.517" status="PASS" endtime="20190515 08:32:45.523"></status>
</kw>
<status starttime="20190515 08:32:45.505" status="PASS" endtime="20190515 08:32:45.523"></status>
</kw>
<doc>接口名:获取指定编号相机信息

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.504" status="PASS" endtime="20190515 08:32:45.524"></status>
</test>
<test id="s1-s2-s2-t5" name="get projects statistics by project id Fail Without Login">
<kw name="get projects statistics by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Statistics By Project Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.536">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.525" status="PASS" endtime="20190515 08:32:45.536"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.537">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.537" status="PASS" endtime="20190515 08:32:45.537"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.537">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.537" status="PASS" endtime="20190515 08:32:45.537"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.538">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.537" status="PASS" endtime="20190515 08:32:45.538"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.538">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.538" status="PASS" endtime="20190515 08:32:45.538"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.539">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.538" status="PASS" endtime="20190515 08:32:45.539"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.539">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/statistics</msg>
<status starttime="20190515 08:32:45.539" status="PASS" endtime="20190515 08:32:45.539"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.539">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.539" status="PASS" endtime="20190515 08:32:45.539"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.539" status="PASS" endtime="20190515 08:32:45.540"></status>
</kw>
<status starttime="20190515 08:32:45.538" status="PASS" endtime="20190515 08:32:45.540"></status>
</kw>
<status starttime="20190515 08:32:45.536" status="PASS" endtime="20190515 08:32:45.540"></status>
</kw>
<status starttime="20190515 08:32:45.525" status="PASS" endtime="20190515 08:32:45.540"></status>
</kw>
<doc>接口名:数据统计

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.524" status="PASS" endtime="20190515 08:32:45.540"></status>
</test>
<test id="s1-s2-s2-t6" name="put projects dot datas by project id dot data id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lon=${lon}</arg>
<arg>lat=${lat}</arg>
<arg>address=${address}</arg>
<arg>poling_form=${poling_form}</arg>
<arg>height=${height}</arg>
<arg>cross_arm_num=${cross_arm_num}</arg>
<arg>camera_infos=${camera_infos}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.541">${essential_params} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera'}</msg>
<status starttime="20190515 08:32:45.541" status="PASS" endtime="20190515 08:32:45.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reuse_pole_photo=${reuse_pole_photo}</arg>
<arg>remark=${remark}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.542">${unessential_params} = {'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:45.541" status="PASS" endtime="20190515 08:32:45.542"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas by project id dot data id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.543">params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg']}
params:{'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://j20qo140dix.jpg'], 'remark': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:45.543">@{results} = [ {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http:...</msg>
<status starttime="20190515 08:32:45.542" status="PASS" endtime="20190515 08:32:45.543"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.558">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.544" status="PASS" endtime="20190515 08:32:45.558"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.558">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.558" status="PASS" endtime="20190515 08:32:45.558"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.559">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.558" status="PASS" endtime="20190515 08:32:45.559"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.559">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.559" status="PASS" endtime="20190515 08:32:45.559"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.560">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.559" status="PASS" endtime="20190515 08:32:45.560"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.560">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.560" status="PASS" endtime="20190515 08:32:45.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.561">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:45.560" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.561">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.561" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.561" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<status starttime="20190515 08:32:45.560" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<status starttime="20190515 08:32:45.558" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<status starttime="20190515 08:32:45.543" status="PASS" endtime="20190515 08:32:45.561"></status>
</kw>
<status starttime="20190515 08:32:45.543" status="PASS" endtime="20190515 08:32:45.562"></status>
</kw>
<status starttime="20190515 08:32:45.543" status="PASS" endtime="20190515 08:32:45.562"></status>
</kw>
<kw name="${kwargs} = {'lon': '123.45', 'lat': '45.123', 'address': '昂利软件园', 'poling_form': '1', 'height': '2.7', 'cross_arm_num': '2', 'camera_infos': 'robotcamera', 'reuse_pole_photo': ['http://j20qo140dix.jpg', 'http://..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas by project id dot data id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas By Project Id Dot Data Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.580">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.562" status="PASS" endtime="20190515 08:32:45.580"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.580">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.580" status="PASS" endtime="20190515 08:32:45.580"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.581">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.581" status="PASS" endtime="20190515 08:32:45.581"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.581">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.581" status="PASS" endtime="20190515 08:32:45.581"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.581">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.581" status="PASS" endtime="20190515 08:32:45.582"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.582">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.582" status="PASS" endtime="20190515 08:32:45.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.582">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:45.582" status="PASS" endtime="20190515 08:32:45.582"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.583">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.582" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.583" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.582" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.580" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.562" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.562" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.562" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.543" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<status starttime="20190515 08:32:45.542" status="PASS" endtime="20190515 08:32:45.583"></status>
</kw>
<doc>接口名:修改勘探记录

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.540" status="PASS" endtime="20190515 08:32:45.584"></status>
</test>
<test id="s1-s2-s2-t7" name="put projects dot datas camera info by project id dot data id camera info id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>reg_code=${reg_code}</arg>
<arg>coordinate=${coordinate}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.585">${essential_params} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}</msg>
<status starttime="20190515 08:32:45.584" status="PASS" endtime="20190515 08:32:45.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.585">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:45.585" status="PASS" endtime="20190515 08:32:45.585"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects dot datas camera info by project id dot data id camera info id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
<arg>camera_info_id=${camera_info_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.586">@{results} = [ {'reg_code': '7777777', 'coordinate': '12,0;12,900'} ]</msg>
<status starttime="20190515 08:32:45.585" status="PASS" endtime="20190515 08:32:45.586"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'reg_code': '7777777', 'coordinate': '12,0;12,900'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects dot datas camera info by project id dot data id camera info id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects Dot Datas Camera Infos By Project Id Dot Data Id Camera Info Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.605">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.586" status="PASS" endtime="20190515 08:32:45.605"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.605">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.605" status="PASS" endtime="20190515 08:32:45.605"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.606">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.606" status="PASS" endtime="20190515 08:32:45.606"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.606">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.606" status="PASS" endtime="20190515 08:32:45.606"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.607">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.606" status="PASS" endtime="20190515 08:32:45.607"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.607">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.607" status="PASS" endtime="20190515 08:32:45.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.607">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/camera_infos/f0d930fa76a811e9881d0242c0a8b002</msg>
<status starttime="20190515 08:32:45.607" status="PASS" endtime="20190515 08:32:45.608"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.608">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.608" status="PASS" endtime="20190515 08:32:45.608"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.608" status="PASS" endtime="20190515 08:32:45.608"></status>
</kw>
<status starttime="20190515 08:32:45.607" status="PASS" endtime="20190515 08:32:45.608"></status>
</kw>
<status starttime="20190515 08:32:45.605" status="PASS" endtime="20190515 08:32:45.608"></status>
</kw>
<status starttime="20190515 08:32:45.586" status="PASS" endtime="20190515 08:32:45.609"></status>
</kw>
<status starttime="20190515 08:32:45.586" status="PASS" endtime="20190515 08:32:45.609"></status>
</kw>
<status starttime="20190515 08:32:45.586" status="PASS" endtime="20190515 08:32:45.609"></status>
</kw>
<status starttime="20190515 08:32:45.586" status="PASS" endtime="20190515 08:32:45.609"></status>
</kw>
<status starttime="20190515 08:32:45.585" status="PASS" endtime="20190515 08:32:45.609"></status>
</kw>
<doc>接口名:添加/修改相机信息

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.584" status="PASS" endtime="20190515 08:32:45.609"></status>
</test>
<test id="s1-s2-s2-t8" name="patch projects dot datas status by project id dot data id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.610">${essential_params} = {'status': '1'}</msg>
<status starttime="20190515 08:32:45.609" status="PASS" endtime="20190515 08:32:45.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.610">${unessential_params} = {}</msg>
<status starttime="20190515 08:32:45.610" status="PASS" endtime="20190515 08:32:45.610"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>patch projects dot datas status by project id dot data id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.611">@{results} = [ {'status': '1'} ]</msg>
<status starttime="20190515 08:32:45.611" status="PASS" endtime="20190515 08:32:45.611"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'status': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="patch projects dot datas status by project id dot data id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Patch Projects Dot Datas Status By Project Id Dot Data Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.630">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.612" status="PASS" endtime="20190515 08:32:45.630"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.631">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.630" status="PASS" endtime="20190515 08:32:45.631"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.631">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.631" status="PASS" endtime="20190515 08:32:45.631"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.632">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.631" status="PASS" endtime="20190515 08:32:45.632"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.632">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.632" status="PASS" endtime="20190515 08:32:45.632"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.633">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.633" status="PASS" endtime="20190515 08:32:45.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.633">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538/status</msg>
<status starttime="20190515 08:32:45.633" status="PASS" endtime="20190515 08:32:45.633"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.634">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.633" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.634" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.632" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.630" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.611" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.611" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.611" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.611" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<status starttime="20190515 08:32:45.610" status="PASS" endtime="20190515 08:32:45.634"></status>
</kw>
<doc>接口名:变更中杆实施记录状态

请求方式:Patch

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.609" status="PASS" endtime="20190515 08:32:45.635"></status>
</test>
<test id="s1-s2-s2-t9" name="delete projects dot datas by project id dot data id Fail Without Login">
<kw name="delete projects dot datas by project id dot data id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>dot_data_id=${dot_data_id}</arg>
</arguments>
<kw name="Delete Projects Dot Datas By Project Id Dot Data Id" library="robot_camera_monitor_deployment_server.dot.DotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.645">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:45.636" status="PASS" endtime="20190515 08:32:45.645"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.646">${bug_level} = None</msg>
<status starttime="20190515 08:32:45.646" status="PASS" endtime="20190515 08:32:45.646"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.646">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.646" status="PASS" endtime="20190515 08:32:45.646"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:45.647">${status_tag} = None</msg>
<status starttime="20190515 08:32:45.647" status="PASS" endtime="20190515 08:32:45.647"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.647">Set tag 'None'.</msg>
<status starttime="20190515 08:32:45.647" status="PASS" endtime="20190515 08:32:45.647"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.648">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:45.648" status="PASS" endtime="20190515 08:32:45.648"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.648">https://camera-monitor-deployment-server-d.parkone.cn/projects/f015637876a811e9bafb0242c0a8b002/dot_datas/20190515003237538</msg>
<status starttime="20190515 08:32:45.648" status="PASS" endtime="20190515 08:32:45.648"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:45.649">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:45.648" status="PASS" endtime="20190515 08:32:45.649"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:45.649" status="PASS" endtime="20190515 08:32:45.649"></status>
</kw>
<status starttime="20190515 08:32:45.647" status="PASS" endtime="20190515 08:32:45.649"></status>
</kw>
<status starttime="20190515 08:32:45.645" status="PASS" endtime="20190515 08:32:45.649"></status>
</kw>
<status starttime="20190515 08:32:45.635" status="PASS" endtime="20190515 08:32:45.649"></status>
</kw>
<doc>接口名:删除勘探记录

请求方式:Delete

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_dot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.635" status="PASS" endtime="20190515 08:32:45.649"></status>
</test>
<doc>server_dot</doc>
<status starttime="20190515 08:32:43.829" status="PASS" endtime="20190515 08:32:45.650"></status>
</suite>
<status starttime="20190515 08:32:34.584" status="PASS" endtime="20190515 08:32:45.652"></status>
</suite>
<suite id="s1-s3" name="Server Login" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_login">
<suite id="s1-s3-s1" name="Login" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_login/login.robot">
<test id="s1-s3-s1-t1" name="Login Test">
<kw name="Login" library="robot_camera_monitor_deployment_server.common.CommonLibrary">
<arguments>
<arg>admin_123</arg>
<arg>88888888</arg>
</arguments>
<status starttime="20190515 08:32:45.663" status="PASS" endtime="20190515 08:32:45.993"></status>
</kw>
<tags>
<tag>model:server_account</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.663" status="PASS" endtime="20190515 08:32:45.994"></status>
</test>
<test id="s1-s3-s1-t2" name="Login Fail">
<kw name="Login" library="robot_camera_monitor_deployment_server.common.CommonLibrary">
<arguments>
<arg>add</arg>
<arg>ad</arg>
</arguments>
<status starttime="20190515 08:32:45.996" status="PASS" endtime="20190515 08:32:46.034"></status>
</kw>
<tags>
<tag>model:server_account</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:45.995" status="PASS" endtime="20190515 08:32:46.034"></status>
</test>
<doc>server_account</doc>
<status starttime="20190515 08:32:45.656" status="PASS" endtime="20190515 08:32:46.035"></status>
</suite>
<status starttime="20190515 08:32:45.655" status="PASS" endtime="20190515 08:32:46.038"></status>
</suite>
<suite id="s1-s4" name="Server Project" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_project">
<suite id="s1-s4-s1" name="Projects" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_project/projects.robot">
<kw name="Login" type="setup" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>${admin_username}</arg>
<arg>${admin_password}</arg>
</arguments>
<status starttime="20190515 08:32:46.054" status="PASS" endtime="20190515 08:32:46.274"></status>
</kw>
<test id="s1-s4-s1-t1" name="get camera brands Success">
<kw name="get camera brands Success 200">
<kw name="Get Camera Brands" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:46.279" status="PASS" endtime="20190515 08:32:46.317"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/get_camera_brands_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.320">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.319" status="PASS" endtime="20190515 08:32:46.320"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.322">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.321" status="PASS" endtime="20190515 08:32:46.322"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.323">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.322" status="PASS" endtime="20190515 08:32:46.323"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.325">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.324" status="PASS" endtime="20190515 08:32:46.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.327">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.326" status="PASS" endtime="20190515 08:32:46.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.328">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.328" status="PASS" endtime="20190515 08:32:46.328"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.331">[{"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, {"camera_brand_id": "6683751871f911e9ab610242c0a8b002", "brand_name": "\u5eb7\u4f73", "brand_short": "kj", "brand_model": "KONKA-1,KONKA-2,KONKA-3", "is_deleted": false, "updated_time": 1557365159.220053, "created_time": 1557365159.220082}]</msg>
<status starttime="20190515 08:32:46.330" status="PASS" endtime="20190515 08:32:46.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.333">https://camera-monitor-deployment-server-d.parkone.cn/camera_brands</msg>
<status starttime="20190515 08:32:46.332" status="PASS" endtime="20190515 08:32:46.333"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.334">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.333" status="PASS" endtime="20190515 08:32:46.334"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.335" status="PASS" endtime="20190515 08:32:46.336"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.336">${re} = PASS</msg>
<status starttime="20190515 08:32:46.329" status="PASS" endtime="20190515 08:32:46.337"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.338" status="PASS" endtime="20190515 08:32:46.339"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.340" status="PASS" endtime="20190515 08:32:46.344"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.344" status="PASS" endtime="20190515 08:32:46.345"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.346">${js} = PASS</msg>
<status starttime="20190515 08:32:46.337" status="PASS" endtime="20190515 08:32:46.346"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.347" status="PASS" endtime="20190515 08:32:46.347"></status>
</kw>
<status starttime="20190515 08:32:46.346" status="PASS" endtime="20190515 08:32:46.347"></status>
</kw>
<status starttime="20190515 08:32:46.318" status="PASS" endtime="20190515 08:32:46.348"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['camera_brand_id']}</arg>
</arguments>
<assign>
<var>${camera_brand_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.349">${camera_brand_id} = 6682606a71f911e9ab610242c0a8b002</msg>
<status starttime="20190515 08:32:46.348" status="PASS" endtime="20190515 08:32:46.349"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${camera_brand_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.350">${camera_brand_id} = 6682606a71f911e9ab610242c0a8b002</msg>
<status starttime="20190515 08:32:46.349" status="PASS" endtime="20190515 08:32:46.350"></status>
</kw>
<status starttime="20190515 08:32:46.278" status="PASS" endtime="20190515 08:32:46.350"></status>
</kw>
<doc>接口名:获取相机品牌信息列表

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 CameraBrand 列表。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:46.274" status="PASS" endtime="20190515 08:32:46.350"></status>
</test>
<test id="s1-s4-s1-t2" name="post projects Success">
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.352">${project_name} = 18137558298</msg>
<status starttime="20190515 08:32:46.352" status="PASS" endtime="20190515 08:32:46.352"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>robot${project_name}</arg>
</arguments>
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.353">${project_name} = robot18137558298</msg>
<status starttime="20190515 08:32:46.353" status="PASS" endtime="20190515 08:32:46.353"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${project_name}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.354">${project_name} = robot18137558298</msg>
<status starttime="20190515 08:32:46.353" status="PASS" endtime="20190515 08:32:46.354"></status>
</kw>
<kw name="post projects Success 201">
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
<arg>leader=${leader}</arg>
<arg>mobile=${mobile}</arg>
<arg>status=${status}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.414">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:46.355" status="PASS" endtime="20190515 08:32:46.414"></status>
</kw>
<kw name="Expect Status is 201" library="resources">
<doc>检测响应状态是否为201 Created，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/post_projects_201.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.417">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.416" status="PASS" endtime="20190515 08:32:46.417"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.419">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.418" status="PASS" endtime="20190515 08:32:46.419"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.420">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.419" status="PASS" endtime="20190515 08:32:46.421"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.423">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.421" status="PASS" endtime="20190515 08:32:46.423"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.424">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.424" status="PASS" endtime="20190515 08:32:46.424"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.425">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.425" status="PASS" endtime="20190515 08:32:46.426"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>201</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.428">{"project_id": "f5eba7c676a811e9bafb0242c0a8b002", "created_time": 1557880366.396304}</msg>
<status starttime="20190515 08:32:46.427" status="PASS" endtime="20190515 08:32:46.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.429">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:46.429" status="PASS" endtime="20190515 08:32:46.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.431">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.430" status="PASS" endtime="20190515 08:32:46.431"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.432" status="PASS" endtime="20190515 08:32:46.433"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.433">${re} = PASS</msg>
<status starttime="20190515 08:32:46.426" status="PASS" endtime="20190515 08:32:46.433"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.435" status="PASS" endtime="20190515 08:32:46.436"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.436" status="PASS" endtime="20190515 08:32:46.440"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.441" status="PASS" endtime="20190515 08:32:46.442"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.442">${js} = PASS</msg>
<status starttime="20190515 08:32:46.434" status="PASS" endtime="20190515 08:32:46.442"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.443" status="PASS" endtime="20190515 08:32:46.444"></status>
</kw>
<status starttime="20190515 08:32:46.442" status="PASS" endtime="20190515 08:32:46.444"></status>
</kw>
<status starttime="20190515 08:32:46.415" status="PASS" endtime="20190515 08:32:46.444"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['project_id']}</arg>
</arguments>
<assign>
<var>${project_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.446">${project_id} = f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:46.445" status="PASS" endtime="20190515 08:32:46.446"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${project_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.447">${project_id} = f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:46.446" status="PASS" endtime="20190515 08:32:46.447"></status>
</kw>
<status starttime="20190515 08:32:46.354" status="PASS" endtime="20190515 08:32:46.447"></status>
</kw>
<doc>接口名:添加项目

请求方式:Post

预期结果:输入正确参数,http响应码返回 201,返回的Json数据符合验证。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:201</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:46.351" status="PASS" endtime="20190515 08:32:46.447"></status>
</test>
<test id="s1-s4-s1-t3" name="post projects Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name_422}</arg>
<arg>province=${province_422}</arg>
<arg>city=${city_422}</arg>
<arg>district=${district_422}</arg>
<arg>address=${address_422}</arg>
<arg>region_id=${region_id_422}</arg>
<arg>camera_brand_id=${camera_brand_id_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.451">${essential_params} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo...</msg>
<status starttime="20190515 08:32:46.449" status="PASS" endtime="20190515 08:32:46.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader_422}</arg>
<arg>mobile=${mobile_422}</arg>
<arg>status=${status_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.452">${unessential_params} = {'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:46.451" status="PASS" endtime="20190515 08:32:46.452"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post projects fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.453">params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:46.453">@{results} = [ {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIs...</msg>
<status starttime="20190515 08:32:46.453" status="PASS" endtime="20190515 08:32:46.454"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.489">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:46.455" status="PASS" endtime="20190515 08:32:46.489"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.492">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.491" status="PASS" endtime="20190515 08:32:46.492"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.494">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.492" status="PASS" endtime="20190515 08:32:46.494"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.495">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.494" status="PASS" endtime="20190515 08:32:46.495"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.497">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.496" status="PASS" endtime="20190515 08:32:46.497"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.498">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.497" status="PASS" endtime="20190515 08:32:46.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.499">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.499" status="PASS" endtime="20190515 08:32:46.499"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.502">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:46.501" status="PASS" endtime="20190515 08:32:46.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.504">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:46.503" status="PASS" endtime="20190515 08:32:46.504"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.505">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.504" status="PASS" endtime="20190515 08:32:46.505"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.506" status="PASS" endtime="20190515 08:32:46.507"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.507">${re} = PASS</msg>
<status starttime="20190515 08:32:46.500" status="PASS" endtime="20190515 08:32:46.508"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.509" status="PASS" endtime="20190515 08:32:46.510"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.511" status="PASS" endtime="20190515 08:32:46.515"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.515" status="PASS" endtime="20190515 08:32:46.516"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.516">${js} = PASS</msg>
<status starttime="20190515 08:32:46.508" status="PASS" endtime="20190515 08:32:46.516"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.517" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<status starttime="20190515 08:32:46.517" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<status starttime="20190515 08:32:46.490" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<status starttime="20190515 08:32:46.454" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<status starttime="20190515 08:32:46.454" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<status starttime="20190515 08:32:46.454" status="PASS" endtime="20190515 08:32:46.518"></status>
</kw>
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.549">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:46.521" status="PASS" endtime="20190515 08:32:46.549"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.550">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.550" status="PASS" endtime="20190515 08:32:46.550"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.551">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.550" status="PASS" endtime="20190515 08:32:46.551"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.551">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.551" status="PASS" endtime="20190515 08:32:46.551"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.552">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.552" status="PASS" endtime="20190515 08:32:46.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.552">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.552" status="PASS" endtime="20190515 08:32:46.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.553">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.553" status="PASS" endtime="20190515 08:32:46.553"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.554">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:46.553" status="PASS" endtime="20190515 08:32:46.554"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.554">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:46.554" status="PASS" endtime="20190515 08:32:46.554"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.555">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.554" status="PASS" endtime="20190515 08:32:46.555"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.555" status="PASS" endtime="20190515 08:32:46.555"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.556">${re} = PASS</msg>
<status starttime="20190515 08:32:46.553" status="PASS" endtime="20190515 08:32:46.556"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.556" status="PASS" endtime="20190515 08:32:46.556"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.557" status="PASS" endtime="20190515 08:32:46.559"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.559" status="PASS" endtime="20190515 08:32:46.559"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.559">${js} = PASS</msg>
<status starttime="20190515 08:32:46.556" status="PASS" endtime="20190515 08:32:46.559"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.560" status="PASS" endtime="20190515 08:32:46.560"></status>
</kw>
<status starttime="20190515 08:32:46.560" status="PASS" endtime="20190515 08:32:46.560"></status>
</kw>
<status starttime="20190515 08:32:46.549" status="PASS" endtime="20190515 08:32:46.561"></status>
</kw>
<status starttime="20190515 08:32:46.519" status="PASS" endtime="20190515 08:32:46.561"></status>
</kw>
<status starttime="20190515 08:32:46.519" status="PASS" endtime="20190515 08:32:46.561"></status>
</kw>
<status starttime="20190515 08:32:46.519" status="PASS" endtime="20190515 08:32:46.561"></status>
</kw>
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.599">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:46.562" status="PASS" endtime="20190515 08:32:46.599"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.601">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.600" status="PASS" endtime="20190515 08:32:46.601"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.602">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.601" status="PASS" endtime="20190515 08:32:46.602"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.603">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.602" status="PASS" endtime="20190515 08:32:46.603"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.604">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.603" status="PASS" endtime="20190515 08:32:46.604"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.605">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.605" status="PASS" endtime="20190515 08:32:46.605"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.609">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.605" status="PASS" endtime="20190515 08:32:46.609"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.611">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:46.610" status="PASS" endtime="20190515 08:32:46.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.612">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:46.611" status="PASS" endtime="20190515 08:32:46.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.613">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.612" status="PASS" endtime="20190515 08:32:46.613"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.613" status="PASS" endtime="20190515 08:32:46.614"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.614">${re} = PASS</msg>
<status starttime="20190515 08:32:46.609" status="PASS" endtime="20190515 08:32:46.615"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.616" status="PASS" endtime="20190515 08:32:46.616"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.617" status="PASS" endtime="20190515 08:32:46.621"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.621" status="PASS" endtime="20190515 08:32:46.622"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.622">${js} = PASS</msg>
<status starttime="20190515 08:32:46.615" status="PASS" endtime="20190515 08:32:46.622"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.624" status="PASS" endtime="20190515 08:32:46.624"></status>
</kw>
<status starttime="20190515 08:32:46.623" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.600" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.561" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.561" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.561" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.454" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<status starttime="20190515 08:32:46.452" status="PASS" endtime="20190515 08:32:46.625"></status>
</kw>
<doc>接口名:添加项目

请求方式:Post

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:46.448" status="PASS" endtime="20190515 08:32:46.626"></status>
</test>
<test id="s1-s4-s1-t4" name="get projects Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.628">${essential_params} = {}</msg>
<status starttime="20190515 08:32:46.628" status="PASS" endtime="20190515 08:32:46.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>page_size=${page_size}</arg>
<arg>page_num=${page_num}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.630">${unessential_params} = {'project_name': 'robot18137558298', 'page_size': '20', 'page_num': '1', 'status': '1'}</msg>
<status starttime="20190515 08:32:46.629" status="PASS" endtime="20190515 08:32:46.630"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects success 200</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.631">params:{'project_name': 'robot18137558298'}
params:{'page_size': '20', 'project_name': 'robot18137558298'}
params:{'page_size': '20', 'project_name': 'robot18137558298', 'page_num': '1'}
params:{'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:46.632">@{results} = [ {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'} | {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'} | {'page_size': '20'...</msg>
<status starttime="20190515 08:32:46.631" status="PASS" endtime="20190515 08:32:46.632"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:46.633" status="PASS" endtime="20190515 08:32:46.674"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/get_projects_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.677">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.676" status="PASS" endtime="20190515 08:32:46.677"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.678">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.677" status="PASS" endtime="20190515 08:32:46.679"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.681">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.679" status="PASS" endtime="20190515 08:32:46.681"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.683">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.682" status="PASS" endtime="20190515 08:32:46.683"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.684">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.683" status="PASS" endtime="20190515 08:32:46.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.685">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.685" status="PASS" endtime="20190515 08:32:46.685"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.688">[{"project_id": "f5eba7c676a811e9bafb0242c0a8b002", "project_name": "robot18137558298", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "robot123", "status": 1, "mobile": "17851187092", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880366.396304, "updated_time": 1557880366.396285}]</msg>
<status starttime="20190515 08:32:46.687" status="PASS" endtime="20190515 08:32:46.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.689">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:46.688" status="PASS" endtime="20190515 08:32:46.689"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.691">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.690" status="PASS" endtime="20190515 08:32:46.691"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.692" status="PASS" endtime="20190515 08:32:46.693"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.693">${re} = PASS</msg>
<status starttime="20190515 08:32:46.686" status="PASS" endtime="20190515 08:32:46.693"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.695" status="PASS" endtime="20190515 08:32:46.696"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.696" status="PASS" endtime="20190515 08:32:46.702"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.702" status="PASS" endtime="20190515 08:32:46.702"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.703">${js} = PASS</msg>
<status starttime="20190515 08:32:46.694" status="PASS" endtime="20190515 08:32:46.703"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.704" status="PASS" endtime="20190515 08:32:46.704"></status>
</kw>
<status starttime="20190515 08:32:46.703" status="PASS" endtime="20190515 08:32:46.704"></status>
</kw>
<status starttime="20190515 08:32:46.675" status="PASS" endtime="20190515 08:32:46.705"></status>
</kw>
<status starttime="20190515 08:32:46.632" status="PASS" endtime="20190515 08:32:46.705"></status>
</kw>
<status starttime="20190515 08:32:46.632" status="PASS" endtime="20190515 08:32:46.705"></status>
</kw>
<status starttime="20190515 08:32:46.632" status="PASS" endtime="20190515 08:32:46.705"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:46.706" status="PASS" endtime="20190515 08:32:46.744"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/get_projects_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.747">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.746" status="PASS" endtime="20190515 08:32:46.747"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.749">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.748" status="PASS" endtime="20190515 08:32:46.749"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.750">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.749" status="PASS" endtime="20190515 08:32:46.750"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.752">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.751" status="PASS" endtime="20190515 08:32:46.752"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.753">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.753" status="PASS" endtime="20190515 08:32:46.753"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.754">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.754" status="PASS" endtime="20190515 08:32:46.754"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.758">[{"project_id": "f5eba7c676a811e9bafb0242c0a8b002", "project_name": "robot18137558298", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "robot123", "status": 1, "mobile": "17851187092", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880366.396304, "updated_time": 1557880366.396285}]</msg>
<status starttime="20190515 08:32:46.757" status="PASS" endtime="20190515 08:32:46.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.759">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:46.759" status="PASS" endtime="20190515 08:32:46.760"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.761">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.760" status="PASS" endtime="20190515 08:32:46.761"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.762" status="PASS" endtime="20190515 08:32:46.763"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.763">${re} = PASS</msg>
<status starttime="20190515 08:32:46.755" status="PASS" endtime="20190515 08:32:46.763"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.765" status="PASS" endtime="20190515 08:32:46.766"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.766" status="PASS" endtime="20190515 08:32:46.772"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.772" status="PASS" endtime="20190515 08:32:46.772"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.773">${js} = PASS</msg>
<status starttime="20190515 08:32:46.764" status="PASS" endtime="20190515 08:32:46.773"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.774" status="PASS" endtime="20190515 08:32:46.774"></status>
</kw>
<status starttime="20190515 08:32:46.773" status="PASS" endtime="20190515 08:32:46.774"></status>
</kw>
<status starttime="20190515 08:32:46.745" status="PASS" endtime="20190515 08:32:46.775"></status>
</kw>
<status starttime="20190515 08:32:46.706" status="PASS" endtime="20190515 08:32:46.775"></status>
</kw>
<status starttime="20190515 08:32:46.705" status="PASS" endtime="20190515 08:32:46.775"></status>
</kw>
<status starttime="20190515 08:32:46.705" status="PASS" endtime="20190515 08:32:46.775"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:46.776" status="PASS" endtime="20190515 08:32:46.831"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/get_projects_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.834">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.833" status="PASS" endtime="20190515 08:32:46.834"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.836">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.835" status="PASS" endtime="20190515 08:32:46.836"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.837">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.836" status="PASS" endtime="20190515 08:32:46.837"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.839">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.838" status="PASS" endtime="20190515 08:32:46.839"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.840">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.839" status="PASS" endtime="20190515 08:32:46.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.841">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.841" status="PASS" endtime="20190515 08:32:46.841"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.844">[{"project_id": "f5eba7c676a811e9bafb0242c0a8b002", "project_name": "robot18137558298", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "robot123", "status": 1, "mobile": "17851187092", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880366.396304, "updated_time": 1557880366.396285}]</msg>
<status starttime="20190515 08:32:46.843" status="PASS" endtime="20190515 08:32:46.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.845">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:46.845" status="PASS" endtime="20190515 08:32:46.846"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.847">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.846" status="PASS" endtime="20190515 08:32:46.847"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.848" status="PASS" endtime="20190515 08:32:46.850"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.850">${re} = PASS</msg>
<status starttime="20190515 08:32:46.842" status="PASS" endtime="20190515 08:32:46.850"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.852" status="PASS" endtime="20190515 08:32:46.853"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.853" status="PASS" endtime="20190515 08:32:46.859"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.860" status="PASS" endtime="20190515 08:32:46.861"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.861">${js} = PASS</msg>
<status starttime="20190515 08:32:46.851" status="PASS" endtime="20190515 08:32:46.861"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.862" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<status starttime="20190515 08:32:46.862" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<status starttime="20190515 08:32:46.832" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<status starttime="20190515 08:32:46.776" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<status starttime="20190515 08:32:46.775" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<status starttime="20190515 08:32:46.775" status="PASS" endtime="20190515 08:32:46.863"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:46.865" status="PASS" endtime="20190515 08:32:46.905"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_project/get_projects_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.907">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.906" status="PASS" endtime="20190515 08:32:46.907"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.908">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.907" status="PASS" endtime="20190515 08:32:46.908"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.909">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.908" status="PASS" endtime="20190515 08:32:46.909"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.910">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.909" status="PASS" endtime="20190515 08:32:46.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.910">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.910" status="PASS" endtime="20190515 08:32:46.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.911">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.911" status="PASS" endtime="20190515 08:32:46.911"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.912">[{"project_id": "f5eba7c676a811e9bafb0242c0a8b002", "project_name": "robot18137558298", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "robot123", "status": 1, "mobile": "17851187092", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880366.396304, "updated_time": 1557880366.396285}]</msg>
<status starttime="20190515 08:32:46.912" status="PASS" endtime="20190515 08:32:46.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.913">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:46.913" status="PASS" endtime="20190515 08:32:46.913"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.914">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.914" status="PASS" endtime="20190515 08:32:46.914"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.915" status="PASS" endtime="20190515 08:32:46.915"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.915">${re} = PASS</msg>
<status starttime="20190515 08:32:46.911" status="PASS" endtime="20190515 08:32:46.915"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.916" status="PASS" endtime="20190515 08:32:46.917"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.917" status="PASS" endtime="20190515 08:32:46.922"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.922" status="PASS" endtime="20190515 08:32:46.923"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.923">${js} = PASS</msg>
<status starttime="20190515 08:32:46.916" status="PASS" endtime="20190515 08:32:46.923"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:46.924" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.923" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.906" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.864" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.864" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.863" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.632" status="PASS" endtime="20190515 08:32:46.925"></status>
</kw>
<status starttime="20190515 08:32:46.630" status="PASS" endtime="20190515 08:32:46.926"></status>
</kw>
<doc>接口名:获取项目列表

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 Project 列表。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:46.627" status="PASS" endtime="20190515 08:32:46.926"></status>
</test>
<test id="s1-s4-s1-t5" name="get projects Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.929">${essential_params} = {}</msg>
<status starttime="20190515 08:32:46.928" status="PASS" endtime="20190515 08:32:46.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page_size=${page_size_422}</arg>
<arg>page_num=${page_num_422}</arg>
<arg>status=${status_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.930">${unessential_params} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot', 'status': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:46.929" status="PASS" endtime="20190515 08:32:46.930"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.932">params:{'page_size': 'ThisIsRobot'}
params:{'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}
params:{'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:46.932">@{results} = [ {'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} | {'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} | {'page_size': 'ThisIsRobot', 'st...</msg>
<status starttime="20190515 08:32:46.931" status="PASS" endtime="20190515 08:32:46.932"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.975">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:46.933" status="PASS" endtime="20190515 08:32:46.976"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.978">${bug_level} = None</msg>
<status starttime="20190515 08:32:46.977" status="PASS" endtime="20190515 08:32:46.978"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.979">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.978" status="PASS" endtime="20190515 08:32:46.979"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.980">${status_tag} = None</msg>
<status starttime="20190515 08:32:46.979" status="PASS" endtime="20190515 08:32:46.980"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.981">Set tag 'None'.</msg>
<status starttime="20190515 08:32:46.980" status="PASS" endtime="20190515 08:32:46.981"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.982">${re} = FAIL</msg>
<status starttime="20190515 08:32:46.982" status="PASS" endtime="20190515 08:32:46.982"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:46.983">${js} = FAIL</msg>
<status starttime="20190515 08:32:46.983" status="PASS" endtime="20190515 08:32:46.983"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.985">{"message": "Validation Failed", "errors": [{"field": "status", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:46.985" status="PASS" endtime="20190515 08:32:46.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.987">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:46.986" status="PASS" endtime="20190515 08:32:46.987"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:46.988">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:46.987" status="PASS" endtime="20190515 08:32:46.988"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:46.989" status="PASS" endtime="20190515 08:32:46.990"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.991">${re} = PASS</msg>
<status starttime="20190515 08:32:46.984" status="PASS" endtime="20190515 08:32:46.991"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:46.992" status="PASS" endtime="20190515 08:32:46.993"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:46.993" status="PASS" endtime="20190515 08:32:46.997"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:46.998" status="PASS" endtime="20190515 08:32:46.998"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:46.999">${js} = PASS</msg>
<status starttime="20190515 08:32:46.991" status="PASS" endtime="20190515 08:32:46.999"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:47.001" status="PASS" endtime="20190515 08:32:47.001"></status>
</kw>
<status starttime="20190515 08:32:46.999" status="PASS" endtime="20190515 08:32:47.002"></status>
</kw>
<status starttime="20190515 08:32:46.976" status="PASS" endtime="20190515 08:32:47.002"></status>
</kw>
<status starttime="20190515 08:32:46.933" status="PASS" endtime="20190515 08:32:47.002"></status>
</kw>
<status starttime="20190515 08:32:46.932" status="PASS" endtime="20190515 08:32:47.002"></status>
</kw>
<status starttime="20190515 08:32:46.932" status="PASS" endtime="20190515 08:32:47.002"></status>
</kw>
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.044">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:47.004" status="PASS" endtime="20190515 08:32:47.044"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.046">${bug_level} = None</msg>
<status starttime="20190515 08:32:47.045" status="PASS" endtime="20190515 08:32:47.046"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.047">Set tag 'None'.</msg>
<status starttime="20190515 08:32:47.047" status="PASS" endtime="20190515 08:32:47.048"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.049">${status_tag} = None</msg>
<status starttime="20190515 08:32:47.048" status="PASS" endtime="20190515 08:32:47.049"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.050">Set tag 'None'.</msg>
<status starttime="20190515 08:32:47.049" status="PASS" endtime="20190515 08:32:47.050"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.051">${re} = FAIL</msg>
<status starttime="20190515 08:32:47.051" status="PASS" endtime="20190515 08:32:47.051"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.052">${js} = FAIL</msg>
<status starttime="20190515 08:32:47.052" status="PASS" endtime="20190515 08:32:47.052"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.054">{"message": "Validation Failed", "errors": [{"field": "status", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:47.054" status="PASS" endtime="20190515 08:32:47.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.056">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:47.055" status="PASS" endtime="20190515 08:32:47.056"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.057">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:47.056" status="PASS" endtime="20190515 08:32:47.057"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:47.058" status="PASS" endtime="20190515 08:32:47.059"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:47.059">${re} = PASS</msg>
<status starttime="20190515 08:32:47.053" status="PASS" endtime="20190515 08:32:47.059"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:47.060" status="PASS" endtime="20190515 08:32:47.061"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:47.062" status="PASS" endtime="20190515 08:32:47.067"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:47.068" status="PASS" endtime="20190515 08:32:47.068"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:47.069">${js} = PASS</msg>
<status starttime="20190515 08:32:47.059" status="PASS" endtime="20190515 08:32:47.069"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:47.070" status="PASS" endtime="20190515 08:32:47.071"></status>
</kw>
<status starttime="20190515 08:32:47.069" status="PASS" endtime="20190515 08:32:47.071"></status>
</kw>
<status starttime="20190515 08:32:47.045" status="PASS" endtime="20190515 08:32:47.072"></status>
</kw>
<status starttime="20190515 08:32:47.003" status="PASS" endtime="20190515 08:32:47.072"></status>
</kw>
<status starttime="20190515 08:32:47.002" status="PASS" endtime="20190515 08:32:47.072"></status>
</kw>
<status starttime="20190515 08:32:47.002" status="PASS" endtime="20190515 08:32:47.072"></status>
</kw>
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'status': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.109">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:47.074" status="PASS" endtime="20190515 08:32:47.109"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.110">${bug_level} = None</msg>
<status starttime="20190515 08:32:47.110" status="PASS" endtime="20190515 08:32:47.110"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.111">Set tag 'None'.</msg>
<status starttime="20190515 08:32:47.111" status="PASS" endtime="20190515 08:32:47.111"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.112">${status_tag} = None</msg>
<status starttime="20190515 08:32:47.111" status="PASS" endtime="20190515 08:32:47.112"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.113">Set tag 'None'.</msg>
<status starttime="20190515 08:32:47.112" status="PASS" endtime="20190515 08:32:47.113"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.114">${re} = FAIL</msg>
<status starttime="20190515 08:32:47.113" status="PASS" endtime="20190515 08:32:47.114"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:47.114">${js} = FAIL</msg>
<status starttime="20190515 08:32:47.114" status="PASS" endtime="20190515 08:32:47.114"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.116">{"message": "Validation Failed", "errors": [{"field": "status", "code": "invalid"}, {"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:47.115" status="PASS" endtime="20190515 08:32:47.116"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.117">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=ThisIsRobot&amp;status=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:47.116" status="PASS" endtime="20190515 08:32:47.117"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:47.118">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:47.117" status="PASS" endtime="20190515 08:32:47.118"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:47.118" status="PASS" endtime="20190515 08:32:47.119"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:47.119">${re} = PASS</msg>
<status starttime="20190515 08:32:47.115" status="PASS" endtime="20190515 08:32:47.119"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:47.120" status="PASS" endtime="20190515 08:32:47.120"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:47.121" status="PASS" endtime="20190515 08:32:47.124"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:47.125" status="PASS" endtime="20190515 08:32:47.125"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:47.125">${js} = PASS</msg>
<status starttime="20190515 08:32:47.119" status="PASS" endtime="20190515 08:32:47.125"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:47.127" status="PASS" endtime="20190515 08:32:47.127"></status>
</kw>
<status starttime="20190515 08:32:47.126" status="PASS" endtime="20190515 08:32:47.127"></status>
</kw>
<status starttime="20190515 08:32:47.109" status="PASS" endtime="20190515 08:32:47.127"></status>
</kw>
<status starttime="20190515 08:32:47.073" status="PASS" endtime="20190515 08:32:47.128"></status>
</kw>
<status starttime="20190515 08:32:47.072" status="PASS" endtime="20190515 08:32:47.128"></status>
</kw>
<status starttime="20190515 08:32:47.072" status="PASS" endtime="20190515 08:32:47.128"></status>
</kw>
<status starttime="20190515 08:32:46.932" status="PASS" endtime="20190515 08:32:47.128"></status>
</kw>
<status starttime="20190515 08:32:46.930" status="PASS" endtime="20190515 08:32:47.128"></status>
</kw>
<doc>接口名:获取项目列表

请求方式:Get

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:46.926" status="PASS" endtime="20190515 08:32:47.128"></status>
</test>
<test id="s1-s4-s1-t6" name="get projects equipment list export by project id Success">
<kw name="get projects equipment list export by project id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Equipment List Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:49.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:47.131" status="PASS" endtime="20190515 08:32:49.997"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>NoSchema</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.000">${bug_level} = None</msg>
<status starttime="20190515 08:32:49.999" status="PASS" endtime="20190515 08:32:50.000"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.001">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.001" status="PASS" endtime="20190515 08:32:50.001"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.001">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.001" status="PASS" endtime="20190515 08:32:50.001"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.001">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.001" status="PASS" endtime="20190515 08:32:50.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.002">${re} = FAIL</msg>
<status starttime="20190515 08:32:50.002" status="PASS" endtime="20190515 08:32:50.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.002">${js} = FAIL</msg>
<status starttime="20190515 08:32:50.002" status="PASS" endtime="20190515 08:32:50.002"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.003">PK\xafN&lt;\xe1\xa5\x85\xc0_rels/.rels\xad\x92O\x8b\xc2@\xc5\xbfJ\x99\xfbW\xc1\xc3b=y\xe9mY\xfcq&amp;\xfdC;\x93!\xb1~{\x87\xbdl\xb7TP\xf0^\xf2\xde\x8fG\xf6?4\xa0vR\xdb\xc5T\x8c~\xa94\xadj\xfcH\xb6%\x8fi\xc5\x91BVj\x8f\x9aGi \xa2\xed\xb1!\xd8\xac\xd7;\x90\xa9\x879\xec\xa7\x9eE\xe5J#\x95\xfb4\xc5	\xa5!-\xcd8\xc0\x95\xa5?3\xf7\xabl\x9b\x85[\xa4gB\xb9\xae;KG\xb6OA\xb2g\xa6\x80e\x98\xcd\x8cc\xfb-\x9cO-\xbd\x86\xf3\xb8\xf0\xa4\xe8P\xf1\xd7\xf5#\xe6\xed(=$\xda.a\x8c\xef\xee\x87F\xa5\xe0\xc8\xcd\x91\xe0\xdf\xeePK\xafN'\xe8\x87\x82\xb1docProps/app.xmlM\x8eM\xc20D\xffJ\xe9\xddn)\xe8Ab@\xb0G\xc1\x93\xf7\x90nl \xc9\x86\xcd
\xf9\xf9\xa6\x82\xb7y\xbcauc\xca\xc8\xe2\xb1t5\x86TN\xfd*\x92\x8f\xc5\xaeM\x9aN\xcd8\xe2h\xa4!?\x80\x9c\xf3/d\x9f\x93\xc04\x8e\xc0*\x98\v\xf9;\xd8ku\xce9xk\xc4S\xd2Wo\x99
9\xe9\xe6j1(\xf8\x97[\xf3\x8e\\xb6&lt;\xfb\xb7\xfc\xb0\x82\xdfI\xfdPK\xafN\xf1\x90\x86\xaf\xeb\xcbdocProps/core.xml\xa5\x91MO\xc30\x86\xff\xca\xd4{\xeb\xa4eH\x8b\xb2^@\x9c@Bbh\xb7(\xf1\xb6j\xcd\x87\xa3v\xff\x9e\xb6l\xdd\xdc8\xc6\xef\xe3\xc7\xb6"u\xdaG|\x8d&gt;`\xa4\xd3\xa2\xb7\xadKB\x87uv 
 \xe9Z\x95\x8a\x81pC\xb8\xf3\xd1*\x9eqA\xe9\xa3\xda#\x94\x8c\xdd\x83ERF\x91\x82Q\x98\x87\xd9\x98\x9d\x95F\xcf\xca\xf0\xdbI`4`\x8b%\xe0\x87+Km\xfa\xb3aJf\xb2O\xcdLu]Wt\xd5\xc4q\xf8xy~\x9b\x96\xcf\x97H9\x8dY-\x8d:\xa2"\xeb\xf1\xa2p\xea[	7Ey\x9e\xfd]@\xb3&amp;:\g\x97\xe4\xbdzx\xdc&lt;eu\xc9\xf8*g\xcb\x9c/7\x8c\x89\xaaw\xab\xed\xe8\xfa\xd1Zo\x9a]\xf3\xe3EPK\xf8\xf5o\xf5PK\xafN\x99\\x9c#\x9c'xl/theme/theme1.xml\xedZ[s\xda8~\xef\xaf\xd0xg\xf6m\xc66\x81\xb6\xb4siv\xdb\xb4\x99\x84\xedN\x85X\x8dlyd\x91\x84\xbfG6\xcb\x96\xed\x92M\xba\x9b&lt;,\xe9\xfb\xceEG\xe7\xe88y\xf3\xee.b\xe8\x86\x88\x94\xf2x`\xd9/\xdb\xd6\xbb\xb7/\xde\xe0W2$A0\xa7\xaf\xf0\xc0
\xa5L^\xb5Zi\xc38}\xc9\xc3\xdc\x82\x8bKx\xcb\xd6\\xe0[/#\xd6\xea\xb4\xdb\xddV\x84il\xa1Gd`}^,h@\xd0TQZo_ \xb4\xe53\xf8\xcbT\x8de\xa3WA&amp;\xb9\x88\xb4\xf2\xf9l\xc5\xfc\xda\xde&gt;e\xcf\xe9:2\x81n0X \xceo\xa7\xe4NZ\x88\xe1T\xc2\xc4\xc0jg?Vk\xc7\xd1\xd2H\x80\x82\xc9}\x94\xbaI\xf6\xa3\xd32;:\x9dX\xcev|\xf6\xc4\xed\x9f\x8c\xca\xdat4m\xe0\xe3\xf1x8\xb6\xcb\xd2\x8bp\xe0Q\xbb\x9e\xc2\x9d\xf4l\xbf\xa4A	\xb4\xa3i\xd0d\xd8\xf6\xda\xae\x91\xa6\xaa\x8dSO\xd3\xf7}\xdf\xeb\x9bh\x9c
\x8d[O\xd3kw\xdd\xd3\x8e\x89\xc6\xad\xd0x\xbe\xf1O\x87\xc3\xae\x89\xc6\xab\xd0t\xebi&amp;'\xfd\xaek\xa4\xe9hBF\xe3\xebz\xb5\xe5@\xd3 Xpv\xd6\xcc\xd2\x96^)\xfau\x94\xd9\xbb\xddA\\xf0X\xee9\x89\xfe\xc6\xc5\xd6i\xd2\x964Fr\x9d\x907\xc4\xd1LP|\xafA\xb6\x8a\xe0\xc2\x92\xd2\\x90\xd6\xcf)\xb5P\x9a\xc8\x81\xf5G\x82!\xc5\xdc\xaf\xfd\xf5\x97\xbb\xc9\xa43z\x9d}:\xcek\x94i\xab\xa7\xed\xbb\x9b\xcf\x93\xfcs\xe8\xe4\x9f\xa7\x93\xd7MB\xcep\xbc,	\xf1\xfb#[a\x87'n;r:gB|\xcf\xf6\xf6\x91\xa5%2\xcf\xef\xf9
\xebN&lt;gV\x96\xb0]\xcf\xcf\xe4\x9e\x8cr#\xbb\xdd\xf6X}\xf6OGn#\xd7\xa9\xc0\xb3"\xd7\x94F$E\x9f\xc8-\xba\xe48\xb5I2?\x9d\x86\x98jP\xa4	1\x96\xa1\x86\xf8\xb4\xc6\xac\xe0}\xb7\xbe\xc8\xdf\x8d\x88\xf7\xabo\x9a=W\xa1XI\xda\x84\xf8F\xe2\x9cs\xe6s\xd1l\xfb\xa5F\xd1\xf6U\xbc\xdc\xa3\x97X\x97\xdf4\xaa5,\xc5\xd6x\x95\xc0\xf1\xad\x9c&lt;\xcd\x94A\x86\x97$&amp;\xa99~MH\xfe+\xa5\xda\xfe\x9c\xd3@\xf0\x94/$\xfaJ\x91\x8fi\xb3#\xa7t&amp;\xcd\xe83\xc1F\xafu\x87h\xd2&lt;z\xfe\xf9\x9c5
\x91g\xb3F!\x84i\xbb\xf0\xaf$\x8e\x9a\xad\xc2+B&gt;b6r\xb5\x81\xb6q\xa9\x84`Z\xc6\xd1xN\xd2\xb4\xfcY\xac5\x93&gt;`\xc8\xec\xcd\x91u\xce\xd6\x91\x92^7B&gt;b\xce\x8b\x90\xbf\x868J\x9a\xed\xa2qX\xfd\x9e^\xc3I\xc1\xe8\x82\xcbf\xfd\xb8~\x86\xd53l,\x8e\xf7G\xd4J\xe4&amp;\xa7?\xe924\xa3\x9aY	\xbd\x84Vj\x9f\xaa\x874&gt;\xa82
\xf1\xb9&gt;\xe5zx
7\x96\xc6\xbcP\xae\x82{\xff\xd1\xda7\xc2\xab\xf8\x82\xc09.}\xcf\xa5\xef\xb9\xf4=\xa1\xd2\xb77#}g\xc1\xd3\x8b[\xdeFn[\xc4\xfb\xae1\xda\xd74.(cWr\xcd\xc8\xc7T\xaf\x93)\xd89\x9f\xc0\xec\xfdh&gt;\x9e\xf1\xed\xfa\xd9$\x84\xaf\x9aY-#\x90K\x81\xb3A$\xb8\xfc\x8b\xca\xf0*\xc4	\xe8d[%	\xcbT\xd3e7\x8a\x9eBn\xe9S\xf5J\x95\xd7\xe5\xaf\xb9(\xb8&lt;[\xe4\xe9\xaf\xa1t&gt;,\xcf\xf9&lt;_\xe7\xb4\xcd3C\xb7rK\xea\xb6\x94\xbe\xb5&amp;8J\xf4\xb1\xccpN\xcb;g&lt;\x92\xb6w\xa05\xfb\xf6]v\xe4#\xa50S\x97C\xb8B\xbem\xba\x9d\xdc:8\x9e\x98\x91\xb9
\xd3R\x90o\xc3\xf9\xe9\xc5x\xe29\xd9\xb9}\x98Wm\xe7\xd8\xd1\xd1\xfb\xe7\xc1Q\xb0\xa3\xef&lt;\x96\xc7\x88\xf2\xa2!\xee\xa1\x86\x98\xcf\xc3C\x87y{_\x98g\x95\xc6P4ml\xac$,F\xb7`\xb8\xd7\xf1,\xe0d`-\xa0\x83\xafQ\xf2RU`1[\xc6+\x90\xa2|L\x8cE\xe8p\xe7\x97\_\xe3\xd1\x92\xe3\xdb\xa6e\xb5n\xaf)wm"R9\xc2i\x98g\xab\xca\xdee\xb1\xc1U\xcfU[\xf2\xb0\xbej=\xb4N\xcf\xfeY\xad\xc8\x9fNHc\x94\xa6J\xa2\xf3S\xbe\xe7+I\xc4U8\xbfE3\xb6\x97\xbc\xe3\xe6\xc7qNS\xb8v\xb62\xb9\xbb9\xa9ze1g\xa6\xf2\xdf-	,[\x88Y\xe2M]\xed\xd5\xe7\x9b\x9c\xaez"v\xfa\x97w\xc1`\xf2\xfdp\xc9G\xe5;\xe7_\xf4]C\xae~\xf6\xdd\xe3\xfan\x93;HL\x9cy\xc5tE#\x952\xe4P\xee\x92\x90\xcd\x94\xc9D\xf0\x82d\xa6\x80\x98\xfa\xbd\xf2\xb9)\xce\xad&gt;9E,\x83\x86N^\xd2%\x8a\xb0!r\xe3\xef\xef\x93jw\x8c\xd7\xfa,\x81m\x84T2d\xd5\xcaC\x89\xc1=3rC\xd8T%\xf3\xae\xda&amp;\x85\xdb\xe2T\xcd\xbb\xbe&amp;`K\xc3zn\x9d-'\xff\xdb^\xd4=\xb4=F\xf3\xa3\x99\xe0\xb3\x87s\x9bz\xb8\xc2E\xac\xffX\xd6\xf92\xdf9p\xdb:\xde^\xe6,C\xa4~\xc1}\x8a\x8a\x80\xabb\xbe\xba\xafO\xf9%\x9c;\xb4{\xf1\x81 \x9b\xfc\xd6\xdb\xa4\xf6\xdd\xe0|\xd4\xabZ\xa5d+?K|\x92c\x8c[\xf44_\x8fb\xad\xa6\xb1\xad\xc6\xda1y\x80X\xf3\xa1f8\xdf\x87E\x9a3\xd5\x8b\xac9\x8d
oA\xd5@\xe5?\xdb\xd4h\xf64\x91^1\x99\xb66\xa3\xe4N
&lt;\xdc\xfe\xef\xb0\xc2\xc4\x8e\xe1\xed\x8b\xbfPK\xafN\xb18\x8fxl/worksheets/sheet1.xmlU\x91\xddn\x84 \x85_\x85\xf0\xc5\xdd\xfe\xa4i\x90\xa4\xeb\xb6i\xef6\xdb\xb4\xbdfuT\xb2 P\xdb\xb7/\xb0\xab\xc1+\xcf\xcc\xe7\x9c9\xe8\xa4\xcd\xd9\xb6\xfd*\xd9\xd9\xb7\xce\xf5O\x84\xd8\xb2\xc5\xed\x8d\xee\xa1\xf3\xa4\xd6Fq\xe7K\xd3\xdb\xe0UR\x92l\xb3\xec\x81(.:\xcch\xec\xa3zpRtp0\xc8Jq\xf3\xb7\xa9\xa7o\xf0\xdc8\x8a\xa6u\xb1A\xedy\xe0&gt;{?\xe0K\xb2\xf8D\xf1%`\xb2\x89F!\xf3I\xebs(\xde\xabga5H(\x9d\xd0\xe2\xfe3BR\xe6\xf89,\xfc1P_\xe4\xe2&amp;S=\xdb\xbf\xc63}\x8a\xb7Ph\xf9-*\xd7\xe6\xf8\xa3
j&gt;Hw\xd4\xd3\\xa3\xdfG\xc38\xb7\xe7\x8e3j\xf4\x84L\xb8\x89\xd12\x88\xb0\xd2\xffh}=\xb2\x8c\x92\xd1\xaf,\xafl\x97\xb2\xcd\x9a)\xdb\xae\xd9&gt;e\xb7k\xf6\x92\xb2\xbb\x85\x9fk&gt;\xf6\x94,\xaf\xce\xfePK\xafNB\xe8_Pxl/worksheets/sheet2.xmlU\x91\xd1N\x830\x86_\xa5\xe9X4\xd9\Li\xe2\x98F\xef\x96\xf5\xba\x834k)\xb6\xf4\xedm\xbbA\xca\xff9\xe7?\xffI\xe9\xa4\xcd\xc5\xb6\xfd*\xd9\xd9\xb7\xce\xf5O\x84\xd8\xb2\xc5\xed\x9d\xee\xa1\xf3\xa4\xd6Fq\xe7K\xd3\xdb\xe0UR\x92&lt;d\xd9\x96(.:\xcch\xec\xa3zpRtp4\xc8Jq\xf3\xb7\xa9\xa7\xdf\xe3\xb9qM\xebb\x830\xda\xf3&gt;\xc0}\xf6~\xc0\x97d\xf1\x89\xe2K\xc0d\x8dB\xe6\xb3\xd6\x97P\xbcW9\xce\xc2j\x90P:\xa1;\xc4\xfdg\x84\xa4\xcc\xf1sX\xf8c\xa0\xbe\xca\xc5;L\xa6z\xb6\x8dg\xfagn\xa1\xd0\xf2[T\xae\xcd\xf1\xa3
j&gt;Hw\xd2\xd3\xdc\xa2o\xa2a\x9c;p\xc75zB&amp;\xdc\xc4hDX\xe9\xb4\xbeYF\xc9\xe8W\x967\xb6O\xd9f\xcd\x8a\x94m\xd7\xec\x90\xb2\xc75{I\xd9na\xc4\xe7\x9a\x8f\xbd%\xcb\xab\xb3PK\xafNC4\xfc\xd7\xd5xl/sharedStrings.xml\x8d\x91\xcbn\xc3 E%r\xa4,\xcbc\x86\xc1$\xc4\x9b|\x89\xd5\xd2\xdaR\xc0\xae\xc1R??`7U\xa8\xea\xea\xe8\xea\\xc1\xd8\xd3a\xe3\xe7\xean\xd3\xd2\xb51\xcd\xe1\xcb\xdfC\xbc6CJ\xf3\x99\xb1\xf8:8\xdf\xc7\x97iv!\x9b\xf7i\xf1}\xcaq\xf9`q^\\xff\xe7\x92\xbf3\xc991\xdf\x8f\xa1\xe9l;\x9b\xba\xd3\xa4\xbc\x9c\x8eR\xa0Q\xcbRgYq?^ \xa8\xe2	\xa1-D;j}\xa9\x85.@\xe6^\xc5?\xcfQ\x86\xfe\xf2`y&amp;)\xd9nY\xb4\xca|gS\x9b\x93\xa3\xa2}N\xb9Q\x90\xd1\x85F\xffO\xffI\x89B\xd4\xe6\xe2\xa0\xcb\xfd\xc09\xdf\xdf\x83\xa3\xd8H\x86j\xfdm\xbf\xdc\xd7 \xf5/\xcf\xf2vPK\xafNR\xc8\x94JwWxl/styles.xml\xa5S\xcbn\x830\xfc\xe4(\xa9\x91Z\x87V\x8aT\xa9\xad"%\x87^,`\xc9j/\xf4\xeb\xeb\x81\xd0\xf6\xd6\x93g\xc7\xbb3cl2\x83\x87S\x80\xd1(\xb849\xe9\xfb\xc786U\x82\x9a;\xd5\x83\xb4;\x8d\xd2\x82\xa2-u\x9b^\xad\x8d&lt;Nw\xbb},(\x93\xa4\xc8\xe4 MT\xa9AbNv$\x8a\x8b\xacQr\xa5\xdbKD\xcas\xf2L9+5\xcdT0&gt;&gt;\xf5L\xa5\xb8\xd2\xda4\xe0\xc6e\xbeBC2\x97.\xea\xac%\x98T\xda\xb3q\xb0\xf1\x8b\xb1\xc2\x8c\xf3%EJQd=E-\xb6C\x9e\xfd\xbd7\xe3\xf3\xd4\xdb\xad\xa6S\x92\xde\x93\x9b	\xbfX\x9bR\xe9\xf4\xe6\xb8\x81*2\xba	\xcd\xda\xceT\xbd[J\x85\xa8\x84C5\xa3\xad\x924$\xb9\x8e\xcd\xc0jW\xc0\xf9\xc9\xdd\xd7G\xb31\x9b(\xf4\xbc\xd4\xfe\x9b\xbb(Wh?\xc3p7s\xe1n\xe5\x82\xf8\xffu{vQ\xf84\xd8I_
\xe1\xa8\xa1a\xa3\xaf\xc7\xe6G\x80\xc5\xdb'\xd9\xd8/lT\x8c#\x93\xf3h\xc7\xea\x82\xbc{C9ywo\x93\xff!4\xed\x87\xa6\xa5}\xe4\xdbUCC\x8eG\xd9o\xe6d\xc5\xaf\xee\x92\x92\xfd\xd2u^$r\xb2\xe27\xa8\xd9 \x82\xe3\xfa+\xdfPK\xafNG#\xbe[k\x84xl/workbook.xml\x8d\x91\xbbN\xc30\x86_%\xf2i#\xa8D\xd5t\xa1*!@uw\x92\x93\xe6_"\xdbi\xa1;012+\xccOC\x8f\x81\x9d(\x93}.\xfe\xfe\xff\xf7fR\x9dER\x9ey\xe7\x9c	\xddU!\xc9\x8c\xc9\xbb\xbe\xaf\xe38\xd52ak\xa9T\x9c\xaa\x89/\xd3c\xc8\xb8\xe0 \x8c\xb4Z_\xa3\xa5\xd0\xe6\x9aT\xb4\xff\xb0t\xae\x80&amp;:0\x9cU(NQ\x90~\xafvv\xac&lt;\xbfI\xb1SrY\x97#\xcc\xf4w\x83=j;\xa6pJ\xa3\x90\xb4\x88G#w\x91Pj`O\xc9"G1	I\x9bx)*mFN\xbd\xec\xe4(\x90\xe3\x922\xd2\x99\x9c\xedK\x85s)e\xa3XI\xc6\xcaW\xaeP&gt;\xb2
\xfa+3e0\xfe\xd1hht\xe2\xd6\x92N\xcb\xa7\xa81B\x86\xe6"$\xe5\x9dqc\xf8\x8d9\xcaU\xd4\xa7'(\x87\x90|&lt;\xbf.\xafW\x8b\xcb\xe5\xcd\xed\xda\xdb\xe2i\xf5p\xb5\xee4m\xc70\xa9\xf4\x8d\x9d\xacU]\xb45L\xda\xa5\xc0\xaf\xb0\xf7\xbb\xc5\xea\xfe\xa5	\xfe\x80\x95\xdb\xdab)
H-V\xbb\x82\x9d=\xb6\xbf\xe5\x8e\xd2V\xb0\xb9\xd5\xde\xb6;.\xdb\xb1\xb9#q ie\xd7Q\xea\xebPK\xafN\xaf\xebQy\xc6xl/_rels/workbook.xml.rels\xbd\x93K\x820@\xafBzF\xf1\xb30\xe0\xca[\xf5\x94m\xd3#\xdc\xde\xa6 A\xe3\x82\xb8i\xd3L\xf3\xde[\xb4\xe9[\xc9\x8d\xd1\xa4KQ\xdf\xb5\x9a2\xa1\x98\xed	\x80
\x85\x9d\xa4\xd8X\xd4~R\xd7I\xf6GW\x83\x95\xc5C\xd6\xc9fs7e\x88s:eFy\x99	\x97\x97[\xdd\xa5\xab\x913}/\xe3\xa4\x99 l\xdb\xd8\xfc\x95\xc1\xe2/zSUM\x81S&lt;;\xd4\xbcP1
D\xcbE\xc9\xf7\xa2\xe4\xffE\xbb\xb1\x88\x94tX\xde\xd85\xba\xa6\xb5Kf\xf0\x8f5\xfbI-\xae\x9f\xa8\xfd\x87\xd1\xcf\xde\x82\xd6\xd5J\xa0\x86\x98\xfd\x85\xf3PK\xafN&gt;\x98\x8a%\xe9[Content_Types].xml\xb5TMO1\xfd+\x9b\xbd\xb6\xc8\xc1\x83.\xeaUI\xf4\xd4v\x96m\xe8Wf\x84\xeflA\xc9\x9a`\x80K\xdb\xe9\x9by\xef\xb5\x9dt\xfa\xb1\xcb@\xd56\xf8H\xb3\xbac\xce\x8fJ\x91\xe9 hjR\x86(H\x9b0h\x96\x97*k\xb3\xd2KP\x93\xf1\xf8A\x99"\x8f\xb8\xe7\xa8\xe7\xd3gh\xf5\xdas\xf5\xb4\xdf\xef\xa9g\xb5\xce\xd9;\xa3\xd9\xa5\xa86\xd1\x9e\x90\x8e\x84\x82/9\xd4\xb9Lw\x92PW/[a!\xd9\x9b\xd5\x82R]\xa93$N+K,\x85o@t\xfee.\xb5\xad3`\x93Y)i(#hK\xdfP\xa7\xec;\xa3\x8b\xcb\x83\xe3\x85F~\xd5A\x88\xd5\xd6\xab_	\xcd\x8d\xf0\xce\xc3\xb0\x83\x82\U\x9a\xa55`H\xab\xfb\xf1\xfe2\xc5\x9f\x960	a\x94QPd7p@\xf1\xb4\x94T\x9fx\xd5CB\xdf?\xecY\xeaB}\xc3\xc7\xfdJ\xb8*\xeb\xa1;?\x82\xa4\xcat\xe1\xc5_\xcf\xc8\xe4\x96\xed\xde\xcfM\xd0.\xfe\xe5\xe43\xa5\xd5\xd1\x80*?\xdc\xfcPK\xafN&lt;\xe1\xa5\x85\xc0\x80_rels/.relsPK\xafN'\xe8\x87\x82\xb1\x80\xe9docProps/app.xmlPK\xafN\xf1\x90\x86\xaf\xeb\xcb\x80\x99docProps/core.xmlPK\xafN\x99\\x9c#\x9c'\x80\xb3xl/theme/theme1.xmlPK\xafN\xb18\x8f\x80\xf4xl/worksheets/sheet1.xmlPK\xafNB\xe8_P\x80:
xl/worksheets/sheet2.xmlPK\xafNC4\xfc\xd7\xd5\x80xl/sharedStrings.xmlPK\xafNR\xc8\x94JwW\x80\x88xl/styles.xmlPK\xafNG#\xbe[k\x84\x80*xl/workbook.xmlPK\xafN\xaf\xebQy\xc6\x80\xc2xl/_rels/workbook.xml.relsPK\xafN&gt;\x98\x8a%\xe9\x80\xc0[Content_Types].xmlPK\xc6</msg>
<status starttime="20190515 08:32:50.002" status="PASS" endtime="20190515 08:32:50.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.004">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002/equipment_list/export</msg>
<status starttime="20190515 08:32:50.004" status="PASS" endtime="20190515 08:32:50.004"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.004">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.004" status="PASS" endtime="20190515 08:32:50.004"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.004" status="PASS" endtime="20190515 08:32:50.005"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.005">${re} = PASS</msg>
<status starttime="20190515 08:32:50.002" status="PASS" endtime="20190515 08:32:50.005"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.005">Execution passed with message:
无需验证Json，通过。</msg>
<status starttime="20190515 08:32:50.005" status="PASS" endtime="20190515 08:32:50.005"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:50.006" status="PASS" endtime="20190515 08:32:50.006"></status>
</kw>
<status starttime="20190515 08:32:50.005" status="PASS" endtime="20190515 08:32:50.006"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>JsonReturnError</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.007">Set tag 'JsonReturnError'.</msg>
<status starttime="20190515 08:32:50.006" status="PASS" endtime="20190515 08:32:50.007"></status>
</kw>
<status starttime="20190515 08:32:50.006" status="PASS" endtime="20190515 08:32:50.007"></status>
</kw>
<status starttime="20190515 08:32:50.006" status="PASS" endtime="20190515 08:32:50.007"></status>
</kw>
<status starttime="20190515 08:32:49.998" status="PASS" endtime="20190515 08:32:50.007"></status>
</kw>
<status starttime="20190515 08:32:47.131" status="PASS" endtime="20190515 08:32:50.007"></status>
</kw>
<doc>接口名:导出设备清单

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,无Json数据返回。</doc>
<tags>
<tag>JsonReturnError</tag>
<tag>model:server_project</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:47.129" status="PASS" endtime="20190515 08:32:50.007">无需验证Json，通过。</status>
</test>
<test id="s1-s4-s1-t7" name="get projects equipment list export by project id Fail With Wrong Url">
<kw name="get projects equipment list export by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Get Projects Equipment List Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.032">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.008" status="PASS" endtime="20190515 08:32:50.032"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.033">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.032" status="PASS" endtime="20190515 08:32:50.033"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.033">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.033" status="PASS" endtime="20190515 08:32:50.033"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.034">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.033" status="PASS" endtime="20190515 08:32:50.034"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.034">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.034" status="PASS" endtime="20190515 08:32:50.034"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.035">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/equipment_list/export&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/equipment_list/export&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/equipment_list/export&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.035" status="PASS" endtime="20190515 08:32:50.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.036">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/equipment_list/export</msg>
<status starttime="20190515 08:32:50.035" status="PASS" endtime="20190515 08:32:50.036"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.036">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.036" status="PASS" endtime="20190515 08:32:50.036"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.036" status="PASS" endtime="20190515 08:32:50.036"></status>
</kw>
<status starttime="20190515 08:32:50.034" status="PASS" endtime="20190515 08:32:50.037"></status>
</kw>
<status starttime="20190515 08:32:50.032" status="PASS" endtime="20190515 08:32:50.037"></status>
</kw>
<status starttime="20190515 08:32:50.008" status="PASS" endtime="20190515 08:32:50.037"></status>
</kw>
<doc>接口名:导出设备清单

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.007" status="PASS" endtime="20190515 08:32:50.037"></status>
</test>
<test id="s1-s4-s1-t8" name="get projects export by project id Success">
<kw name="get projects export by project id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.101">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:50.038" status="PASS" endtime="20190515 08:32:50.101"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>NoSchema</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.104">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.103" status="PASS" endtime="20190515 08:32:50.104"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.105">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.104" status="PASS" endtime="20190515 08:32:50.106"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.107">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.106" status="PASS" endtime="20190515 08:32:50.107"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.108">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.107" status="PASS" endtime="20190515 08:32:50.108"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.109">${re} = FAIL</msg>
<status starttime="20190515 08:32:50.109" status="PASS" endtime="20190515 08:32:50.109"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.110">${js} = FAIL</msg>
<status starttime="20190515 08:32:50.110" status="PASS" endtime="20190515 08:32:50.110"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.113">\x80}q(X
project_idqX f5eba7c676a811e9bafb0242c0a8b002qXproject_infoq}q(X	dots_dataq]qXproject_dataq}qXcamera_brand_dataq	}q
uu.</msg>
<status starttime="20190515 08:32:50.112" status="PASS" endtime="20190515 08:32:50.113"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.114">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002/export</msg>
<status starttime="20190515 08:32:50.113" status="PASS" endtime="20190515 08:32:50.114"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.116">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.115" status="PASS" endtime="20190515 08:32:50.116"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.116" status="PASS" endtime="20190515 08:32:50.117"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.118">${re} = PASS</msg>
<status starttime="20190515 08:32:50.111" status="PASS" endtime="20190515 08:32:50.118"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.120">Execution passed with message:
无需验证Json，通过。</msg>
<status starttime="20190515 08:32:50.119" status="PASS" endtime="20190515 08:32:50.120"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:50.121" status="PASS" endtime="20190515 08:32:50.122"></status>
</kw>
<status starttime="20190515 08:32:50.118" status="PASS" endtime="20190515 08:32:50.122"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>JsonReturnError</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.126">Set tag 'JsonReturnError'.</msg>
<status starttime="20190515 08:32:50.125" status="PASS" endtime="20190515 08:32:50.126"></status>
</kw>
<status starttime="20190515 08:32:50.124" status="PASS" endtime="20190515 08:32:50.126"></status>
</kw>
<status starttime="20190515 08:32:50.123" status="PASS" endtime="20190515 08:32:50.127"></status>
</kw>
<status starttime="20190515 08:32:50.102" status="PASS" endtime="20190515 08:32:50.127"></status>
</kw>
<status starttime="20190515 08:32:50.038" status="PASS" endtime="20190515 08:32:50.127"></status>
</kw>
<doc>接口名:导出项目文件

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,无Json数据返回。</doc>
<tags>
<tag>JsonReturnError</tag>
<tag>model:server_project</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.037" status="PASS" endtime="20190515 08:32:50.128">无需验证Json，通过。</status>
</test>
<test id="s1-s4-s1-t9" name="get projects export by project id Fail With Wrong Url">
<kw name="get projects export by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Get Projects Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.155">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.132" status="PASS" endtime="20190515 08:32:50.155"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.156">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.156" status="PASS" endtime="20190515 08:32:50.156"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.156">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.156" status="PASS" endtime="20190515 08:32:50.156"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.156">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.156" status="PASS" endtime="20190515 08:32:50.156"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.157">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.157" status="PASS" endtime="20190515 08:32:50.157"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.158">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/export&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/export&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/export&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.157" status="PASS" endtime="20190515 08:32:50.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.158">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/export</msg>
<status starttime="20190515 08:32:50.158" status="PASS" endtime="20190515 08:32:50.158"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.158">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.158" status="PASS" endtime="20190515 08:32:50.158"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.159" status="PASS" endtime="20190515 08:32:50.159"></status>
</kw>
<status starttime="20190515 08:32:50.157" status="PASS" endtime="20190515 08:32:50.159"></status>
</kw>
<status starttime="20190515 08:32:50.155" status="PASS" endtime="20190515 08:32:50.159"></status>
</kw>
<status starttime="20190515 08:32:50.131" status="PASS" endtime="20190515 08:32:50.159"></status>
</kw>
<doc>接口名:导出项目文件

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.129" status="PASS" endtime="20190515 08:32:50.159"></status>
</test>
<test id="s1-s4-s1-t10" name="put projects by project id Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.160">${essential_params} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002'}</msg>
<status starttime="20190515 08:32:50.160" status="PASS" endtime="20190515 08:32:50.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader}</arg>
<arg>mobile=${mobile}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.161">${unessential_params} = {'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<status starttime="20190515 08:32:50.161" status="PASS" endtime="20190515 08:32:50.161"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects by project id success 204</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.162">params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:50.162">@{results} = [ {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': ...</msg>
<status starttime="20190515 08:32:50.161" status="PASS" endtime="20190515 08:32:50.162"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.206">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:50.163" status="PASS" endtime="20190515 08:32:50.206"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.207">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.207" status="PASS" endtime="20190515 08:32:50.207"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.208">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.207" status="PASS" endtime="20190515 08:32:50.208"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.208">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.208" status="PASS" endtime="20190515 08:32:50.208"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.209">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.208" status="PASS" endtime="20190515 08:32:50.209"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.210"></msg>
<status starttime="20190515 08:32:50.210" status="PASS" endtime="20190515 08:32:50.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.211">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.211" status="PASS" endtime="20190515 08:32:50.211"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.212">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.211" status="PASS" endtime="20190515 08:32:50.212"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.212" status="PASS" endtime="20190515 08:32:50.212"></status>
</kw>
<status starttime="20190515 08:32:50.210" status="PASS" endtime="20190515 08:32:50.213"></status>
</kw>
<status starttime="20190515 08:32:50.206" status="PASS" endtime="20190515 08:32:50.213"></status>
</kw>
<status starttime="20190515 08:32:50.162" status="PASS" endtime="20190515 08:32:50.213"></status>
</kw>
<status starttime="20190515 08:32:50.162" status="PASS" endtime="20190515 08:32:50.213"></status>
</kw>
<status starttime="20190515 08:32:50.162" status="PASS" endtime="20190515 08:32:50.213"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.256">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:50.215" status="PASS" endtime="20190515 08:32:50.257"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.260">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.258" status="PASS" endtime="20190515 08:32:50.260"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.261">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.260" status="PASS" endtime="20190515 08:32:50.261"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.263">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.262" status="PASS" endtime="20190515 08:32:50.263"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.264">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.263" status="PASS" endtime="20190515 08:32:50.265"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.267"></msg>
<status starttime="20190515 08:32:50.266" status="PASS" endtime="20190515 08:32:50.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.269">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.268" status="PASS" endtime="20190515 08:32:50.269"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.270">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.269" status="PASS" endtime="20190515 08:32:50.271"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.271" status="PASS" endtime="20190515 08:32:50.272"></status>
</kw>
<status starttime="20190515 08:32:50.265" status="PASS" endtime="20190515 08:32:50.273"></status>
</kw>
<status starttime="20190515 08:32:50.257" status="PASS" endtime="20190515 08:32:50.273"></status>
</kw>
<status starttime="20190515 08:32:50.214" status="PASS" endtime="20190515 08:32:50.273"></status>
</kw>
<status starttime="20190515 08:32:50.213" status="PASS" endtime="20190515 08:32:50.273"></status>
</kw>
<status starttime="20190515 08:32:50.213" status="PASS" endtime="20190515 08:32:50.273"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Success 204">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.324">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:50.277" status="PASS" endtime="20190515 08:32:50.324"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.327">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.326" status="PASS" endtime="20190515 08:32:50.327"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.329">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.328" status="PASS" endtime="20190515 08:32:50.329"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.330">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.329" status="PASS" endtime="20190515 08:32:50.330"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.332">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.331" status="PASS" endtime="20190515 08:32:50.332"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.335"></msg>
<status starttime="20190515 08:32:50.334" status="PASS" endtime="20190515 08:32:50.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.336">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.335" status="PASS" endtime="20190515 08:32:50.336"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.338">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.337" status="PASS" endtime="20190515 08:32:50.338"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.338" status="PASS" endtime="20190515 08:32:50.339"></status>
</kw>
<status starttime="20190515 08:32:50.333" status="PASS" endtime="20190515 08:32:50.340"></status>
</kw>
<status starttime="20190515 08:32:50.325" status="PASS" endtime="20190515 08:32:50.340"></status>
</kw>
<status starttime="20190515 08:32:50.275" status="PASS" endtime="20190515 08:32:50.340"></status>
</kw>
<status starttime="20190515 08:32:50.274" status="PASS" endtime="20190515 08:32:50.341"></status>
</kw>
<status starttime="20190515 08:32:50.274" status="PASS" endtime="20190515 08:32:50.341"></status>
</kw>
<status starttime="20190515 08:32:50.162" status="PASS" endtime="20190515 08:32:50.341"></status>
</kw>
<status starttime="20190515 08:32:50.161" status="PASS" endtime="20190515 08:32:50.341"></status>
</kw>
<doc>接口名:修改项目

请求方式:Put

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.159" status="PASS" endtime="20190515 08:32:50.341"></status>
</test>
<test id="s1-s4-s1-t11" name="put projects by project id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.347">${essential_params} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002'}</msg>
<status starttime="20190515 08:32:50.345" status="PASS" endtime="20190515 08:32:50.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader}</arg>
<arg>mobile=${mobile}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.349">${unessential_params} = {'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<status starttime="20190515 08:32:50.348" status="PASS" endtime="20190515 08:32:50.349"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects by project id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.351">params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:50.352">@{results} = [ {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': ...</msg>
<status starttime="20190515 08:32:50.350" status="PASS" endtime="20190515 08:32:50.352"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.377">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.354" status="PASS" endtime="20190515 08:32:50.377"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.378">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.377" status="PASS" endtime="20190515 08:32:50.378"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.378">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.378" status="PASS" endtime="20190515 08:32:50.378"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.398">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.379" status="PASS" endtime="20190515 08:32:50.398"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.399">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.398" status="PASS" endtime="20190515 08:32:50.399"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.400">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.399" status="PASS" endtime="20190515 08:32:50.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.400">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]</msg>
<status starttime="20190515 08:32:50.400" status="PASS" endtime="20190515 08:32:50.400"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.401">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.401" status="PASS" endtime="20190515 08:32:50.401"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.401" status="PASS" endtime="20190515 08:32:50.401"></status>
</kw>
<status starttime="20190515 08:32:50.399" status="PASS" endtime="20190515 08:32:50.401"></status>
</kw>
<status starttime="20190515 08:32:50.377" status="PASS" endtime="20190515 08:32:50.402"></status>
</kw>
<status starttime="20190515 08:32:50.353" status="PASS" endtime="20190515 08:32:50.402"></status>
</kw>
<status starttime="20190515 08:32:50.352" status="PASS" endtime="20190515 08:32:50.402"></status>
</kw>
<status starttime="20190515 08:32:50.352" status="PASS" endtime="20190515 08:32:50.402"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.426">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.403" status="PASS" endtime="20190515 08:32:50.427"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.427">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.427" status="PASS" endtime="20190515 08:32:50.427"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.428">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.427" status="PASS" endtime="20190515 08:32:50.428"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.428">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.428" status="PASS" endtime="20190515 08:32:50.428"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.428">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.428" status="PASS" endtime="20190515 08:32:50.428"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.429">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.429" status="PASS" endtime="20190515 08:32:50.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.429">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]</msg>
<status starttime="20190515 08:32:50.429" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.430">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.430" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.430" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<status starttime="20190515 08:32:50.428" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<status starttime="20190515 08:32:50.427" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<status starttime="20190515 08:32:50.402" status="PASS" endtime="20190515 08:32:50.430"></status>
</kw>
<status starttime="20190515 08:32:50.402" status="PASS" endtime="20190515 08:32:50.431"></status>
</kw>
<status starttime="20190515 08:32:50.402" status="PASS" endtime="20190515 08:32:50.431"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.455">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.431" status="PASS" endtime="20190515 08:32:50.455"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.456">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.455" status="PASS" endtime="20190515 08:32:50.456"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.456">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.456" status="PASS" endtime="20190515 08:32:50.456"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.456">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.456" status="PASS" endtime="20190515 08:32:50.457"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.457">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.457" status="PASS" endtime="20190515 08:32:50.457"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.458">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;PUT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.458" status="PASS" endtime="20190515 08:32:50.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.458">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]</msg>
<status starttime="20190515 08:32:50.458" status="PASS" endtime="20190515 08:32:50.458"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.459">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.459" status="PASS" endtime="20190515 08:32:50.459"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.459" status="PASS" endtime="20190515 08:32:50.459"></status>
</kw>
<status starttime="20190515 08:32:50.457" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.455" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.431" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.431" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.431" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.352" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<status starttime="20190515 08:32:50.349" status="PASS" endtime="20190515 08:32:50.460"></status>
</kw>
<doc>接口名:修改项目

请求方式:Put

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.343" status="PASS" endtime="20190515 08:32:50.460"></status>
</test>
<test id="s1-s4-s1-t12" name="put projects by project id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name_422}</arg>
<arg>province=${province_422}</arg>
<arg>city=${city_422}</arg>
<arg>district=${district_422}</arg>
<arg>address=${address_422}</arg>
<arg>region_id=${region_id_422}</arg>
<arg>camera_brand_id=${camera_brand_id_422}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.462">${essential_params} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo...</msg>
<status starttime="20190515 08:32:50.461" status="PASS" endtime="20190515 08:32:50.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader_422}</arg>
<arg>mobile=${mobile_422}</arg>
<arg>status=${status_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.463">${unessential_params} = {'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:50.462" status="PASS" endtime="20190515 08:32:50.463"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects by project id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.464">params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot']}
params:{'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'address': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'region_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'camera_brand_id': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'leader': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'mobile': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'status': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:50.464">@{results} = [ {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIs...</msg>
<status starttime="20190515 08:32:50.463" status="PASS" endtime="20190515 08:32:50.464"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.502">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:50.466" status="PASS" endtime="20190515 08:32:50.502"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.504">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.503" status="PASS" endtime="20190515 08:32:50.504"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.505">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.504" status="PASS" endtime="20190515 08:32:50.505"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.506">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.505" status="PASS" endtime="20190515 08:32:50.506"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.507">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.506" status="PASS" endtime="20190515 08:32:50.507"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.508">${re} = FAIL</msg>
<status starttime="20190515 08:32:50.507" status="PASS" endtime="20190515 08:32:50.508"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.509">${js} = FAIL</msg>
<status starttime="20190515 08:32:50.508" status="PASS" endtime="20190515 08:32:50.509"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.511">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:50.510" status="PASS" endtime="20190515 08:32:50.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.512">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.511" status="PASS" endtime="20190515 08:32:50.512"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.513">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.512" status="PASS" endtime="20190515 08:32:50.513"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.513" status="PASS" endtime="20190515 08:32:50.514"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.514">${re} = PASS</msg>
<status starttime="20190515 08:32:50.509" status="PASS" endtime="20190515 08:32:50.514"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:50.516" status="PASS" endtime="20190515 08:32:50.516"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:50.516" status="PASS" endtime="20190515 08:32:50.521"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:50.522" status="PASS" endtime="20190515 08:32:50.522"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.523">${js} = PASS</msg>
<status starttime="20190515 08:32:50.515" status="PASS" endtime="20190515 08:32:50.523"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:50.524" status="PASS" endtime="20190515 08:32:50.525"></status>
</kw>
<status starttime="20190515 08:32:50.523" status="PASS" endtime="20190515 08:32:50.525"></status>
</kw>
<status starttime="20190515 08:32:50.503" status="PASS" endtime="20190515 08:32:50.525"></status>
</kw>
<status starttime="20190515 08:32:50.465" status="PASS" endtime="20190515 08:32:50.525"></status>
</kw>
<status starttime="20190515 08:32:50.464" status="PASS" endtime="20190515 08:32:50.526"></status>
</kw>
<status starttime="20190515 08:32:50.464" status="PASS" endtime="20190515 08:32:50.526"></status>
</kw>
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.579">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:50.528" status="PASS" endtime="20190515 08:32:50.579"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.582">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.581" status="PASS" endtime="20190515 08:32:50.582"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.583">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.582" status="PASS" endtime="20190515 08:32:50.584"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.585">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.584" status="PASS" endtime="20190515 08:32:50.585"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.586">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.585" status="PASS" endtime="20190515 08:32:50.587"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.588">${re} = FAIL</msg>
<status starttime="20190515 08:32:50.587" status="PASS" endtime="20190515 08:32:50.588"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.589">${js} = FAIL</msg>
<status starttime="20190515 08:32:50.588" status="PASS" endtime="20190515 08:32:50.589"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.592">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:50.591" status="PASS" endtime="20190515 08:32:50.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.593">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.592" status="PASS" endtime="20190515 08:32:50.593"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.595">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.594" status="PASS" endtime="20190515 08:32:50.595"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.596" status="PASS" endtime="20190515 08:32:50.596"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.597">${re} = PASS</msg>
<status starttime="20190515 08:32:50.590" status="PASS" endtime="20190515 08:32:50.597"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:50.599" status="PASS" endtime="20190515 08:32:50.600"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:50.600" status="PASS" endtime="20190515 08:32:50.607"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:50.607" status="PASS" endtime="20190515 08:32:50.608"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.608">${js} = PASS</msg>
<status starttime="20190515 08:32:50.598" status="PASS" endtime="20190515 08:32:50.608"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:50.610" status="PASS" endtime="20190515 08:32:50.610"></status>
</kw>
<status starttime="20190515 08:32:50.609" status="PASS" endtime="20190515 08:32:50.611"></status>
</kw>
<status starttime="20190515 08:32:50.579" status="PASS" endtime="20190515 08:32:50.611"></status>
</kw>
<status starttime="20190515 08:32:50.527" status="PASS" endtime="20190515 08:32:50.611"></status>
</kw>
<status starttime="20190515 08:32:50.526" status="PASS" endtime="20190515 08:32:50.611"></status>
</kw>
<status starttime="20190515 08:32:50.526" status="PASS" endtime="20190515 08:32:50.611"></status>
</kw>
<kw name="${kwargs} = {'project_name': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'province': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'city': ['ThisIsRobot', 'ThisIsRobot', 'ThisIsRobot'], 'district': ['ThisIsRo..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.648">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:50.613" status="PASS" endtime="20190515 08:32:50.648"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.649">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.649" status="PASS" endtime="20190515 08:32:50.649"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.650">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.649" status="PASS" endtime="20190515 08:32:50.650"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.650">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.650" status="PASS" endtime="20190515 08:32:50.651"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.651">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.651" status="PASS" endtime="20190515 08:32:50.651"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.652">${re} = FAIL</msg>
<status starttime="20190515 08:32:50.651" status="PASS" endtime="20190515 08:32:50.652"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.652">${js} = FAIL</msg>
<status starttime="20190515 08:32:50.652" status="PASS" endtime="20190515 08:32:50.652"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.653">{"message": "Validation Failed", "errors": [{"field": "project_name", "code": "invalid"}, {"field": "province", "code": "invalid"}, {"field": "city", "code": "invalid"}, {"field": "leader", "code": "invalid"}, {"field": "mobile", "code": "invalid"}, {"field": "status", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:50.653" status="PASS" endtime="20190515 08:32:50.653"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.654">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.653" status="PASS" endtime="20190515 08:32:50.654"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.654">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.654" status="PASS" endtime="20190515 08:32:50.654"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.655" status="PASS" endtime="20190515 08:32:50.655"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.655">${re} = PASS</msg>
<status starttime="20190515 08:32:50.652" status="PASS" endtime="20190515 08:32:50.655"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:50.656" status="PASS" endtime="20190515 08:32:50.656"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:50.656" status="PASS" endtime="20190515 08:32:50.659"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:50.659" status="PASS" endtime="20190515 08:32:50.660"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:50.660">${js} = PASS</msg>
<status starttime="20190515 08:32:50.655" status="PASS" endtime="20190515 08:32:50.660"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:50.661" status="PASS" endtime="20190515 08:32:50.661"></status>
</kw>
<status starttime="20190515 08:32:50.660" status="PASS" endtime="20190515 08:32:50.661"></status>
</kw>
<status starttime="20190515 08:32:50.648" status="PASS" endtime="20190515 08:32:50.661"></status>
</kw>
<status starttime="20190515 08:32:50.612" status="PASS" endtime="20190515 08:32:50.661"></status>
</kw>
<status starttime="20190515 08:32:50.612" status="PASS" endtime="20190515 08:32:50.662"></status>
</kw>
<status starttime="20190515 08:32:50.611" status="PASS" endtime="20190515 08:32:50.662"></status>
</kw>
<status starttime="20190515 08:32:50.464" status="PASS" endtime="20190515 08:32:50.662"></status>
</kw>
<status starttime="20190515 08:32:50.463" status="PASS" endtime="20190515 08:32:50.662"></status>
</kw>
<doc>接口名:修改项目

请求方式:Put

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.460" status="PASS" endtime="20190515 08:32:50.662"></status>
</test>
<test id="s1-s4-s1-t13" name="delete projects by project id Success">
<kw name="delete projects by project id Success 204">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Delete Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.712">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:50.664" status="PASS" endtime="20190515 08:32:50.712"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.714">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.713" status="PASS" endtime="20190515 08:32:50.714"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.714">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.714" status="PASS" endtime="20190515 08:32:50.714"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.715">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.714" status="PASS" endtime="20190515 08:32:50.715"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.715">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.715" status="PASS" endtime="20190515 08:32:50.715"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.716"></msg>
<status starttime="20190515 08:32:50.716" status="PASS" endtime="20190515 08:32:50.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.717">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:50.717" status="PASS" endtime="20190515 08:32:50.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.718">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.717" status="PASS" endtime="20190515 08:32:50.718"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.718" status="PASS" endtime="20190515 08:32:50.718"></status>
</kw>
<status starttime="20190515 08:32:50.716" status="PASS" endtime="20190515 08:32:50.719"></status>
</kw>
<status starttime="20190515 08:32:50.713" status="PASS" endtime="20190515 08:32:50.719"></status>
</kw>
<status starttime="20190515 08:32:50.663" status="PASS" endtime="20190515 08:32:50.719"></status>
</kw>
<doc>接口名:删除项目

请求方式:Delete

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.662" status="PASS" endtime="20190515 08:32:50.719"></status>
</test>
<test id="s1-s4-s1-t14" name="delete projects by project id Fail With Wrong Url">
<kw name="delete projects by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Delete Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.747">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:50.721" status="PASS" endtime="20190515 08:32:50.747"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.750">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.748" status="PASS" endtime="20190515 08:32:50.750"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.751">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.751" status="PASS" endtime="20190515 08:32:50.752"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.753">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.752" status="PASS" endtime="20190515 08:32:50.753"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.754">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.753" status="PASS" endtime="20190515 08:32:50.754"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.756">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;DELETE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:50.756" status="PASS" endtime="20190515 08:32:50.757"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.758">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]</msg>
<status starttime="20190515 08:32:50.757" status="PASS" endtime="20190515 08:32:50.758"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.759">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.759" status="PASS" endtime="20190515 08:32:50.760"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.760" status="PASS" endtime="20190515 08:32:50.761"></status>
</kw>
<status starttime="20190515 08:32:50.755" status="PASS" endtime="20190515 08:32:50.761"></status>
</kw>
<status starttime="20190515 08:32:50.747" status="PASS" endtime="20190515 08:32:50.762"></status>
</kw>
<status starttime="20190515 08:32:50.721" status="PASS" endtime="20190515 08:32:50.762"></status>
</kw>
<doc>接口名:删除项目

请求方式:Delete

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.720" status="PASS" endtime="20190515 08:32:50.762"></status>
</test>
<kw name="Logout" type="teardown" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<status starttime="20190515 08:32:50.764" status="PASS" endtime="20190515 08:32:50.800"></status>
</kw>
<doc>server_project</doc>
<status starttime="20190515 08:32:46.041" status="PASS" endtime="20190515 08:32:50.800"></status>
</suite>
<suite id="s1-s4-s2" name="Projects.Unauthorized" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_project/projects.unauthorized.robot">
<test id="s1-s4-s2-t1" name="post projects Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.809">${essential_params} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002'}</msg>
<status starttime="20190515 08:32:50.809" status="PASS" endtime="20190515 08:32:50.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader}</arg>
<arg>mobile=${mobile}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.810">${unessential_params} = {'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<status starttime="20190515 08:32:50.810" status="PASS" endtime="20190515 08:32:50.810"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>post projects fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.811">params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:50.811">@{results} = [ {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': ...</msg>
<status starttime="20190515 08:32:50.811" status="PASS" endtime="20190515 08:32:50.811"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.940">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:50.812" status="PASS" endtime="20190515 08:32:50.940"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.943">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.942" status="PASS" endtime="20190515 08:32:50.943"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.945">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.944" status="PASS" endtime="20190515 08:32:50.945"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.946">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.945" status="PASS" endtime="20190515 08:32:50.947"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.948">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.947" status="PASS" endtime="20190515 08:32:50.948"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.952">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:50.951" status="PASS" endtime="20190515 08:32:50.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.953">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:50.952" status="PASS" endtime="20190515 08:32:50.953"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.955">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.954" status="PASS" endtime="20190515 08:32:50.955"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.956" status="PASS" endtime="20190515 08:32:50.957"></status>
</kw>
<status starttime="20190515 08:32:50.949" status="PASS" endtime="20190515 08:32:50.957"></status>
</kw>
<status starttime="20190515 08:32:50.941" status="PASS" endtime="20190515 08:32:50.957"></status>
</kw>
<status starttime="20190515 08:32:50.812" status="PASS" endtime="20190515 08:32:50.958"></status>
</kw>
<status starttime="20190515 08:32:50.811" status="PASS" endtime="20190515 08:32:50.958"></status>
</kw>
<status starttime="20190515 08:32:50.811" status="PASS" endtime="20190515 08:32:50.958"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.979">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:50.961" status="PASS" endtime="20190515 08:32:50.979"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.981">${bug_level} = None</msg>
<status starttime="20190515 08:32:50.981" status="PASS" endtime="20190515 08:32:50.981"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.982">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.982" status="PASS" endtime="20190515 08:32:50.983"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:50.984">${status_tag} = None</msg>
<status starttime="20190515 08:32:50.983" status="PASS" endtime="20190515 08:32:50.984"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.985">Set tag 'None'.</msg>
<status starttime="20190515 08:32:50.984" status="PASS" endtime="20190515 08:32:50.985"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.987">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:50.986" status="PASS" endtime="20190515 08:32:50.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.988">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:50.987" status="PASS" endtime="20190515 08:32:50.988"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:50.989">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:50.988" status="PASS" endtime="20190515 08:32:50.989"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:50.989" status="PASS" endtime="20190515 08:32:50.990"></status>
</kw>
<status starttime="20190515 08:32:50.985" status="PASS" endtime="20190515 08:32:50.990"></status>
</kw>
<status starttime="20190515 08:32:50.980" status="PASS" endtime="20190515 08:32:50.991"></status>
</kw>
<status starttime="20190515 08:32:50.959" status="PASS" endtime="20190515 08:32:50.991"></status>
</kw>
<status starttime="20190515 08:32:50.959" status="PASS" endtime="20190515 08:32:50.991"></status>
</kw>
<status starttime="20190515 08:32:50.958" status="PASS" endtime="20190515 08:32:50.991"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="post projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Post Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.006">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:50.993" status="PASS" endtime="20190515 08:32:51.006"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.007">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.007" status="PASS" endtime="20190515 08:32:51.007"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.008">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.007" status="PASS" endtime="20190515 08:32:51.008"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.008">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.008" status="PASS" endtime="20190515 08:32:51.008"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.009">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.009" status="PASS" endtime="20190515 08:32:51.009"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.011">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.010" status="PASS" endtime="20190515 08:32:51.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.011">https://camera-monitor-deployment-server-d.parkone.cn/projects</msg>
<status starttime="20190515 08:32:51.011" status="PASS" endtime="20190515 08:32:51.011"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.012">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.011" status="PASS" endtime="20190515 08:32:51.012"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.012" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:51.009" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:51.006" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:50.992" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:50.991" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:50.991" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:50.811" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<status starttime="20190515 08:32:50.810" status="PASS" endtime="20190515 08:32:51.013"></status>
</kw>
<doc>接口名:添加项目

请求方式:Post

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:50.808" status="PASS" endtime="20190515 08:32:51.014"></status>
</test>
<test id="s1-s4-s2-t2" name="get projects Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.016">${essential_params} = {}</msg>
<status starttime="20190515 08:32:51.015" status="PASS" endtime="20190515 08:32:51.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>page_size=${page_size}</arg>
<arg>page_num=${page_num}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.016">${unessential_params} = {'project_name': 'robot18137558298', 'page_size': '20', 'page_num': '1', 'status': '1'}</msg>
<status starttime="20190515 08:32:51.016" status="PASS" endtime="20190515 08:32:51.017"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.018">params:{'project_name': 'robot18137558298'}
params:{'page_size': '20', 'project_name': 'robot18137558298'}
params:{'page_size': '20', 'project_name': 'robot18137558298', 'page_num': '1'}
params:{'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:51.018">@{results} = [ {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'} | {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'} | {'page_size': '20'...</msg>
<status starttime="20190515 08:32:51.017" status="PASS" endtime="20190515 08:32:51.018"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.030">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.019" status="PASS" endtime="20190515 08:32:51.030"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.030">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.030" status="PASS" endtime="20190515 08:32:51.030"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.031">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.031" status="PASS" endtime="20190515 08:32:51.031"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.031">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.031" status="PASS" endtime="20190515 08:32:51.031"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.032">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.031" status="PASS" endtime="20190515 08:32:51.032"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.033">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.032" status="PASS" endtime="20190515 08:32:51.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.033">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:51.033" status="PASS" endtime="20190515 08:32:51.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.034">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.033" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.034" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<status starttime="20190515 08:32:51.032" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<status starttime="20190515 08:32:51.030" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<status starttime="20190515 08:32:51.019" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<status starttime="20190515 08:32:51.018" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<status starttime="20190515 08:32:51.018" status="PASS" endtime="20190515 08:32:51.034"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.045">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.035" status="PASS" endtime="20190515 08:32:51.045"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.046">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.046" status="PASS" endtime="20190515 08:32:51.046"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.046">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.046" status="PASS" endtime="20190515 08:32:51.046"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.047">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.047" status="PASS" endtime="20190515 08:32:51.047"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.047">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.047" status="PASS" endtime="20190515 08:32:51.047"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.048">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.048" status="PASS" endtime="20190515 08:32:51.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.048">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:51.048" status="PASS" endtime="20190515 08:32:51.048"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.049">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.048" status="PASS" endtime="20190515 08:32:51.049"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.049" status="PASS" endtime="20190515 08:32:51.049"></status>
</kw>
<status starttime="20190515 08:32:51.047" status="PASS" endtime="20190515 08:32:51.049"></status>
</kw>
<status starttime="20190515 08:32:51.045" status="PASS" endtime="20190515 08:32:51.049"></status>
</kw>
<status starttime="20190515 08:32:51.035" status="PASS" endtime="20190515 08:32:51.050"></status>
</kw>
<status starttime="20190515 08:32:51.035" status="PASS" endtime="20190515 08:32:51.050"></status>
</kw>
<status starttime="20190515 08:32:51.034" status="PASS" endtime="20190515 08:32:51.050"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.059">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.050" status="PASS" endtime="20190515 08:32:51.059"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.060">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.060" status="PASS" endtime="20190515 08:32:51.060"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.060">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.060" status="PASS" endtime="20190515 08:32:51.060"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.061">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.061" status="PASS" endtime="20190515 08:32:51.061"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.061">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.061" status="PASS" endtime="20190515 08:32:51.061"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.062">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.062" status="PASS" endtime="20190515 08:32:51.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.062">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:51.062" status="PASS" endtime="20190515 08:32:51.062"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.063">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.062" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.063" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<status starttime="20190515 08:32:51.061" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<status starttime="20190515 08:32:51.059" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<status starttime="20190515 08:32:51.050" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<status starttime="20190515 08:32:51.050" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<status starttime="20190515 08:32:51.050" status="PASS" endtime="20190515 08:32:51.063"></status>
</kw>
<kw name="${kwargs} = {'page_size': '20', 'status': '1', 'project_name': 'robot18137558298', 'page_num': '1'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.075">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.065" status="PASS" endtime="20190515 08:32:51.075"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.076">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.076" status="PASS" endtime="20190515 08:32:51.076"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.076">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.076" status="PASS" endtime="20190515 08:32:51.076"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.077">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.076" status="PASS" endtime="20190515 08:32:51.077"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.077">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.077" status="PASS" endtime="20190515 08:32:51.077"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.078">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.078" status="PASS" endtime="20190515 08:32:51.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.078">https://camera-monitor-deployment-server-d.parkone.cn/projects?page_size=20&amp;status=1&amp;project_name=robot18137558298&amp;page_num=1</msg>
<status starttime="20190515 08:32:51.078" status="PASS" endtime="20190515 08:32:51.078"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.079">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.078" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.079" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.077" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.075" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.064" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.064" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.064" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.018" status="PASS" endtime="20190515 08:32:51.079"></status>
</kw>
<status starttime="20190515 08:32:51.017" status="PASS" endtime="20190515 08:32:51.080"></status>
</kw>
<doc>接口名:获取项目列表

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.014" status="PASS" endtime="20190515 08:32:51.080"></status>
</test>
<test id="s1-s4-s2-t3" name="get projects equipment list export by project id Fail Without Login">
<kw name="get projects equipment list export by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Equipment List Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.092">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.081" status="PASS" endtime="20190515 08:32:51.092"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.093">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.092" status="PASS" endtime="20190515 08:32:51.093"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.093">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.093" status="PASS" endtime="20190515 08:32:51.093"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.093">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.093" status="PASS" endtime="20190515 08:32:51.093"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.094">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.094" status="PASS" endtime="20190515 08:32:51.094"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.095">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.094" status="PASS" endtime="20190515 08:32:51.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.095">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002/equipment_list/export</msg>
<status starttime="20190515 08:32:51.095" status="PASS" endtime="20190515 08:32:51.095"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.096">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.095" status="PASS" endtime="20190515 08:32:51.096"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.096" status="PASS" endtime="20190515 08:32:51.097"></status>
</kw>
<status starttime="20190515 08:32:51.094" status="PASS" endtime="20190515 08:32:51.097"></status>
</kw>
<status starttime="20190515 08:32:51.092" status="PASS" endtime="20190515 08:32:51.097"></status>
</kw>
<status starttime="20190515 08:32:51.081" status="PASS" endtime="20190515 08:32:51.097"></status>
</kw>
<doc>接口名:导出设备清单

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.080" status="PASS" endtime="20190515 08:32:51.097"></status>
</test>
<test id="s1-s4-s2-t4" name="get projects export by project id Fail Without Login">
<kw name="get projects export by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Export By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.110">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.099" status="PASS" endtime="20190515 08:32:51.110"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.111">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.110" status="PASS" endtime="20190515 08:32:51.111"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.111">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.111" status="PASS" endtime="20190515 08:32:51.111"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.112">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.111" status="PASS" endtime="20190515 08:32:51.112"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.112">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.112" status="PASS" endtime="20190515 08:32:51.112"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.113">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.112" status="PASS" endtime="20190515 08:32:51.113"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.113">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002/export</msg>
<status starttime="20190515 08:32:51.113" status="PASS" endtime="20190515 08:32:51.113"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.113">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.113" status="PASS" endtime="20190515 08:32:51.113"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.114" status="PASS" endtime="20190515 08:32:51.114"></status>
</kw>
<status starttime="20190515 08:32:51.112" status="PASS" endtime="20190515 08:32:51.114"></status>
</kw>
<status starttime="20190515 08:32:51.110" status="PASS" endtime="20190515 08:32:51.114"></status>
</kw>
<status starttime="20190515 08:32:51.098" status="PASS" endtime="20190515 08:32:51.114"></status>
</kw>
<doc>接口名:导出项目文件

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.097" status="PASS" endtime="20190515 08:32:51.114"></status>
</test>
<test id="s1-s4-s2-t5" name="get camera brands Fail Without Login">
<kw name="get camera brands Fail 403">
<kw name="Get Camera Brands" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.126">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.116" status="PASS" endtime="20190515 08:32:51.126"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.127">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.127" status="PASS" endtime="20190515 08:32:51.127"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.127">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.127" status="PASS" endtime="20190515 08:32:51.127"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.128">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.127" status="PASS" endtime="20190515 08:32:51.128"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.128">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.128" status="PASS" endtime="20190515 08:32:51.128"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.129">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.129" status="PASS" endtime="20190515 08:32:51.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.129">https://camera-monitor-deployment-server-d.parkone.cn/camera_brands</msg>
<status starttime="20190515 08:32:51.129" status="PASS" endtime="20190515 08:32:51.129"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.130">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.130" status="PASS" endtime="20190515 08:32:51.130"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.130" status="PASS" endtime="20190515 08:32:51.130"></status>
</kw>
<status starttime="20190515 08:32:51.129" status="PASS" endtime="20190515 08:32:51.130"></status>
</kw>
<status starttime="20190515 08:32:51.126" status="PASS" endtime="20190515 08:32:51.131"></status>
</kw>
<status starttime="20190515 08:32:51.115" status="PASS" endtime="20190515 08:32:51.131"></status>
</kw>
<doc>接口名:获取相机品牌信息列表

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.115" status="PASS" endtime="20190515 08:32:51.131"></status>
</test>
<test id="s1-s4-s2-t6" name="put projects by project id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.132">${essential_params} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002'}</msg>
<status starttime="20190515 08:32:51.132" status="PASS" endtime="20190515 08:32:51.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>leader=${leader}</arg>
<arg>mobile=${mobile}</arg>
<arg>status=${status}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.133">${unessential_params} = {'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<status starttime="20190515 08:32:51.132" status="PASS" endtime="20190515 08:32:51.133"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>put projects by project id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.134">params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092'}
params:{'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'robot123', 'mobile': '17851187092', 'status': '1'}</msg>
<msg level="INFO" timestamp="20190515 08:32:51.134">@{results} = [ {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': ...</msg>
<status starttime="20190515 08:32:51.133" status="PASS" endtime="20190515 08:32:51.134"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.145">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.135" status="PASS" endtime="20190515 08:32:51.145"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.146">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.146" status="PASS" endtime="20190515 08:32:51.146"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.147">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.146" status="PASS" endtime="20190515 08:32:51.147"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.147">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.147" status="PASS" endtime="20190515 08:32:51.147"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.147">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.147" status="PASS" endtime="20190515 08:32:51.147"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.148">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.148" status="PASS" endtime="20190515 08:32:51.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.149">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:51.149" status="PASS" endtime="20190515 08:32:51.149"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.149">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.149" status="PASS" endtime="20190515 08:32:51.149"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.149" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<status starttime="20190515 08:32:51.148" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<status starttime="20190515 08:32:51.146" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<status starttime="20190515 08:32:51.134" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<status starttime="20190515 08:32:51.134" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<status starttime="20190515 08:32:51.134" status="PASS" endtime="20190515 08:32:51.150"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.163">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.151" status="PASS" endtime="20190515 08:32:51.163"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.163">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.163" status="PASS" endtime="20190515 08:32:51.163"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.164">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.163" status="PASS" endtime="20190515 08:32:51.164"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.164">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.164" status="PASS" endtime="20190515 08:32:51.164"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.165">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.164" status="PASS" endtime="20190515 08:32:51.165"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.165">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.165" status="PASS" endtime="20190515 08:32:51.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.166">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:51.165" status="PASS" endtime="20190515 08:32:51.166"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.166">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.166" status="PASS" endtime="20190515 08:32:51.166"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.166" status="PASS" endtime="20190515 08:32:51.166"></status>
</kw>
<status starttime="20190515 08:32:51.165" status="PASS" endtime="20190515 08:32:51.167"></status>
</kw>
<status starttime="20190515 08:32:51.163" status="PASS" endtime="20190515 08:32:51.167"></status>
</kw>
<status starttime="20190515 08:32:51.150" status="PASS" endtime="20190515 08:32:51.167"></status>
</kw>
<status starttime="20190515 08:32:51.150" status="PASS" endtime="20190515 08:32:51.167"></status>
</kw>
<status starttime="20190515 08:32:51.150" status="PASS" endtime="20190515 08:32:51.167"></status>
</kw>
<kw name="${kwargs} = {'project_name': 'robot18137558298', 'province': '辽宁省', 'city': '沈阳市', 'district': '浑南区', 'address': '昂利软件园', 'region_id': '110108', 'camera_brand_id': '6682606a71f911e9ab610242c0a8b002', 'leader': 'r..." type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="put projects by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Put Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.177">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.168" status="PASS" endtime="20190515 08:32:51.177"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.177">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.177" status="PASS" endtime="20190515 08:32:51.177"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.178">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.177" status="PASS" endtime="20190515 08:32:51.178"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.178">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.178" status="PASS" endtime="20190515 08:32:51.178"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.179">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.178" status="PASS" endtime="20190515 08:32:51.179"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.180">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.179" status="PASS" endtime="20190515 08:32:51.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.180">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:51.180" status="PASS" endtime="20190515 08:32:51.180"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.180">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.180" status="PASS" endtime="20190515 08:32:51.180"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.181" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.179" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.177" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.167" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.167" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.167" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.134" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<status starttime="20190515 08:32:51.133" status="PASS" endtime="20190515 08:32:51.181"></status>
</kw>
<doc>接口名:修改项目

请求方式:Put

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.131" status="PASS" endtime="20190515 08:32:51.181"></status>
</test>
<test id="s1-s4-s2-t7" name="delete projects by project id Fail Without Login">
<kw name="delete projects by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Delete Projects By Project Id" library="robot_camera_monitor_deployment_server.project.ProjectLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.194">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:51.183" status="PASS" endtime="20190515 08:32:51.194"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.194">${bug_level} = None</msg>
<status starttime="20190515 08:32:51.194" status="PASS" endtime="20190515 08:32:51.194"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.195">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.195" status="PASS" endtime="20190515 08:32:51.195"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.195">${status_tag} = None</msg>
<status starttime="20190515 08:32:51.195" status="PASS" endtime="20190515 08:32:51.195"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.196">Set tag 'None'.</msg>
<status starttime="20190515 08:32:51.195" status="PASS" endtime="20190515 08:32:51.196"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.196">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:51.196" status="PASS" endtime="20190515 08:32:51.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.197">https://camera-monitor-deployment-server-d.parkone.cn/projects/f5eba7c676a811e9bafb0242c0a8b002</msg>
<status starttime="20190515 08:32:51.196" status="PASS" endtime="20190515 08:32:51.197"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.197">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:51.197" status="PASS" endtime="20190515 08:32:51.197"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:51.197" status="PASS" endtime="20190515 08:32:51.198"></status>
</kw>
<status starttime="20190515 08:32:51.196" status="PASS" endtime="20190515 08:32:51.198"></status>
</kw>
<status starttime="20190515 08:32:51.194" status="PASS" endtime="20190515 08:32:51.198"></status>
</kw>
<status starttime="20190515 08:32:51.182" status="PASS" endtime="20190515 08:32:51.198"></status>
</kw>
<doc>接口名:删除项目

请求方式:Delete

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_project</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.182" status="PASS" endtime="20190515 08:32:51.198"></status>
</test>
<doc>server_project</doc>
<status starttime="20190515 08:32:50.802" status="PASS" endtime="20190515 08:32:51.198"></status>
</suite>
<status starttime="20190515 08:32:46.039" status="PASS" endtime="20190515 08:32:51.200"></status>
</suite>
<suite id="s1-s5" name="Server Spot" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_spot">
<suite id="s1-s5-s1" name="Spots" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_spot/spots.robot">
<kw name="Login" type="setup" library="spot">
<arguments>
<arg>${admin_username}</arg>
<arg>${admin_password}</arg>
</arguments>
<status starttime="20190515 08:32:51.212" status="PASS" endtime="20190515 08:32:51.470"></status>
</kw>
<test id="s1-s5-s1-t1" name="post projects spots import by project id Success">
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.474">${project_name} = 16793922584</msg>
<status starttime="20190515 08:32:51.474" status="PASS" endtime="20190515 08:32:51.475"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>robot${project_name}</arg>
</arguments>
<assign>
<var>${project_name}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.476">${project_name} = robot16793922584</msg>
<status starttime="20190515 08:32:51.475" status="PASS" endtime="20190515 08:32:51.476"></status>
</kw>
<kw name="Post Projects" library="project">
<arguments>
<arg>project_name=${project_name}</arg>
<arg>province=${province}</arg>
<arg>city=${city}</arg>
<arg>district=${district}</arg>
<arg>address=${address}</arg>
<arg>region_id=${region_id}</arg>
<arg>camera_brand_id=${camera_brand_id}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.562">${resp} = &lt;Response [201]&gt;</msg>
<status starttime="20190515 08:32:51.477" status="PASS" endtime="20190515 08:32:51.562"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()['project_id']}</arg>
</arguments>
<assign>
<var>${project_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.564">${project_id} = f8fd3a3876a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:51.563" status="PASS" endtime="20190515 08:32:51.565"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${project_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:51.566">${project_id} = f8fd3a3876a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:51.565" status="PASS" endtime="20190515 08:32:51.566"></status>
</kw>
<kw name="Make Num" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>end=7</arg>
</arguments>
<assign>
<var>${car_position}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:51.568">${car_position} = 3627136</msg>
<status starttime="20190515 08:32:51.567" status="PASS" endtime="20190515 08:32:51.568"></status>
</kw>
<kw name="Write Xls" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>rows=5</arg>
<arg>cols_name=序号,车位编号,分类,车位长度（米）,车位宽度（米）,经度,纬度,道路名称,起始道路,终止道路</arg>
<arg>cols_value=0,${car_position},一类,5.0,3.1,123.45,41.1234,随机道路,随机道路,随机道路</arg>
<arg>sheet_name=sheet1</arg>
<arg>file_name=tests/server_spot/spot_info.xlsx</arg>
</arguments>
<status starttime="20190515 08:32:51.568" status="PASS" endtime="20190515 08:32:51.576"></status>
</kw>
<kw name="post projects spots import by project id Success 204">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>file=tests/server_spot/spot_info.xlsx</arg>
</arguments>
<kw name="Post Projects Spots Import By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.020">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:51.578" status="PASS" endtime="20190515 08:32:52.020"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.023">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.022" status="PASS" endtime="20190515 08:32:52.023"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.024">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.024" status="PASS" endtime="20190515 08:32:52.024"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.024">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.024" status="PASS" endtime="20190515 08:32:52.024"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.025">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.024" status="PASS" endtime="20190515 08:32:52.025"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.025"></msg>
<status starttime="20190515 08:32:52.025" status="PASS" endtime="20190515 08:32:52.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.026">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots/import</msg>
<status starttime="20190515 08:32:52.025" status="PASS" endtime="20190515 08:32:52.026"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.026">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.026" status="PASS" endtime="20190515 08:32:52.026"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.026" status="PASS" endtime="20190515 08:32:52.026"></status>
</kw>
<status starttime="20190515 08:32:52.025" status="PASS" endtime="20190515 08:32:52.026"></status>
</kw>
<status starttime="20190515 08:32:52.021" status="PASS" endtime="20190515 08:32:52.026"></status>
</kw>
<status starttime="20190515 08:32:51.577" status="PASS" endtime="20190515 08:32:52.027"></status>
</kw>
<doc>接口名:导入泊位

请求方式:Post

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:51.471" status="PASS" endtime="20190515 08:32:52.027"></status>
</test>
<test id="s1-s5-s1-t2" name="post projects spots import by project id Fail With Wrong Url">
<kw name="post projects spots import by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
<arg>file=tests/server_spot/spot_info.xlsx</arg>
</arguments>
<kw name="Post Projects Spots Import By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.053">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.028" status="PASS" endtime="20190515 08:32:52.053"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.054">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.053" status="PASS" endtime="20190515 08:32:52.054"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.054">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.054" status="PASS" endtime="20190515 08:32:52.054"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.055">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.055" status="PASS" endtime="20190515 08:32:52.055"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.055">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.055" status="PASS" endtime="20190515 08:32:52.055"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.056">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots/import&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;POST&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots/import&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots/import&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.056" status="PASS" endtime="20190515 08:32:52.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.057">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots/import</msg>
<status starttime="20190515 08:32:52.057" status="PASS" endtime="20190515 08:32:52.057"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.058">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.057" status="PASS" endtime="20190515 08:32:52.058"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.058" status="PASS" endtime="20190515 08:32:52.058"></status>
</kw>
<status starttime="20190515 08:32:52.056" status="PASS" endtime="20190515 08:32:52.058"></status>
</kw>
<status starttime="20190515 08:32:52.053" status="PASS" endtime="20190515 08:32:52.059"></status>
</kw>
<status starttime="20190515 08:32:52.028" status="PASS" endtime="20190515 08:32:52.059"></status>
</kw>
<doc>接口名:导入泊位

请求方式:Post

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:52.027" status="PASS" endtime="20190515 08:32:52.059"></status>
</test>
<test id="s1-s5-s1-t3" name="get projects spots by project id Success">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.061">${essential_params} = {}</msg>
<status starttime="20190515 08:32:52.060" status="PASS" endtime="20190515 08:32:52.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>spot_num=${spot_num}</arg>
<arg>spot_type=${spot_type}</arg>
<arg>road_name=${road_name}</arg>
<arg>start_road=${start_road}</arg>
<arg>end_road=${end_road}</arg>
<arg>section=${section}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.062">${unessential_params} = {'spot_num': '1010101', 'spot_type': '1', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路', 'section': '1557213000,1557213112', 'page_num': '1', 'page_size': '20'}</msg>
<status starttime="20190515 08:32:52.061" status="PASS" endtime="20190515 08:32:52.062"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects spots by project id success 200</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.063">params:{'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路'}
params:{'spot_num': '1010101', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}</msg>
<msg level="INFO" timestamp="20190515 08:32:52.063">@{results} = [ {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'} | {'spot_num': '10101...</msg>
<status starttime="20190515 08:32:52.063" status="PASS" endtime="20190515 08:32:52.063"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.065" status="PASS" endtime="20190515 08:32:52.107"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.108">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.108" status="PASS" endtime="20190515 08:32:52.108"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.109">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.108" status="PASS" endtime="20190515 08:32:52.109"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.109">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.109" status="PASS" endtime="20190515 08:32:52.109"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.110">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.109" status="PASS" endtime="20190515 08:32:52.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.110">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.110" status="PASS" endtime="20190515 08:32:52.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.111">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.111" status="PASS" endtime="20190515 08:32:52.111"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.112">[]</msg>
<status starttime="20190515 08:32:52.112" status="PASS" endtime="20190515 08:32:52.112"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.113">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.112" status="PASS" endtime="20190515 08:32:52.113"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.113">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.113" status="PASS" endtime="20190515 08:32:52.113"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.114" status="PASS" endtime="20190515 08:32:52.114"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.114">${re} = PASS</msg>
<status starttime="20190515 08:32:52.111" status="PASS" endtime="20190515 08:32:52.114"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.115" status="PASS" endtime="20190515 08:32:52.115"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.116" status="PASS" endtime="20190515 08:32:52.119"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.119" status="PASS" endtime="20190515 08:32:52.120"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.120">${js} = PASS</msg>
<status starttime="20190515 08:32:52.115" status="PASS" endtime="20190515 08:32:52.120"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.121" status="PASS" endtime="20190515 08:32:52.121"></status>
</kw>
<status starttime="20190515 08:32:52.120" status="PASS" endtime="20190515 08:32:52.122"></status>
</kw>
<status starttime="20190515 08:32:52.107" status="PASS" endtime="20190515 08:32:52.122"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.122">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.122" status="PASS" endtime="20190515 08:32:52.123"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.123">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.123" status="PASS" endtime="20190515 08:32:52.123"></status>
</kw>
<status starttime="20190515 08:32:52.065" status="PASS" endtime="20190515 08:32:52.123"></status>
</kw>
<status starttime="20190515 08:32:52.064" status="PASS" endtime="20190515 08:32:52.123"></status>
</kw>
<status starttime="20190515 08:32:52.064" status="PASS" endtime="20190515 08:32:52.123"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.125" status="PASS" endtime="20190515 08:32:52.171"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.174">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.173" status="PASS" endtime="20190515 08:32:52.175"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.175">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.175" status="PASS" endtime="20190515 08:32:52.175"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.175">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.175" status="PASS" endtime="20190515 08:32:52.175"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.176">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.175" status="PASS" endtime="20190515 08:32:52.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.176">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.176" status="PASS" endtime="20190515 08:32:52.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.176">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.176" status="PASS" endtime="20190515 08:32:52.176"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.177">[]</msg>
<status starttime="20190515 08:32:52.176" status="PASS" endtime="20190515 08:32:52.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.177">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.177" status="PASS" endtime="20190515 08:32:52.177"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.177">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.177" status="PASS" endtime="20190515 08:32:52.177"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.177" status="PASS" endtime="20190515 08:32:52.178"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.178">${re} = PASS</msg>
<status starttime="20190515 08:32:52.176" status="PASS" endtime="20190515 08:32:52.178"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.178" status="PASS" endtime="20190515 08:32:52.178"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.178" status="PASS" endtime="20190515 08:32:52.180"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.180" status="PASS" endtime="20190515 08:32:52.180"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.181">${js} = PASS</msg>
<status starttime="20190515 08:32:52.178" status="PASS" endtime="20190515 08:32:52.181"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.181" status="PASS" endtime="20190515 08:32:52.181"></status>
</kw>
<status starttime="20190515 08:32:52.181" status="PASS" endtime="20190515 08:32:52.181"></status>
</kw>
<status starttime="20190515 08:32:52.172" status="PASS" endtime="20190515 08:32:52.181"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.182">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.181" status="PASS" endtime="20190515 08:32:52.182"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.182">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.182" status="PASS" endtime="20190515 08:32:52.182"></status>
</kw>
<status starttime="20190515 08:32:52.124" status="PASS" endtime="20190515 08:32:52.182"></status>
</kw>
<status starttime="20190515 08:32:52.124" status="PASS" endtime="20190515 08:32:52.182"></status>
</kw>
<status starttime="20190515 08:32:52.124" status="PASS" endtime="20190515 08:32:52.182"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.183" status="PASS" endtime="20190515 08:32:52.220"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.221">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.221" status="PASS" endtime="20190515 08:32:52.221"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.221">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.221" status="PASS" endtime="20190515 08:32:52.222"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.222">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.222" status="PASS" endtime="20190515 08:32:52.222"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.223">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.222" status="PASS" endtime="20190515 08:32:52.223"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.223">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.223" status="PASS" endtime="20190515 08:32:52.223"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.224">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.223" status="PASS" endtime="20190515 08:32:52.224"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.225">[]</msg>
<status starttime="20190515 08:32:52.224" status="PASS" endtime="20190515 08:32:52.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.225">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.225" status="PASS" endtime="20190515 08:32:52.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.226">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.226" status="PASS" endtime="20190515 08:32:52.226"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.226" status="PASS" endtime="20190515 08:32:52.227"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.227">${re} = PASS</msg>
<status starttime="20190515 08:32:52.224" status="PASS" endtime="20190515 08:32:52.227"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.228" status="PASS" endtime="20190515 08:32:52.228"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.228" status="PASS" endtime="20190515 08:32:52.232"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.232" status="PASS" endtime="20190515 08:32:52.233"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.233">${js} = PASS</msg>
<status starttime="20190515 08:32:52.227" status="PASS" endtime="20190515 08:32:52.233"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.234" status="PASS" endtime="20190515 08:32:52.235"></status>
</kw>
<status starttime="20190515 08:32:52.233" status="PASS" endtime="20190515 08:32:52.235"></status>
</kw>
<status starttime="20190515 08:32:52.220" status="PASS" endtime="20190515 08:32:52.235"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.236">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.235" status="PASS" endtime="20190515 08:32:52.236"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.236">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.236" status="PASS" endtime="20190515 08:32:52.237"></status>
</kw>
<status starttime="20190515 08:32:52.182" status="PASS" endtime="20190515 08:32:52.237"></status>
</kw>
<status starttime="20190515 08:32:52.182" status="PASS" endtime="20190515 08:32:52.237"></status>
</kw>
<status starttime="20190515 08:32:52.182" status="PASS" endtime="20190515 08:32:52.237"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.276">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.239" status="PASS" endtime="20190515 08:32:52.276"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.279">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.278" status="PASS" endtime="20190515 08:32:52.279"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.281">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.280" status="PASS" endtime="20190515 08:32:52.281"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.282">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.281" status="PASS" endtime="20190515 08:32:52.282"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.284">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.283" status="PASS" endtime="20190515 08:32:52.284"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.285">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.285" status="PASS" endtime="20190515 08:32:52.285"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.286">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.286" status="PASS" endtime="20190515 08:32:52.286"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.289">[]</msg>
<status starttime="20190515 08:32:52.288" status="PASS" endtime="20190515 08:32:52.289"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.290">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.290" status="PASS" endtime="20190515 08:32:52.291"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.292">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.291" status="PASS" endtime="20190515 08:32:52.292"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.293" status="PASS" endtime="20190515 08:32:52.294"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.294">${re} = PASS</msg>
<status starttime="20190515 08:32:52.287" status="PASS" endtime="20190515 08:32:52.295"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.296" status="PASS" endtime="20190515 08:32:52.297"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.298" status="PASS" endtime="20190515 08:32:52.304"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.305" status="PASS" endtime="20190515 08:32:52.305"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.306">${js} = PASS</msg>
<status starttime="20190515 08:32:52.295" status="PASS" endtime="20190515 08:32:52.306"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.307" status="PASS" endtime="20190515 08:32:52.308"></status>
</kw>
<status starttime="20190515 08:32:52.306" status="PASS" endtime="20190515 08:32:52.308"></status>
</kw>
<status starttime="20190515 08:32:52.277" status="PASS" endtime="20190515 08:32:52.308"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.309">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.308" status="PASS" endtime="20190515 08:32:52.309"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.310">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.309" status="PASS" endtime="20190515 08:32:52.310"></status>
</kw>
<status starttime="20190515 08:32:52.238" status="PASS" endtime="20190515 08:32:52.310"></status>
</kw>
<status starttime="20190515 08:32:52.237" status="PASS" endtime="20190515 08:32:52.310"></status>
</kw>
<status starttime="20190515 08:32:52.237" status="PASS" endtime="20190515 08:32:52.310"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.312" status="PASS" endtime="20190515 08:32:52.356"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.358">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.357" status="PASS" endtime="20190515 08:32:52.358"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.359">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.358" status="PASS" endtime="20190515 08:32:52.359"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.360">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.359" status="PASS" endtime="20190515 08:32:52.360"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.361">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.360" status="PASS" endtime="20190515 08:32:52.361"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.362">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.361" status="PASS" endtime="20190515 08:32:52.362"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.363">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.362" status="PASS" endtime="20190515 08:32:52.363"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.365">[]</msg>
<status starttime="20190515 08:32:52.364" status="PASS" endtime="20190515 08:32:52.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.366">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.365" status="PASS" endtime="20190515 08:32:52.366"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.367">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.366" status="PASS" endtime="20190515 08:32:52.367"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.367" status="PASS" endtime="20190515 08:32:52.368"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.368">${re} = PASS</msg>
<status starttime="20190515 08:32:52.363" status="PASS" endtime="20190515 08:32:52.368"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.370" status="PASS" endtime="20190515 08:32:52.370"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.371" status="PASS" endtime="20190515 08:32:52.378"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.379" status="PASS" endtime="20190515 08:32:52.380"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.380">${js} = PASS</msg>
<status starttime="20190515 08:32:52.369" status="PASS" endtime="20190515 08:32:52.380"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.381" status="PASS" endtime="20190515 08:32:52.382"></status>
</kw>
<status starttime="20190515 08:32:52.380" status="PASS" endtime="20190515 08:32:52.382"></status>
</kw>
<status starttime="20190515 08:32:52.356" status="PASS" endtime="20190515 08:32:52.382"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.383">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.382" status="PASS" endtime="20190515 08:32:52.383"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.384">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.383" status="PASS" endtime="20190515 08:32:52.384"></status>
</kw>
<status starttime="20190515 08:32:52.311" status="PASS" endtime="20190515 08:32:52.384"></status>
</kw>
<status starttime="20190515 08:32:52.310" status="PASS" endtime="20190515 08:32:52.384"></status>
</kw>
<status starttime="20190515 08:32:52.310" status="PASS" endtime="20190515 08:32:52.384"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.386" status="PASS" endtime="20190515 08:32:52.430"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.431">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.431" status="PASS" endtime="20190515 08:32:52.432"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.433">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.432" status="PASS" endtime="20190515 08:32:52.433"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.434">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.433" status="PASS" endtime="20190515 08:32:52.434"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.435">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.434" status="PASS" endtime="20190515 08:32:52.435"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.436">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.435" status="PASS" endtime="20190515 08:32:52.436"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.436">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.436" status="PASS" endtime="20190515 08:32:52.437"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.438">[]</msg>
<status starttime="20190515 08:32:52.438" status="PASS" endtime="20190515 08:32:52.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.439">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.439" status="PASS" endtime="20190515 08:32:52.440"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.440">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.440" status="PASS" endtime="20190515 08:32:52.441"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.441" status="PASS" endtime="20190515 08:32:52.442"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.442">${re} = PASS</msg>
<status starttime="20190515 08:32:52.437" status="PASS" endtime="20190515 08:32:52.442"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.444" status="PASS" endtime="20190515 08:32:52.444"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.444" status="PASS" endtime="20190515 08:32:52.450"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.451" status="PASS" endtime="20190515 08:32:52.451"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.452">${js} = PASS</msg>
<status starttime="20190515 08:32:52.443" status="PASS" endtime="20190515 08:32:52.452"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.453" status="PASS" endtime="20190515 08:32:52.454"></status>
</kw>
<status starttime="20190515 08:32:52.452" status="PASS" endtime="20190515 08:32:52.454"></status>
</kw>
<status starttime="20190515 08:32:52.430" status="PASS" endtime="20190515 08:32:52.454"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.455">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.454" status="PASS" endtime="20190515 08:32:52.455"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.456">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.456" status="PASS" endtime="20190515 08:32:52.457"></status>
</kw>
<status starttime="20190515 08:32:52.385" status="PASS" endtime="20190515 08:32:52.457"></status>
</kw>
<status starttime="20190515 08:32:52.385" status="PASS" endtime="20190515 08:32:52.457"></status>
</kw>
<status starttime="20190515 08:32:52.384" status="PASS" endtime="20190515 08:32:52.457"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.459" status="PASS" endtime="20190515 08:32:52.497"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.500">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.499" status="PASS" endtime="20190515 08:32:52.500"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.501">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.500" status="PASS" endtime="20190515 08:32:52.501"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.502">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.501" status="PASS" endtime="20190515 08:32:52.502"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.503">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.502" status="PASS" endtime="20190515 08:32:52.503"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.504">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.504" status="PASS" endtime="20190515 08:32:52.504"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.505">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.505" status="PASS" endtime="20190515 08:32:52.505"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.507">[]</msg>
<status starttime="20190515 08:32:52.507" status="PASS" endtime="20190515 08:32:52.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.508">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.508" status="PASS" endtime="20190515 08:32:52.508"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.510">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.509" status="PASS" endtime="20190515 08:32:52.510"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.510" status="PASS" endtime="20190515 08:32:52.511"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.511">${re} = PASS</msg>
<status starttime="20190515 08:32:52.506" status="PASS" endtime="20190515 08:32:52.512"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.513" status="PASS" endtime="20190515 08:32:52.514"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.514" status="PASS" endtime="20190515 08:32:52.520"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.521" status="PASS" endtime="20190515 08:32:52.521"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.522">${js} = PASS</msg>
<status starttime="20190515 08:32:52.512" status="PASS" endtime="20190515 08:32:52.522"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.523" status="PASS" endtime="20190515 08:32:52.523"></status>
</kw>
<status starttime="20190515 08:32:52.522" status="PASS" endtime="20190515 08:32:52.524"></status>
</kw>
<status starttime="20190515 08:32:52.498" status="PASS" endtime="20190515 08:32:52.524"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.525">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.524" status="PASS" endtime="20190515 08:32:52.525"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.525">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.525" status="PASS" endtime="20190515 08:32:52.526"></status>
</kw>
<status starttime="20190515 08:32:52.458" status="PASS" endtime="20190515 08:32:52.526"></status>
</kw>
<status starttime="20190515 08:32:52.457" status="PASS" endtime="20190515 08:32:52.526"></status>
</kw>
<status starttime="20190515 08:32:52.457" status="PASS" endtime="20190515 08:32:52.526"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.527" status="PASS" endtime="20190515 08:32:52.575"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.578">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.576" status="PASS" endtime="20190515 08:32:52.578"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.579">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.578" status="PASS" endtime="20190515 08:32:52.579"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.581">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.580" status="PASS" endtime="20190515 08:32:52.581"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.582">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.581" status="PASS" endtime="20190515 08:32:52.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.584">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.583" status="PASS" endtime="20190515 08:32:52.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.585">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.584" status="PASS" endtime="20190515 08:32:52.585"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.588">[]</msg>
<status starttime="20190515 08:32:52.587" status="PASS" endtime="20190515 08:32:52.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.589">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.588" status="PASS" endtime="20190515 08:32:52.589"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.591">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.590" status="PASS" endtime="20190515 08:32:52.591"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.592" status="PASS" endtime="20190515 08:32:52.593"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.593">${re} = PASS</msg>
<status starttime="20190515 08:32:52.585" status="PASS" endtime="20190515 08:32:52.593"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.595" status="PASS" endtime="20190515 08:32:52.596"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.596" status="PASS" endtime="20190515 08:32:52.604"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.604" status="PASS" endtime="20190515 08:32:52.605"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.605">${js} = PASS</msg>
<status starttime="20190515 08:32:52.594" status="PASS" endtime="20190515 08:32:52.605"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.607" status="PASS" endtime="20190515 08:32:52.607"></status>
</kw>
<status starttime="20190515 08:32:52.606" status="PASS" endtime="20190515 08:32:52.607"></status>
</kw>
<status starttime="20190515 08:32:52.576" status="PASS" endtime="20190515 08:32:52.607"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.608">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.608" status="PASS" endtime="20190515 08:32:52.608"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.609">${spot_id} = None</msg>
<status starttime="20190515 08:32:52.609" status="PASS" endtime="20190515 08:32:52.609"></status>
</kw>
<status starttime="20190515 08:32:52.527" status="PASS" endtime="20190515 08:32:52.609"></status>
</kw>
<status starttime="20190515 08:32:52.526" status="PASS" endtime="20190515 08:32:52.609"></status>
</kw>
<status starttime="20190515 08:32:52.526" status="PASS" endtime="20190515 08:32:52.610"></status>
</kw>
<status starttime="20190515 08:32:52.064" status="PASS" endtime="20190515 08:32:52.610"></status>
</kw>
<status starttime="20190515 08:32:52.062" status="PASS" endtime="20190515 08:32:52.610"></status>
</kw>
<kw name="get projects spots by project id Success 200">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20190515 08:32:52.611" status="PASS" endtime="20190515 08:32:52.708"></status>
</kw>
<kw name="Expect Status is 200" library="resources">
<doc>期待响应状态是否为200 OK，返回的json格式是否符合验证。
{resp}: 响应实体。
{schema}: 对应的jsonschema校验文件。</doc>
<arguments>
<arg>${resp}</arg>
<arg>server_spot/get_projects_spots_by_project_id_200.json</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.711">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.710" status="PASS" endtime="20190515 08:32:52.711"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.713">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.712" status="PASS" endtime="20190515 08:32:52.713"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.715">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.714" status="PASS" endtime="20190515 08:32:52.715"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.716">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.715" status="PASS" endtime="20190515 08:32:52.716"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.717">${re} = FAIL</msg>
<status starttime="20190515 08:32:52.717" status="PASS" endtime="20190515 08:32:52.717"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.719">${js} = FAIL</msg>
<status starttime="20190515 08:32:52.718" status="PASS" endtime="20190515 08:32:52.719"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>200</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.722">[{"spot_id": "f93c345e76a811e991df0242c0a8b002", "spot_num": "3627141", "spot_type": "\u4e00\u7c7b", "spot_len": 5.0, "spot_wid": 3.1, "lon": "123.45", "lat": "41.1234", "road_name": "\u968f\u673a\u9053\u8def", "start_road": "\u968f\u673a\u9053\u8def", "end_road": "\u968f\u673a\u9053\u8def", "project": {"project_id": "f8fd3a3876a811e991df0242c0a8b002", "project_name": "robot16793922584", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880371.544871, "updated_time": 1557880371.544852}, "is_deleted": false, "updated_time": 1557880371.957867, "created_time": 1557880371.957886}, {"spot_id": "f93bc49276a811e991df0242c0a8b002", "spot_num": "3627140", "spot_type": "\u4e00\u7c7b", "spot_len": 5.0, "spot_wid": 3.1, "lon": "123.45", "lat": "41.1234", "road_name": "\u968f\u673a\u9053\u8def", "start_road": "\u968f\u673a\u9053\u8def", "end_road": "\u968f\u673a\u9053\u8def", "project": {"project_id": "f8fd3a3876a811e991df0242c0a8b002", "project_name": "robot16793922584", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880371.544871, "updated_time": 1557880371.544852}, "is_deleted": false, "updated_time": 1557880371.957756, "created_time": 1557880371.957776}, {"spot_id": "f93b573c76a811e991df0242c0a8b002", "spot_num": "3627139", "spot_type": "\u4e00\u7c7b", "spot_len": 5.0, "spot_wid": 3.1, "lon": "123.45", "lat": "41.1234", "road_name": "\u968f\u673a\u9053\u8def", "start_road": "\u968f\u673a\u9053\u8def", "end_road": "\u968f\u673a\u9053\u8def", "project": {"project_id": "f8fd3a3876a811e991df0242c0a8b002", "project_name": "robot16793922584", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880371.544871, "updated_time": 1557880371.544852}, "is_deleted": false, "updated_time": 1557880371.95764, "created_time": 1557880371.957662}, {"spot_id": "f93ae8ec76a811e991df0242c0a8b002", "spot_num": "3627138", "spot_type": "\u4e00\u7c7b", "spot_len": 5.0, "spot_wid": 3.1, "lon": "123.45", "lat": "41.1234", "road_name": "\u968f\u673a\u9053\u8def", "start_road": "\u968f\u673a\u9053\u8def", "end_road": "\u968f\u673a\u9053\u8def", "project": {"project_id": "f8fd3a3876a811e991df0242c0a8b002", "project_name": "robot16793922584", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880371.544871, "updated_time": 1557880371.544852}, "is_deleted": false, "updated_time": 1557880371.957505, "created_time": 1557880371.957525}, {"spot_id": "f93a77d676a811e991df0242c0a8b002", "spot_num": "3627137", "spot_type": "\u4e00\u7c7b", "spot_len": 5.0, "spot_wid": 3.1, "lon": "123.45", "lat": "41.1234", "road_name": "\u968f\u673a\u9053\u8def", "start_road": "\u968f\u673a\u9053\u8def", "end_road": "\u968f\u673a\u9053\u8def", "project": {"project_id": "f8fd3a3876a811e991df0242c0a8b002", "project_name": "robot16793922584", "province": "\u8fbd\u5b81\u7701", "city": "\u6c88\u9633\u5e02", "district": "\u6d51\u5357\u533a", "address": "\u6602\u5229\u8f6f\u4ef6\u56ed", "region_id": "110108", "leader": "", "status": 1, "mobile": "", "camera_brand": {"camera_brand_id": "6682606a71f911e9ab610242c0a8b002", "brand_name": "\u6d77\u5eb7\u5a01\u89c6", "brand_short": "hkws", "brand_model": "ATP-13,ATR-6,ATP-99", "is_deleted": false, "updated_time": 1557365159.216053, "created_time": 1557365159.21612}, "is_deleted": false, "created_time": 1557880371.544871, "updated_time": 1557880371.544852}, "is_deleted": false, "updated_time": 1557880371.957364, "created_time": 1557880371.957407}]</msg>
<status starttime="20190515 08:32:52.721" status="PASS" endtime="20190515 08:32:52.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.723">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots</msg>
<status starttime="20190515 08:32:52.722" status="PASS" endtime="20190515 08:32:52.723"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.725">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.724" status="PASS" endtime="20190515 08:32:52.725"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.726" status="PASS" endtime="20190515 08:32:52.727"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.727">${re} = PASS</msg>
<status starttime="20190515 08:32:52.719" status="PASS" endtime="20190515 08:32:52.727"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>${schema}</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:52.729" status="PASS" endtime="20190515 08:32:52.730"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:52.730" status="PASS" endtime="20190515 08:32:52.739"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:52.739" status="PASS" endtime="20190515 08:32:52.740"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:52.741">${js} = PASS</msg>
<status starttime="20190515 08:32:52.728" status="PASS" endtime="20190515 08:32:52.741"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:52.742" status="PASS" endtime="20190515 08:32:52.742"></status>
</kw>
<status starttime="20190515 08:32:52.741" status="PASS" endtime="20190515 08:32:52.743"></status>
</kw>
<status starttime="20190515 08:32:52.709" status="PASS" endtime="20190515 08:32:52.743"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${resp.json()}!=[]</arg>
<arg>${resp.json()[0]['spot_id']}</arg>
</arguments>
<assign>
<var>${spot_id}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.746">${spot_id} = f93c345e76a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:52.743" status="PASS" endtime="20190515 08:32:52.746"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${spot_id}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.746">${spot_id} = f93c345e76a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:52.746" status="PASS" endtime="20190515 08:32:52.747"></status>
</kw>
<status starttime="20190515 08:32:52.610" status="PASS" endtime="20190515 08:32:52.747"></status>
</kw>
<doc>接口名:获取泊位列表

请求方式:Get

预期结果:输入正确参数,http响应码返回 200,返回的Json数据为 Spot 对象。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:200</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:52.059" status="PASS" endtime="20190515 08:32:52.747"></status>
</test>
<test id="s1-s5-s1-t4" name="get projects spots by project id Fail With Wrong Url">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.749">${essential_params} = {}</msg>
<status starttime="20190515 08:32:52.749" status="PASS" endtime="20190515 08:32:52.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>spot_num=${spot_num}</arg>
<arg>spot_type=${spot_type}</arg>
<arg>road_name=${road_name}</arg>
<arg>start_road=${start_road}</arg>
<arg>end_road=${end_road}</arg>
<arg>section=${section}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.750">${unessential_params} = {'spot_num': '1010101', 'spot_type': '1', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路', 'section': '1557213000,1557213112', 'page_num': '1', 'page_size': '20'}</msg>
<status starttime="20190515 08:32:52.749" status="PASS" endtime="20190515 08:32:52.750"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects spots by project id fail 404</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.752">params:{'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路'}
params:{'spot_num': '1010101', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}</msg>
<msg level="INFO" timestamp="20190515 08:32:52.752">@{results} = [ {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'} | {'spot_num': '10101...</msg>
<status starttime="20190515 08:32:52.752" status="PASS" endtime="20190515 08:32:52.752"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.777">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.754" status="PASS" endtime="20190515 08:32:52.777"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.778">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.778" status="PASS" endtime="20190515 08:32:52.778"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.779">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.778" status="PASS" endtime="20190515 08:32:52.779"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.779">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.779" status="PASS" endtime="20190515 08:32:52.779"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.779">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.779" status="PASS" endtime="20190515 08:32:52.779"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.780">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.780" status="PASS" endtime="20190515 08:32:52.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.781">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.780" status="PASS" endtime="20190515 08:32:52.781"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.781">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.781" status="PASS" endtime="20190515 08:32:52.781"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.781" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<status starttime="20190515 08:32:52.780" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<status starttime="20190515 08:32:52.777" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<status starttime="20190515 08:32:52.753" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<status starttime="20190515 08:32:52.753" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<status starttime="20190515 08:32:52.753" status="PASS" endtime="20190515 08:32:52.782"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.803">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.783" status="PASS" endtime="20190515 08:32:52.803"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.804">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.804" status="PASS" endtime="20190515 08:32:52.804"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.804">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.804" status="PASS" endtime="20190515 08:32:52.804"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.805">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.804" status="PASS" endtime="20190515 08:32:52.805"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.805">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.805" status="PASS" endtime="20190515 08:32:52.805"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.806">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.806" status="PASS" endtime="20190515 08:32:52.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.807">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.806" status="PASS" endtime="20190515 08:32:52.807"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.807">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.807" status="PASS" endtime="20190515 08:32:52.807"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.807" status="PASS" endtime="20190515 08:32:52.807"></status>
</kw>
<status starttime="20190515 08:32:52.805" status="PASS" endtime="20190515 08:32:52.808"></status>
</kw>
<status starttime="20190515 08:32:52.803" status="PASS" endtime="20190515 08:32:52.808"></status>
</kw>
<status starttime="20190515 08:32:52.782" status="PASS" endtime="20190515 08:32:52.808"></status>
</kw>
<status starttime="20190515 08:32:52.782" status="PASS" endtime="20190515 08:32:52.808"></status>
</kw>
<status starttime="20190515 08:32:52.782" status="PASS" endtime="20190515 08:32:52.808"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.828">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.809" status="PASS" endtime="20190515 08:32:52.828"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.829">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.828" status="PASS" endtime="20190515 08:32:52.829"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.829">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.829" status="PASS" endtime="20190515 08:32:52.829"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.830">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.829" status="PASS" endtime="20190515 08:32:52.830"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.830">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.830" status="PASS" endtime="20190515 08:32:52.830"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.831">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.831" status="PASS" endtime="20190515 08:32:52.831"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.832">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.831" status="PASS" endtime="20190515 08:32:52.832"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.832">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.832" status="PASS" endtime="20190515 08:32:52.832"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.832" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<status starttime="20190515 08:32:52.830" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<status starttime="20190515 08:32:52.828" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<status starttime="20190515 08:32:52.808" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<status starttime="20190515 08:32:52.808" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<status starttime="20190515 08:32:52.808" status="PASS" endtime="20190515 08:32:52.833"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.855">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.834" status="PASS" endtime="20190515 08:32:52.855"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.856">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.856" status="PASS" endtime="20190515 08:32:52.856"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.857">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.856" status="PASS" endtime="20190515 08:32:52.857"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.857">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.857" status="PASS" endtime="20190515 08:32:52.857"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.858">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.858" status="PASS" endtime="20190515 08:32:52.858"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.859">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.859" status="PASS" endtime="20190515 08:32:52.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.860">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.860" status="PASS" endtime="20190515 08:32:52.860"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.861">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.860" status="PASS" endtime="20190515 08:32:52.861"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.861" status="PASS" endtime="20190515 08:32:52.861"></status>
</kw>
<status starttime="20190515 08:32:52.858" status="PASS" endtime="20190515 08:32:52.862"></status>
</kw>
<status starttime="20190515 08:32:52.855" status="PASS" endtime="20190515 08:32:52.862"></status>
</kw>
<status starttime="20190515 08:32:52.834" status="PASS" endtime="20190515 08:32:52.862"></status>
</kw>
<status starttime="20190515 08:32:52.833" status="PASS" endtime="20190515 08:32:52.862"></status>
</kw>
<status starttime="20190515 08:32:52.833" status="PASS" endtime="20190515 08:32:52.862"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.884">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.863" status="PASS" endtime="20190515 08:32:52.884"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.886">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.885" status="PASS" endtime="20190515 08:32:52.886"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.886">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.886" status="PASS" endtime="20190515 08:32:52.886"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.887">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.887" status="PASS" endtime="20190515 08:32:52.887"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.888">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.887" status="PASS" endtime="20190515 08:32:52.888"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.889">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.889" status="PASS" endtime="20190515 08:32:52.890"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.890">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.890" status="PASS" endtime="20190515 08:32:52.890"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.891">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.891" status="PASS" endtime="20190515 08:32:52.891"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.891" status="PASS" endtime="20190515 08:32:52.892"></status>
</kw>
<status starttime="20190515 08:32:52.888" status="PASS" endtime="20190515 08:32:52.892"></status>
</kw>
<status starttime="20190515 08:32:52.884" status="PASS" endtime="20190515 08:32:52.892"></status>
</kw>
<status starttime="20190515 08:32:52.863" status="PASS" endtime="20190515 08:32:52.892"></status>
</kw>
<status starttime="20190515 08:32:52.862" status="PASS" endtime="20190515 08:32:52.892"></status>
</kw>
<status starttime="20190515 08:32:52.862" status="PASS" endtime="20190515 08:32:52.893"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.918">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.894" status="PASS" endtime="20190515 08:32:52.918"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.920">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.919" status="PASS" endtime="20190515 08:32:52.920"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.921">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.920" status="PASS" endtime="20190515 08:32:52.921"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.922">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.921" status="PASS" endtime="20190515 08:32:52.922"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.923">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.922" status="PASS" endtime="20190515 08:32:52.923"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.925">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.924" status="PASS" endtime="20190515 08:32:52.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.926">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.925" status="PASS" endtime="20190515 08:32:52.926"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.927">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.926" status="PASS" endtime="20190515 08:32:52.927"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.927" status="PASS" endtime="20190515 08:32:52.928"></status>
</kw>
<status starttime="20190515 08:32:52.923" status="PASS" endtime="20190515 08:32:52.928"></status>
</kw>
<status starttime="20190515 08:32:52.919" status="PASS" endtime="20190515 08:32:52.928"></status>
</kw>
<status starttime="20190515 08:32:52.893" status="PASS" endtime="20190515 08:32:52.929"></status>
</kw>
<status starttime="20190515 08:32:52.893" status="PASS" endtime="20190515 08:32:52.929"></status>
</kw>
<status starttime="20190515 08:32:52.893" status="PASS" endtime="20190515 08:32:52.929"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.953">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.931" status="PASS" endtime="20190515 08:32:52.953"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.955">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.954" status="PASS" endtime="20190515 08:32:52.955"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.956">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.955" status="PASS" endtime="20190515 08:32:52.956"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.957">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.956" status="PASS" endtime="20190515 08:32:52.957"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.958">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.957" status="PASS" endtime="20190515 08:32:52.958"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.959">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.959" status="PASS" endtime="20190515 08:32:52.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.960">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.960" status="PASS" endtime="20190515 08:32:52.961"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.961">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.961" status="PASS" endtime="20190515 08:32:52.962"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.962" status="PASS" endtime="20190515 08:32:52.962"></status>
</kw>
<status starttime="20190515 08:32:52.958" status="PASS" endtime="20190515 08:32:52.963"></status>
</kw>
<status starttime="20190515 08:32:52.953" status="PASS" endtime="20190515 08:32:52.963"></status>
</kw>
<status starttime="20190515 08:32:52.930" status="PASS" endtime="20190515 08:32:52.963"></status>
</kw>
<status starttime="20190515 08:32:52.929" status="PASS" endtime="20190515 08:32:52.963"></status>
</kw>
<status starttime="20190515 08:32:52.929" status="PASS" endtime="20190515 08:32:52.963"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 404">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.988">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:52.965" status="PASS" endtime="20190515 08:32:52.988"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.990">${bug_level} = None</msg>
<status starttime="20190515 08:32:52.989" status="PASS" endtime="20190515 08:32:52.990"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.991">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.990" status="PASS" endtime="20190515 08:32:52.991"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:52.992">${status_tag} = None</msg>
<status starttime="20190515 08:32:52.991" status="PASS" endtime="20190515 08:32:52.992"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.993">Set tag 'None'.</msg>
<status starttime="20190515 08:32:52.992" status="PASS" endtime="20190515 08:32:52.993"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.994">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;GET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots?spot_num=1010101&amp;amp;page_num=1&amp;amp;spot_type=1&amp;amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;page_size=20&amp;amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;amp;section=1557213000%2C1557213112&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:52.994" status="PASS" endtime="20190515 08:32:52.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.996">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:52.995" status="PASS" endtime="20190515 08:32:52.996"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:52.997">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:52.996" status="PASS" endtime="20190515 08:32:52.997"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:52.997" status="PASS" endtime="20190515 08:32:52.998"></status>
</kw>
<status starttime="20190515 08:32:52.993" status="PASS" endtime="20190515 08:32:52.998"></status>
</kw>
<status starttime="20190515 08:32:52.988" status="PASS" endtime="20190515 08:32:52.998"></status>
</kw>
<status starttime="20190515 08:32:52.964" status="PASS" endtime="20190515 08:32:52.998"></status>
</kw>
<status starttime="20190515 08:32:52.964" status="PASS" endtime="20190515 08:32:52.998"></status>
</kw>
<status starttime="20190515 08:32:52.963" status="PASS" endtime="20190515 08:32:52.999"></status>
</kw>
<status starttime="20190515 08:32:52.753" status="PASS" endtime="20190515 08:32:52.999"></status>
</kw>
<status starttime="20190515 08:32:52.751" status="PASS" endtime="20190515 08:32:52.999"></status>
</kw>
<doc>接口名:获取泊位列表

请求方式:Get

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:52.747" status="PASS" endtime="20190515 08:32:52.999"></status>
</test>
<test id="s1-s5-s1-t5" name="get projects spots by project id Fail With Wrong Params">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.002">${essential_params} = {}</msg>
<status starttime="20190515 08:32:53.002" status="PASS" endtime="20190515 08:32:53.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page_num=${page_num_422}</arg>
<arg>page_size=${page_size_422}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.003">${unessential_params} = {'page_num': 'ThisIsRobot', 'page_size': 'ThisIsRobot'}</msg>
<status starttime="20190515 08:32:53.003" status="PASS" endtime="20190515 08:32:53.003"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects spots by project id fail 422</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
<arg>success=False</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.006">params:{'page_num': 'ThisIsRobot'}
params:{'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}</msg>
<msg level="INFO" timestamp="20190515 08:32:53.006">@{results} = [ {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} | {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'} ]</msg>
<status starttime="20190515 08:32:53.005" status="PASS" endtime="20190515 08:32:53.006"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.051">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:53.008" status="PASS" endtime="20190515 08:32:53.051"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.052">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.052" status="PASS" endtime="20190515 08:32:53.052"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.052">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.052" status="PASS" endtime="20190515 08:32:53.053"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.053">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.053" status="PASS" endtime="20190515 08:32:53.053"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.054">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.053" status="PASS" endtime="20190515 08:32:53.054"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.054">${re} = FAIL</msg>
<status starttime="20190515 08:32:53.054" status="PASS" endtime="20190515 08:32:53.054"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.055">${js} = FAIL</msg>
<status starttime="20190515 08:32:53.054" status="PASS" endtime="20190515 08:32:53.055"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.055">{"message": "Validation Failed", "errors": [{"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:53.055" status="PASS" endtime="20190515 08:32:53.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.056">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?page_size=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:53.056" status="PASS" endtime="20190515 08:32:53.056"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.056">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.056" status="PASS" endtime="20190515 08:32:53.056"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.057" status="PASS" endtime="20190515 08:32:53.057"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:53.057">${re} = PASS</msg>
<status starttime="20190515 08:32:53.055" status="PASS" endtime="20190515 08:32:53.057"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:53.058" status="PASS" endtime="20190515 08:32:53.058"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:53.058" status="PASS" endtime="20190515 08:32:53.060"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:53.060" status="PASS" endtime="20190515 08:32:53.060"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:53.060">${js} = PASS</msg>
<status starttime="20190515 08:32:53.057" status="PASS" endtime="20190515 08:32:53.060"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:53.061" status="PASS" endtime="20190515 08:32:53.061"></status>
</kw>
<status starttime="20190515 08:32:53.061" status="PASS" endtime="20190515 08:32:53.061"></status>
</kw>
<status starttime="20190515 08:32:53.051" status="PASS" endtime="20190515 08:32:53.061"></status>
</kw>
<status starttime="20190515 08:32:53.007" status="PASS" endtime="20190515 08:32:53.062"></status>
</kw>
<status starttime="20190515 08:32:53.007" status="PASS" endtime="20190515 08:32:53.062"></status>
</kw>
<status starttime="20190515 08:32:53.006" status="PASS" endtime="20190515 08:32:53.062"></status>
</kw>
<kw name="${kwargs} = {'page_size': 'ThisIsRobot', 'page_num': 'ThisIsRobot'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 422">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.096">${resp} = &lt;Response [422]&gt;</msg>
<status starttime="20190515 08:32:53.063" status="PASS" endtime="20190515 08:32:53.096"></status>
</kw>
<kw name="Expect Status is 422" library="resources">
<doc>检测响应状态是否为422 Unprocessable Entity，返回的json格式是否符合验证。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.098">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.097" status="PASS" endtime="20190515 08:32:53.098"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.099">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.098" status="PASS" endtime="20190515 08:32:53.099"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.100">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.099" status="PASS" endtime="20190515 08:32:53.100"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.100">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.100" status="PASS" endtime="20190515 08:32:53.101"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.101">${re} = FAIL</msg>
<status starttime="20190515 08:32:53.101" status="PASS" endtime="20190515 08:32:53.101"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>FAIL</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.102">${js} = FAIL</msg>
<status starttime="20190515 08:32:53.101" status="PASS" endtime="20190515 08:32:53.102"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>422</arg>
</arguments>
<assign>
<var>${re}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.104">{"message": "Validation Failed", "errors": [{"field": "page_num", "code": "invalid"}, {"field": "page_size", "code": "invalid"}]}</msg>
<status starttime="20190515 08:32:53.103" status="PASS" endtime="20190515 08:32:53.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.105">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?page_size=ThisIsRobot&amp;page_num=ThisIsRobot</msg>
<status starttime="20190515 08:32:53.104" status="PASS" endtime="20190515 08:32:53.105"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.106">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.105" status="PASS" endtime="20190515 08:32:53.106"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.106" status="PASS" endtime="20190515 08:32:53.107"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:53.107">${re} = PASS</msg>
<status starttime="20190515 08:32:53.102" status="PASS" endtime="20190515 08:32:53.107"></status>
</kw>
<kw name="To Validate Json" library="resources">
<doc>检测响应状态是否符合预期值。
{schema}:JsonSchema验证。
{resp}:响应实体。</doc>
<arguments>
<arg>common/error_422.schema.json</arg>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${js}</var>
</assign>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${schema}'=='NoSchema'</arg>
<arg>无需验证Json，通过。</arg>
</arguments>
<status starttime="20190515 08:32:53.108" status="PASS" endtime="20190515 08:32:53.108"></status>
</kw>
<kw name="Validate Json" library="JSONSchemaLibrary">
<arguments>
<arg>${schema}</arg>
<arg>${resp.json()}</arg>
</arguments>
<status starttime="20190515 08:32:53.109" status="PASS" endtime="20190515 08:32:53.112"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>Log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]}错误。test_case：${TEST_NAME}:Json验证错误。</arg>
<arg>ERROR</arg>
</arguments>
<status starttime="20190515 08:32:53.112" status="PASS" endtime="20190515 08:32:53.113"></status>
</kw>
<msg level="INFO" timestamp="20190515 08:32:53.113">${js} = PASS</msg>
<status starttime="20190515 08:32:53.107" status="PASS" endtime="20190515 08:32:53.113"></status>
</kw>
<kw name="Auto Creat JsonError Tag" type="teardown" library="resources">
<doc>根据状态自动生成’Json返回错误‘类提示Tag。
{re}:状态码判断keyword状态。
{js}:json判断keyword状态。</doc>
<arguments>
<arg>${re}</arg>
<arg>${js}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${re}'=='PASS' and '${js}'=='FAIL'</arg>
<arg>set tags</arg>
<arg>JsonReturnError</arg>
</arguments>
<status starttime="20190515 08:32:53.114" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.113" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.096" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.062" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.062" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.062" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.006" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<status starttime="20190515 08:32:53.004" status="PASS" endtime="20190515 08:32:53.115"></status>
</kw>
<doc>接口名:获取泊位列表

请求方式:Get

预期结果:输入错误参数,http响应码返回 422,返回的Json数据为错误信息。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:422</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.000" status="PASS" endtime="20190515 08:32:53.116"></status>
</test>
<test id="s1-s5-s1-t6" name="delete projects spots by project id spot id Success">
<kw name="delete projects spots by project id spot id Success 204">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>spot_id=${spot_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id Spot Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.166">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:53.119" status="PASS" endtime="20190515 08:32:53.167"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.170">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.168" status="PASS" endtime="20190515 08:32:53.170"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.171">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.170" status="PASS" endtime="20190515 08:32:53.171"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.173">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.172" status="PASS" endtime="20190515 08:32:53.173"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.174">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.173" status="PASS" endtime="20190515 08:32:53.175"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.177"></msg>
<status starttime="20190515 08:32:53.176" status="PASS" endtime="20190515 08:32:53.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.179">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots/f93c345e76a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:53.178" status="PASS" endtime="20190515 08:32:53.179"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.180">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.179" status="PASS" endtime="20190515 08:32:53.181"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.181" status="PASS" endtime="20190515 08:32:53.182"></status>
</kw>
<status starttime="20190515 08:32:53.175" status="PASS" endtime="20190515 08:32:53.183"></status>
</kw>
<status starttime="20190515 08:32:53.167" status="PASS" endtime="20190515 08:32:53.183"></status>
</kw>
<status starttime="20190515 08:32:53.118" status="PASS" endtime="20190515 08:32:53.183"></status>
</kw>
<doc>接口名:删除单个泊位

请求方式:Delete

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.116" status="PASS" endtime="20190515 08:32:53.184"></status>
</test>
<test id="s1-s5-s1-t7" name="delete projects spots by project id spot id Fail With Wrong Url">
<kw name="delete projects spots by project id spot id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
<arg>spot_id=${wrong_url_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id Spot Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.214">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:53.189" status="PASS" endtime="20190515 08:32:53.214"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.214">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.214" status="PASS" endtime="20190515 08:32:53.214"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.215">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.214" status="PASS" endtime="20190515 08:32:53.215"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.215">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.215" status="PASS" endtime="20190515 08:32:53.215"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.215">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.215" status="PASS" endtime="20190515 08:32:53.215"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.216">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots/[12345678987654321]&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;DELETE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots/%5B12345678987654321%5D&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots/[12345678987654321]&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:53.216" status="PASS" endtime="20190515 08:32:53.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.216">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots/[12345678987654321]</msg>
<status starttime="20190515 08:32:53.216" status="PASS" endtime="20190515 08:32:53.216"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.217">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.217" status="PASS" endtime="20190515 08:32:53.217"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.217" status="PASS" endtime="20190515 08:32:53.217"></status>
</kw>
<status starttime="20190515 08:32:53.216" status="PASS" endtime="20190515 08:32:53.217"></status>
</kw>
<status starttime="20190515 08:32:53.214" status="PASS" endtime="20190515 08:32:53.217"></status>
</kw>
<status starttime="20190515 08:32:53.188" status="PASS" endtime="20190515 08:32:53.217"></status>
</kw>
<doc>接口名:删除单个泊位

请求方式:Delete

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.185" status="PASS" endtime="20190515 08:32:53.217"></status>
</test>
<test id="s1-s5-s1-t8" name="delete projects spots by project id Success">
<kw name="delete projects spots by project id Success 204">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.256">${resp} = &lt;Response [204]&gt;</msg>
<status starttime="20190515 08:32:53.219" status="PASS" endtime="20190515 08:32:53.257"></status>
</kw>
<kw name="Expect Status is 204" library="resources">
<doc>检测响应状态是否为204 No Content。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.260">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.259" status="PASS" endtime="20190515 08:32:53.260"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.261">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.260" status="PASS" endtime="20190515 08:32:53.262"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.263">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.262" status="PASS" endtime="20190515 08:32:53.263"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.264">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.263" status="PASS" endtime="20190515 08:32:53.265"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>204</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.267"></msg>
<status starttime="20190515 08:32:53.266" status="PASS" endtime="20190515 08:32:53.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.269">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots</msg>
<status starttime="20190515 08:32:53.268" status="PASS" endtime="20190515 08:32:53.269"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.274">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.269" status="PASS" endtime="20190515 08:32:53.274"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.275" status="PASS" endtime="20190515 08:32:53.276"></status>
</kw>
<status starttime="20190515 08:32:53.265" status="PASS" endtime="20190515 08:32:53.276"></status>
</kw>
<status starttime="20190515 08:32:53.257" status="PASS" endtime="20190515 08:32:53.276"></status>
</kw>
<status starttime="20190515 08:32:53.218" status="PASS" endtime="20190515 08:32:53.277"></status>
</kw>
<doc>接口名:删除所有泊位

请求方式:Delete

预期结果:输入正确参数,http响应码返回 204,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:204</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.218" status="PASS" endtime="20190515 08:32:53.277"></status>
</test>
<test id="s1-s5-s1-t9" name="delete projects spots by project id Fail With Wrong Url">
<kw name="delete projects spots by project id Fail 404">
<arguments>
<arg>project_id=${wrong_url_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id" library="spot">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.304">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20190515 08:32:53.282" status="PASS" endtime="20190515 08:32:53.304"></status>
</kw>
<kw name="Expect Status is 404" library="resources">
<doc>检测响应状态是否为404 Not Found。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.305">${bug_level} = None</msg>
<status starttime="20190515 08:32:53.305" status="PASS" endtime="20190515 08:32:53.305"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.305">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.305" status="PASS" endtime="20190515 08:32:53.305"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>404</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:53.306">${status_tag} = None</msg>
<status starttime="20190515 08:32:53.306" status="PASS" endtime="20190515 08:32:53.306"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.306">Set tag 'None'.</msg>
<status starttime="20190515 08:32:53.306" status="PASS" endtime="20190515 08:32:53.306"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>404</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.307">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;Page not found at /projects/[12345678987654321]/spots&lt;/title&gt;
  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;
  &lt;style type="text/css"&gt;
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background:#eee; }
    body&gt;div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; margin-bottom:.4em; }
    h1 span { font-size:60%; color:#666; font-weight:normal; }
    table { border:none; border-collapse: collapse; width:100%; }
    td, th { vertical-align:top; padding:2px 3px; }
    th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    #info { background:#f6f6f6; }
    #info ol { margin: 0.5em 4em; }
    #info ol li { font-family: monospace; }
    #summary { background: #ffc; }
    #explanation { background:#eee; border-bottom: 0px none; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="summary"&gt;
    &lt;h1&gt;Page not found &lt;span&gt;(404)&lt;/span&gt;&lt;/h1&gt;
    &lt;table class="meta"&gt;
      &lt;tr&gt;
        &lt;th&gt;Request Method:&lt;/th&gt;
        &lt;td&gt;DELETE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;Request URL:&lt;/th&gt;
        &lt;td&gt;https://camera-monitor-deployment-server-d.parkone.cn/projects/%5B12345678987654321%5D/spots&lt;/td&gt;
      &lt;/tr&gt;
      
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id="info"&gt;
    
      &lt;p&gt;
      Using the URLconf defined in &lt;code&gt;camera_monitor_deployment_server.urls&lt;/code&gt;,
      Django tried these URL patterns, in this order:
      &lt;/p&gt;
      &lt;ol&gt;
        
          &lt;li&gt;
            
                ^admin/
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^login$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^logout$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^user$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/password$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)/roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^users/(?P&amp;lt;username&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^roles$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^camera_brands$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/equipment_list/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/export$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/import$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/spots/(?P&amp;lt;spot_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/status$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/dot_datas/(?P&amp;lt;dot_data_id&amp;gt;[\w]+)/camera_infos/(?P&amp;lt;camera_info_id&amp;gt;[\w]+)$
                
            
          &lt;/li&gt;
        
          &lt;li&gt;
            
                ^
                
            
                ^projects/(?P&amp;lt;project_id&amp;gt;[\w]+)/statistics$
                
            
          &lt;/li&gt;
        
      &lt;/ol&gt;
      &lt;p&gt;
        
        The current path, &lt;code&gt;projects/[12345678987654321]/spots&lt;/code&gt;, didn't match any of these.
      &lt;/p&gt;
    
  &lt;/div&gt;

  &lt;div id="explanation"&gt;
    &lt;p&gt;
      You're seeing this error because you have &lt;code&gt;DEBUG = True&lt;/code&gt; in
      your Django settings file. Change that to &lt;code&gt;False&lt;/code&gt;, and Django
      will display a standard 404 page.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</msg>
<status starttime="20190515 08:32:53.307" status="PASS" endtime="20190515 08:32:53.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.307">https://camera-monitor-deployment-server-d.parkone.cn/projects/[12345678987654321]/spots</msg>
<status starttime="20190515 08:32:53.307" status="PASS" endtime="20190515 08:32:53.307"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:53.307">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:53.307" status="PASS" endtime="20190515 08:32:53.308"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:53.308" status="PASS" endtime="20190515 08:32:53.308"></status>
</kw>
<status starttime="20190515 08:32:53.306" status="PASS" endtime="20190515 08:32:53.308"></status>
</kw>
<status starttime="20190515 08:32:53.305" status="PASS" endtime="20190515 08:32:53.308"></status>
</kw>
<status starttime="20190515 08:32:53.281" status="PASS" endtime="20190515 08:32:53.308"></status>
</kw>
<doc>接口名:删除所有泊位

请求方式:Delete

预期结果:输入正确参数及错误的url,http响应码返回 404,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:404</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.278" status="PASS" endtime="20190515 08:32:53.308"></status>
</test>
<kw name="Logout" type="teardown" library="spot">
<status starttime="20190515 08:32:53.309" status="PASS" endtime="20190515 08:32:53.339"></status>
</kw>
<doc>server_spot</doc>
<status starttime="20190515 08:32:51.204" status="PASS" endtime="20190515 08:32:53.339"></status>
</suite>
<suite id="s1-s5-s2" name="Spots.Unauthorized" source="/home/fuyuning/workspaces/robot_camera_monitor_deployment_server/tests/server_spot/spots.unauthorized.robot">
<test id="s1-s5-s2-t1" name="post projects spots import by project id Fail Without Login">
<kw name="post projects spots import by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>file=tests/server_spot/spot_info.xlsx</arg>
</arguments>
<kw name="Post Projects Spots Import By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.305">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:53.348" status="PASS" endtime="20190515 08:32:55.305"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.306">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.305" status="PASS" endtime="20190515 08:32:55.306"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.306">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.306" status="PASS" endtime="20190515 08:32:55.306"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.307">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.306" status="PASS" endtime="20190515 08:32:55.307"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.307">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.307" status="PASS" endtime="20190515 08:32:55.307"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.308">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.308" status="PASS" endtime="20190515 08:32:55.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.309">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots/import</msg>
<status starttime="20190515 08:32:55.309" status="PASS" endtime="20190515 08:32:55.309"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.309">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.309" status="PASS" endtime="20190515 08:32:55.310"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.310" status="PASS" endtime="20190515 08:32:55.310"></status>
</kw>
<status starttime="20190515 08:32:55.308" status="PASS" endtime="20190515 08:32:55.310"></status>
</kw>
<status starttime="20190515 08:32:55.305" status="PASS" endtime="20190515 08:32:55.310"></status>
</kw>
<status starttime="20190515 08:32:53.348" status="PASS" endtime="20190515 08:32:55.311"></status>
</kw>
<doc>接口名:导入泊位

请求方式:Post

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:53.347" status="PASS" endtime="20190515 08:32:55.311"></status>
</test>
<test id="s1-s5-s2-t2" name="get projects spots by project id Fail Without Login">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${essential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.313">${essential_params} = {}</msg>
<status starttime="20190515 08:32:55.312" status="PASS" endtime="20190515 08:32:55.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>spot_num=${spot_num}</arg>
<arg>spot_type=${spot_type}</arg>
<arg>road_name=${road_name}</arg>
<arg>start_road=${start_road}</arg>
<arg>end_road=${end_road}</arg>
<arg>section=${section}</arg>
<arg>page_num=${page_num}</arg>
<arg>page_size=${page_size}</arg>
</arguments>
<assign>
<var>${unessential_params}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.314">${unessential_params} = {'spot_num': '1010101', 'spot_type': '1', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路', 'section': '1557213000,1557213112', 'page_num': '1', 'page_size': '20'}</msg>
<status starttime="20190515 08:32:55.313" status="PASS" endtime="20190515 08:32:55.314"></status>
</kw>
<kw name="Run Every Case By Params" library="resources">
<doc>解析传入的参数并以规定方式运行各种情况。
{case_name}:测试用例名字。
{essential_params}:必传参数。
{unessential_params}:非必传参数。
{success}:默认为True，当需要运行422情况时填入success=False。
{url_parttern}:当需要向方法中传入url时填写</doc>
<arguments>
<arg>get projects spots by project id fail 403</arg>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Auto Params" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${essential_params}</arg>
<arg>${unessential_params}</arg>
<arg>${success}</arg>
</arguments>
<assign>
<var>@{results}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.315">params:{'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路'}
params:{'spot_type': '1', 'spot_num': '1010101', 'road_name': '随机道路', 'start_road': '随机道路', 'end_road': '随机道路'}
params:{'spot_num': '1010101', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}
params:{'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}</msg>
<msg level="INFO" timestamp="20190515 08:32:55.315">@{results} = [ {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'} | {'spot_num': '10101...</msg>
<status starttime="20190515 08:32:55.315" status="PASS" endtime="20190515 08:32:55.315"></status>
</kw>
<kw name="${kwargs} IN [ @{results} ]" type="for">
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.330">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.317" status="PASS" endtime="20190515 08:32:55.330"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.331">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.331" status="PASS" endtime="20190515 08:32:55.331"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.332">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.331" status="PASS" endtime="20190515 08:32:55.332"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.332">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.332" status="PASS" endtime="20190515 08:32:55.332"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.333">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.333" status="PASS" endtime="20190515 08:32:55.333"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.334">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.334" status="PASS" endtime="20190515 08:32:55.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.335">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.334" status="PASS" endtime="20190515 08:32:55.335"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.335">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.335" status="PASS" endtime="20190515 08:32:55.335"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.336" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<status starttime="20190515 08:32:55.333" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<status starttime="20190515 08:32:55.330" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<status starttime="20190515 08:32:55.317" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<status starttime="20190515 08:32:55.316" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<status starttime="20190515 08:32:55.316" status="PASS" endtime="20190515 08:32:55.336"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.347">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.338" status="PASS" endtime="20190515 08:32:55.347"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.348">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.348" status="PASS" endtime="20190515 08:32:55.348"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.349">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.349" status="PASS" endtime="20190515 08:32:55.349"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.350">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.349" status="PASS" endtime="20190515 08:32:55.350"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.350">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.350" status="PASS" endtime="20190515 08:32:55.350"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.352">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.351" status="PASS" endtime="20190515 08:32:55.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.352">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.352" status="PASS" endtime="20190515 08:32:55.352"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.353">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.352" status="PASS" endtime="20190515 08:32:55.353"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.353" status="PASS" endtime="20190515 08:32:55.353"></status>
</kw>
<status starttime="20190515 08:32:55.350" status="PASS" endtime="20190515 08:32:55.354"></status>
</kw>
<status starttime="20190515 08:32:55.348" status="PASS" endtime="20190515 08:32:55.354"></status>
</kw>
<status starttime="20190515 08:32:55.337" status="PASS" endtime="20190515 08:32:55.354"></status>
</kw>
<status starttime="20190515 08:32:55.337" status="PASS" endtime="20190515 08:32:55.354"></status>
</kw>
<status starttime="20190515 08:32:55.336" status="PASS" endtime="20190515 08:32:55.354"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.365">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.355" status="PASS" endtime="20190515 08:32:55.365"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.366">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.365" status="PASS" endtime="20190515 08:32:55.366"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.366">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.366" status="PASS" endtime="20190515 08:32:55.366"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.367">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.366" status="PASS" endtime="20190515 08:32:55.367"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.367">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.367" status="PASS" endtime="20190515 08:32:55.368"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.368">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.368" status="PASS" endtime="20190515 08:32:55.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.369">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.369" status="PASS" endtime="20190515 08:32:55.369"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.370">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.369" status="PASS" endtime="20190515 08:32:55.370"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.370" status="PASS" endtime="20190515 08:32:55.370"></status>
</kw>
<status starttime="20190515 08:32:55.368" status="PASS" endtime="20190515 08:32:55.371"></status>
</kw>
<status starttime="20190515 08:32:55.365" status="PASS" endtime="20190515 08:32:55.371"></status>
</kw>
<status starttime="20190515 08:32:55.354" status="PASS" endtime="20190515 08:32:55.371"></status>
</kw>
<status starttime="20190515 08:32:55.354" status="PASS" endtime="20190515 08:32:55.371"></status>
</kw>
<status starttime="20190515 08:32:55.354" status="PASS" endtime="20190515 08:32:55.371"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.383">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.372" status="PASS" endtime="20190515 08:32:55.383"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.384">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.383" status="PASS" endtime="20190515 08:32:55.384"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.384">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.384" status="PASS" endtime="20190515 08:32:55.384"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.385">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.384" status="PASS" endtime="20190515 08:32:55.385"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.386">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.385" status="PASS" endtime="20190515 08:32:55.386"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.387">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.387" status="PASS" endtime="20190515 08:32:55.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.387">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.387" status="PASS" endtime="20190515 08:32:55.388"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.388">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.388" status="PASS" endtime="20190515 08:32:55.388"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.388" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<status starttime="20190515 08:32:55.386" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<status starttime="20190515 08:32:55.383" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<status starttime="20190515 08:32:55.371" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<status starttime="20190515 08:32:55.371" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<status starttime="20190515 08:32:55.371" status="PASS" endtime="20190515 08:32:55.389"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.401">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.390" status="PASS" endtime="20190515 08:32:55.401"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.402">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.401" status="PASS" endtime="20190515 08:32:55.402"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.403">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.402" status="PASS" endtime="20190515 08:32:55.403"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.403">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.403" status="PASS" endtime="20190515 08:32:55.403"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.404">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.403" status="PASS" endtime="20190515 08:32:55.404"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.405">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.404" status="PASS" endtime="20190515 08:32:55.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.405">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.405" status="PASS" endtime="20190515 08:32:55.405"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.406">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.406" status="PASS" endtime="20190515 08:32:55.406"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.406" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<status starttime="20190515 08:32:55.404" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<status starttime="20190515 08:32:55.401" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<status starttime="20190515 08:32:55.390" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<status starttime="20190515 08:32:55.389" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<status starttime="20190515 08:32:55.389" status="PASS" endtime="20190515 08:32:55.407"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.418">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.408" status="PASS" endtime="20190515 08:32:55.418"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.419">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.419" status="PASS" endtime="20190515 08:32:55.419"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.420">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.419" status="PASS" endtime="20190515 08:32:55.420"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.421">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.420" status="PASS" endtime="20190515 08:32:55.421"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.421">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.421" status="PASS" endtime="20190515 08:32:55.421"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.422">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.422" status="PASS" endtime="20190515 08:32:55.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.423">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.423" status="PASS" endtime="20190515 08:32:55.423"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.424">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.423" status="PASS" endtime="20190515 08:32:55.424"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.424" status="PASS" endtime="20190515 08:32:55.424"></status>
</kw>
<status starttime="20190515 08:32:55.422" status="PASS" endtime="20190515 08:32:55.424"></status>
</kw>
<status starttime="20190515 08:32:55.418" status="PASS" endtime="20190515 08:32:55.425"></status>
</kw>
<status starttime="20190515 08:32:55.408" status="PASS" endtime="20190515 08:32:55.425"></status>
</kw>
<status starttime="20190515 08:32:55.407" status="PASS" endtime="20190515 08:32:55.425"></status>
</kw>
<status starttime="20190515 08:32:55.407" status="PASS" endtime="20190515 08:32:55.425"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.435">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.426" status="PASS" endtime="20190515 08:32:55.435"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.437">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.436" status="PASS" endtime="20190515 08:32:55.437"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.437">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.437" status="PASS" endtime="20190515 08:32:55.437"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.438">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.437" status="PASS" endtime="20190515 08:32:55.438"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.438">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.438" status="PASS" endtime="20190515 08:32:55.438"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.439">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.439" status="PASS" endtime="20190515 08:32:55.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.440">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.440" status="PASS" endtime="20190515 08:32:55.440"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.441">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.440" status="PASS" endtime="20190515 08:32:55.441"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.441" status="PASS" endtime="20190515 08:32:55.441"></status>
</kw>
<status starttime="20190515 08:32:55.439" status="PASS" endtime="20190515 08:32:55.441"></status>
</kw>
<status starttime="20190515 08:32:55.436" status="PASS" endtime="20190515 08:32:55.441"></status>
</kw>
<status starttime="20190515 08:32:55.425" status="PASS" endtime="20190515 08:32:55.442"></status>
</kw>
<status starttime="20190515 08:32:55.425" status="PASS" endtime="20190515 08:32:55.442"></status>
</kw>
<status starttime="20190515 08:32:55.425" status="PASS" endtime="20190515 08:32:55.442"></status>
</kw>
<kw name="${kwargs} = {'spot_num': '1010101', 'page_size': '20', 'page_num': '1', 'spot_type': '1', 'end_road': '随机道路', 'road_name': '随机道路', 'section': '1557213000,1557213112', 'start_road': '随机道路'}" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${case_name}</arg>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="get projects spots by project id Fail 403">
<arguments>
<arg>&amp;{url_parttern}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Get Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.452">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.443" status="PASS" endtime="20190515 08:32:55.452"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.453">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.453" status="PASS" endtime="20190515 08:32:55.453"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.454">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.453" status="PASS" endtime="20190515 08:32:55.454"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.454">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.454" status="PASS" endtime="20190515 08:32:55.454"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.455">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.454" status="PASS" endtime="20190515 08:32:55.455"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.455">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.455" status="PASS" endtime="20190515 08:32:55.455"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.456">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots?spot_num=1010101&amp;page_num=1&amp;spot_type=1&amp;end_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;road_name=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;page_size=20&amp;start_road=%E9%9A%8F%E6%9C%BA%E9%81%93%E8%B7%AF&amp;section=1557213000%2C1557213112</msg>
<status starttime="20190515 08:32:55.456" status="PASS" endtime="20190515 08:32:55.456"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.456">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.456" status="PASS" endtime="20190515 08:32:55.456"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.456" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.455" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.452" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.442" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.442" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.442" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.315" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<status starttime="20190515 08:32:55.314" status="PASS" endtime="20190515 08:32:55.457"></status>
</kw>
<doc>接口名:获取泊位列表

请求方式:Get

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:55.311" status="PASS" endtime="20190515 08:32:55.457"></status>
</test>
<test id="s1-s5-s2-t3" name="delete projects spots by project id spot id Fail Without Login">
<kw name="delete projects spots by project id spot id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
<arg>spot_id=${spot_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id Spot Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.470">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.459" status="PASS" endtime="20190515 08:32:55.470"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.471">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.470" status="PASS" endtime="20190515 08:32:55.471"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.471">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.471" status="PASS" endtime="20190515 08:32:55.471"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.471">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.471" status="PASS" endtime="20190515 08:32:55.472"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.472">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.472" status="PASS" endtime="20190515 08:32:55.472"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.473">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.472" status="PASS" endtime="20190515 08:32:55.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.473">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots/f93c345e76a811e991df0242c0a8b002</msg>
<status starttime="20190515 08:32:55.473" status="PASS" endtime="20190515 08:32:55.473"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.473">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.473" status="PASS" endtime="20190515 08:32:55.474"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.474" status="PASS" endtime="20190515 08:32:55.474"></status>
</kw>
<status starttime="20190515 08:32:55.472" status="PASS" endtime="20190515 08:32:55.474"></status>
</kw>
<status starttime="20190515 08:32:55.470" status="PASS" endtime="20190515 08:32:55.474"></status>
</kw>
<status starttime="20190515 08:32:55.458" status="PASS" endtime="20190515 08:32:55.474"></status>
</kw>
<doc>接口名:删除单个泊位

请求方式:Delete

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:55.458" status="PASS" endtime="20190515 08:32:55.474"></status>
</test>
<test id="s1-s5-s2-t4" name="delete projects spots by project id Fail Without Login">
<kw name="delete projects spots by project id Fail 403">
<arguments>
<arg>project_id=${project_id}</arg>
</arguments>
<kw name="Delete Projects Spots By Project Id" library="robot_camera_monitor_deployment_server.spot.SpotLibrary">
<arguments>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.486">${resp} = &lt;Response [403]&gt;</msg>
<status starttime="20190515 08:32:55.476" status="PASS" endtime="20190515 08:32:55.486"></status>
</kw>
<kw name="Expect Status is 403" library="resources">
<doc>检测响应状态是否为403 Forbidden。
{resp}: 响应实体。</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw name="Auto Create Bug Level Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${bug_level}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.487">${bug_level} = None</msg>
<status starttime="20190515 08:32:55.487" status="PASS" endtime="20190515 08:32:55.487"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${bug_level}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.488">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.487" status="PASS" endtime="20190515 08:32:55.488"></status>
</kw>
<kw name="Auto Create Status Tag" library="UtilsLibrary.BaseUtilsLibrary">
<arguments>
<arg>${resp.status_code}</arg>
<arg>403</arg>
</arguments>
<assign>
<var>${status_tag}</var>
</assign>
<msg level="INFO" timestamp="20190515 08:32:55.488">${status_tag} = None</msg>
<status starttime="20190515 08:32:55.488" status="PASS" endtime="20190515 08:32:55.488"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${status_tag}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.488">Set tag 'None'.</msg>
<status starttime="20190515 08:32:55.488" status="PASS" endtime="20190515 08:32:55.489"></status>
</kw>
<kw name="Status Should be" library="resources">
<doc>检测响应状态是否符合预期值。
{resp}: 响应实体。
{status_code}: 预期的响应状态。</doc>
<arguments>
<arg>${resp}</arg>
<arg>403</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.489">{"message": "Authorization failed"}</msg>
<status starttime="20190515 08:32:55.489" status="PASS" endtime="20190515 08:32:55.489"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.url}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.490">https://camera-monitor-deployment-server-d.parkone.cn/projects/f8fd3a3876a811e991df0242c0a8b002/spots</msg>
<status starttime="20190515 08:32:55.489" status="PASS" endtime="20190515 08:32:55.490"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${status_code}</arg>
</arguments>
<msg level="INFO" timestamp="20190515 08:32:55.490">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20190515 08:32:55.490" status="PASS" endtime="20190515 08:32:55.490"></status>
</kw>
<kw name="Run Keyword If" type="teardown" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}'=='FAIL'</arg>
<arg>log</arg>
<arg>${SUITE_NAME}模块中的接口：${resp.url[53:]} 错误。test_case：${TEST_NAME}:应返回${status_code}，但返回${resp.status_code}。</arg>
<arg>WARN</arg>
</arguments>
<status starttime="20190515 08:32:55.490" status="PASS" endtime="20190515 08:32:55.491"></status>
</kw>
<status starttime="20190515 08:32:55.489" status="PASS" endtime="20190515 08:32:55.491"></status>
</kw>
<status starttime="20190515 08:32:55.486" status="PASS" endtime="20190515 08:32:55.491"></status>
</kw>
<status starttime="20190515 08:32:55.476" status="PASS" endtime="20190515 08:32:55.491"></status>
</kw>
<doc>接口名:删除所有泊位

请求方式:Delete

预期结果:未登录,http响应码返回 403,无Json数据返回。</doc>
<tags>
<tag>model:server_spot</tag>
<tag>Respcode:403</tag>
<tag>中杆后台</tag>
</tags>
<status critical="yes" starttime="20190515 08:32:55.475" status="PASS" endtime="20190515 08:32:55.491"></status>
</test>
<doc>server_spot</doc>
<status starttime="20190515 08:32:53.340" status="PASS" endtime="20190515 08:32:55.491"></status>
</suite>
<status starttime="20190515 08:32:51.202" status="PASS" endtime="20190515 08:32:55.493"></status>
</suite>
<status starttime="20190515 08:32:25.502" status="PASS" endtime="20190515 08:32:55.497"></status>
</suite>
<statistics>
<total>
<stat pass="96" fail="0">Critical Tests</stat>
<stat pass="96" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0">JsonReturnError</stat>
<stat pass="30" fail="0">model:server_account</stat>
<stat pass="32" fail="0">model:server_dot</stat>
<stat pass="21" fail="0">model:server_project</stat>
<stat pass="13" fail="0">model:server_spot</stat>
<stat pass="13" fail="0">Respcode:200</stat>
<stat pass="3" fail="0">Respcode:201</stat>
<stat pass="13" fail="0">Respcode:204</stat>
<stat pass="29" fail="0">Respcode:403</stat>
<stat pass="22" fail="0">Respcode:404</stat>
<stat pass="14" fail="0">Respcode:422</stat>
<stat pass="96" fail="0">中杆后台</stat>
</tag>
<suite>
<stat pass="96" id="s1" name="Tests" fail="0">Tests</stat>
<stat pass="28" id="s1-s1" name="Server Account" fail="0">Tests.Server Account</stat>
<stat pass="19" id="s1-s1-s1" name="Accounts" fail="0">Tests.Server Account.Accounts</stat>
<stat pass="9" id="s1-s1-s2" name="Accounts.Unauthorized" fail="0">Tests.Server Account.Accounts.Unauthorized</stat>
<stat pass="32" id="s1-s2" name="Server Dot" fail="0">Tests.Server Dot</stat>
<stat pass="23" id="s1-s2-s1" name="Dots" fail="0">Tests.Server Dot.Dots</stat>
<stat pass="9" id="s1-s2-s2" name="Dots.Unauthorized" fail="0">Tests.Server Dot.Dots.Unauthorized</stat>
<stat pass="2" id="s1-s3" name="Server Login" fail="0">Tests.Server Login</stat>
<stat pass="2" id="s1-s3-s1" name="Login" fail="0">Tests.Server Login.Login</stat>
<stat pass="21" id="s1-s4" name="Server Project" fail="0">Tests.Server Project</stat>
<stat pass="14" id="s1-s4-s1" name="Projects" fail="0">Tests.Server Project.Projects</stat>
<stat pass="7" id="s1-s4-s2" name="Projects.Unauthorized" fail="0">Tests.Server Project.Projects.Unauthorized</stat>
<stat pass="13" id="s1-s5" name="Server Spot" fail="0">Tests.Server Spot</stat>
<stat pass="9" id="s1-s5-s1" name="Spots" fail="0">Tests.Server Spot.Spots</stat>
<stat pass="4" id="s1-s5-s2" name="Spots.Unauthorized" fail="0">Tests.Server Spot.Spots.Unauthorized</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
